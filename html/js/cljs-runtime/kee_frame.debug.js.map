{"version":3,"sources":["kee_frame/debug.cljc"],"mappings":";AAMA,uCAAA,+CAAAA,tFAAMG;AAAN,AAAA,IAAAF,aAAAD;gBAAA,AAAAE,4CAAAD,WAAA,IAAA,vEAAuBG;AAAvB,AACE,IAAAC,aAAA,AAAAC,gBAC8BK;IAD9BN,iBAAA,AAAAE,4BAAAF;gBAAA,AAAAG,4CAAAH,eAAA,vEAAcI;oBAAd,AAAAD,4CAAAH,eAAA,2DAAA,tIAAwBK;AAAxB,AAEE,IAAAE,oBAAA,AAAAN,gBAAMO;AAAN,AAAA,oBAAAD;AAAA,IAAAA,wBACKF;AADL,AAAA,oBAAAE;AAEK,OAACE,cAAI,iBAAAF,wBAAKH;AAAL,AAAA,oBAAAG;AACK,QAACH,0CAAAA,qDAAAA,bAAUL,iCAAAA;;AADhBQ;;;;AAFVA;;;AAAAA;;;AAKJ,oCAAA,pCAAMG,gFAAmBC;AAAzB,AACE,oIAAA,kDAAA,wDAAA,vOAACC,iSAES,2DACGC;AADH,AAEE,IAAMC,QAAM,wEAAA,xEAACC,gEAAaF;AAA1B,AACE,oBAAM,AAACf,qCAAegB;AAAtB,AACE,2GAAA,oDAAA,2DAAA,oDAAA,7QAACE,sDAAAA,mIAAAA,TAA+BF,+GAAAA;;AADlC;;AAEAD;GAPd,sDAQS,0DACGA;AADH,AAEE,IAAMC,QAAM,wEAAA,xEAACC,gEAAaF;IACpBI,UAAQ,wEAAA,xEAACF,gEAAaF;IACtBK,SAAO,sEAAA,gDAAA,tHAACC,8DAAWN;IACnBO,UAAQ,sHAAA,tHAACC,+CAAO,AAACF,8DAAWN;AAHlC,AAKE,oBAAM,iBAAAN,oBAAK,AAACT,qCAAegB;AAArB,AAAA,oBAAAP;AAA4B,OAACe,cAAIF;;AAAjCb;;;AAAN,AACE,IAAAgB,iBAAA;IAAAC,iBAAA;IAAAC,iBAA8C,AAACG,gBAAMd;IAArDY,iBAAA;IAAAC,iBAAiEP;AAAjE,AAAA,2GAAAG,eAAAC,eAAAC,eAAAC,eAAAC,kDAAAJ,eAAAC,eAAAC,eAAAC,eAAAC,pRAACX,sDAAAA,kIAAAA;;AADH;;AAGA,oBAAM,iBAAAT,oBAAK,AAACT,qCAAegB;AAArB,AAAA,oBAAAP;AAA4B,8DAAA,vDAACsB,gDAAKX;;AAAlCX;;;AAAN,AACE,IAAAuB,mBAA+B,AAACG,kBAAUhB,QAAQC;wBAAlD,AAAArB,4CAAAiC,iBAAA,IAAA,rFAAOC;uBAAP,AAAAlC,4CAAAiC,iBAAA,IAAA,pFAAmBE;IACbE,0BAAY,EAAI,GAAA,sBAAA,rBAAOH,kCAAa,GAAA,qBAAA,pBAAOC;AADjD,AAEE,GAAME;AAAN,AACE,IAAAC,iBAAA;IAAAC,iBAAA;IAAAC,iBAA4C,AAACT,gBAAMd;AAAnD,AAAA,2GAAAqB,eAAAC,eAAAC,kDAAAF,eAAAC,eAAAC,xNAACrB,sDAAAA,oGAAAA;;AACD,2GAAA,oDAAA,oEAAA,oDAAA,tRAACA,sDAAAA,4IAAAA,rBAA4Be,wHAAAA;;AAC7B,2GAAA,oDAAA,mEAAA,oDAAA,rRAACf,sDAAAA,2IAAAA,pBAA4BgB,uHAAAA;;AAC7B,2GAAA,gGAAA,1MAAChB,sDAAAA,oHAAAA;;AAJH;;AAHJ;;AAQAH","names":["p__40535","vec__40536","cljs.core.nth","kee-frame.debug/debug-enabled?","event-key","map__40539","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","blacklist","events?","kee-frame.state/debug-config","and__4210__auto__","kee-frame.state/debug?","cljs.core/not","kee-frame.debug/debug-interceptor","debug?","re_frame.interceptor.__GT_interceptor","context","event","re_frame.interceptor.get_coeffect","re-frame.core/console","orig-db","new-db","re_frame.interceptor.get_effect","effects","cljs.core.dissoc","cljs.core/seq","G__40547","G__40548","G__40549","G__40550","G__40551","cljs.core/first","cljs.core.not_EQ_","vec__40552","only-before","only-after","clojure.data/diff","db-changed?","G__40565","G__40566","G__40567"],"sourcesContent":["(ns ^:no-doc kee-frame.debug\n  (:require [re-frame.core :refer [console]]\n            [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n            [clojure.data :as data]\n            [kee-frame.state :as state]))\n\n(defn debug-enabled? [[event-key]]\n  (let [{:keys [blacklist events?]\n         :or   {events? true}} @state/debug-config]\n    (and @state/debug?\n         events?\n         (not (and blacklist\n                   (blacklist event-key))))))\n\n(defn debug-interceptor [debug?]\n  (->interceptor\n    :id :debug\n    :before (fn debug-before\n              [context]\n              (let [event (get-coeffect context :event)]\n                (when (debug-enabled? event)\n                  (console :log \"Handling event \" event))\n                context))\n    :after (fn debug-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db (get-effect context :db ::not-found)\n                   effects (dissoc (get-effect context) :db)]\n\n               (when (and (debug-enabled? event) (seq effects))\n                 (console :log \"Side effects caused by event \" (first event) \": \" effects))\n\n               (when (and (debug-enabled? event) (not= new-db ::not-found))\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed? (or (some? only-before) (some? only-after))]\n                   (when db-changed?\n                     (console :group \"db clojure.data/diff for:\" (first event))\n                     (console :log \"only before:\" only-before)\n                     (console :log \"only after :\" only-after)\n                     (console :groupEnd))))\n               context))))"]}