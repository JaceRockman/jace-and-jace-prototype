{"version":3,"sources":["chord/client.cljs"],"mappings":"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","names":["chord.client/close-event->maybe-error","ev","chord.client/create-ws","url","opts","js/require","e37878","e","ws","cljs.core/clj->js","js/WebSocket","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","chord.client/ws-ch","p__37891","vec__37892","map__37895","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq37883","G__37884","cljs.core/first","cljs.core/next","self__4776__auto__","ws-url","read-ch","write-ch","format","ws-opts","map__37907","web-socket","or__4185__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","chord.format/wrap-format","open-ch","close-ch","chord.channels/read-from-ws!","chord.channels/write-to-ws!","p1__37881#","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","p1__37882#","ws-chan","chord.channels.bidi_ch.cljs$core$IFn$_invoke$arity$variadic","initial-ch","c__28418__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__28419__auto__","switch__28057__auto__","state_37985","state_val_37986","inst_37981","statearr-37991","statearr-37997","inst_37909","statearr-38001","statearr-38002","inst_37926","inst_37924","inst_37925","inst_37927","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","statearr-38006","statearr-38008","statearr-38009","inst_37962","statearr-38011","inst_37977","statearr-38023","statearr-38028","inst_37946","statearr-38035","statearr-38038","statearr-38040","inst_37983","cljs.core.async.impl.ioc-helpers/return-chan","statearr-38044","statearr-38046","inst_37920","cljs.core/PersistentVector","inst_37921","inst_37922","cljs.core.async/ioc-alts!","statearr-38052","inst_37979","statearr-38055","inst_37952","inst_37951","statearr-38057","statearr-38060","statearr-38061","inst_37933","inst_37934","inst_37935","inst_37940","cljs.core/PersistentHashMap","statearr-38066","cljs.core.async.impl.ioc-helpers/put!","inst_37965","inst_37966","inst_37967","statearr-38067","statearr-38068","statearr-38072","inst_37969","statearr-38073","statearr-38074","inst_37957","inst_37958","inst_37959","inst_37960","inst_37942","inst_37943","statearr-38079","statearr-38080","statearr-38082","state-machine__28058__auto__","ret-value__28059__auto__","result__28060__auto__","cljs.core/keyword-identical?","e38086","js/Object","ex__28061__auto__","statearr-38087","cljs.core.async.impl.ioc-helpers/process-exception","state__28420__auto__","statearr-38094","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/close!"],"sourcesContent":["(ns chord.client\n  (:require [cljs.core.async :as a :refer [chan <! >! put! close!]]\n            [chord.channels :refer [read-from-ws! write-to-ws! bidi-ch]]\n            [chord.format :refer [wrap-format]])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop alt!]]))\n\n(defn close-event->maybe-error [ev]\n  (when-not (.-wasClean ev)\n    {:reason (.-reason ev)\n     :code (.-code ev)}))\n\n(defn- create-ws [url opts]\n  (cond\n    ;; Detect if the \"ws\" node library is available\n    ;; Note that just checking that cljs.core/*target* == nodejs works for nodejs\n    ;; but not for node-webkit (at least)\n    ;; This should work in all cases\n    (and (exists? js/require)\n         (try (js/require \"ws\")\n              (catch :default e\n                false)))\n    (let [ws (js/require \"ws\")]\n      (if opts\n        (new ws url (clj->js opts))\n        (new ws url)))\n\n    :else (js/WebSocket. url)))\n\n(defn ws-ch\n  \"Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n      :ws-opts       - (optional) Other options to be passed to the websocket constructor (NodeJS only)\n                                  see https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \\\"ws://127.0.0.1:6437\\\"))\n\n    (a/<! (ws-ch \\\"ws://127.0.0.1:6437\\\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \\\"ws://127.0.0.1:6437\\\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))\"\n\n  [ws-url & [{:keys [read-ch write-ch format ws-opts] :as opts}]]\n\n  (let [web-socket (create-ws ws-url ws-opts)\n        {:keys [read-ch write-ch]} (-> {:read-ch (or read-ch (chan))\n                                        :write-ch (or write-ch (chan))}\n                                       (wrap-format opts))\n        open-ch (a/chan)\n        close-ch (a/chan)]\n\n    (set! (.-binaryType web-socket) \"arraybuffer\")\n    (read-from-ws! web-socket read-ch)\n    (write-to-ws! web-socket write-ch)\n\n    (set! (.-onopen web-socket)\n          #(put! open-ch %))\n    (set! (.-onclose web-socket)\n          #(put! close-ch %))\n\n    (let [ws-chan (bidi-ch read-ch write-ch {:on-close #(.close web-socket)})\n          initial-ch (a/chan)]\n\n      (go-loop [opened? false]\n        (alt!\n          open-ch ([_]\n                     (a/>! initial-ch {:ws-channel ws-chan})\n                     (a/close! initial-ch)\n                     (recur true))\n\n          close-ch ([ev]\n                      (let [maybe-error (close-event->maybe-error ev)]\n                        (when maybe-error\n                          (a/>! (if opened?\n                                  read-ch\n                                  initial-ch)\n                                {:error maybe-error}))\n\n                        (a/close! ws-chan)\n                        (a/close! initial-ch)))))\n\n      initial-ch)))\n"]}