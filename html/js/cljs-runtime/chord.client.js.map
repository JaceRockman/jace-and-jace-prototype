{"version":3,"sources":["chord/client.cljs"],"mappings":"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","names":["chord.client/close-event->maybe-error","ev","chord.client/create-ws","url","opts","and__4210__auto__","js/require","e38466","e","ws","cljs.core/clj->js","js/WebSocket","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","chord.client/ws-ch","p__38472","vec__38473","map__38476","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","seq38469","G__38470","cljs.core/first","cljs.core/next","self__4805__auto__","ws-url","read-ch","write-ch","format","ws-opts","map__38477","web-socket","or__4212__auto__","cljs.core.async.chan","chord.format/wrap-format","open-ch","close-ch","chord.channels/read-from-ws!","chord.channels/write-to-ws!","p1__38467#","cljs.core.async.put_BANG_","p1__38468#","ws-chan","chord.channels.bidi_ch","initial-ch","c__28997__auto__","cljs.core.async.impl.dispatch/run","f__28998__auto__","switch__28628__auto__","state_38551","state_val_38552","inst_38541","statearr-38557","statearr-38558","inst_38478","statearr-38563","statearr-38564","inst_38487","inst_38493","inst_38495","inst_38494","inst_38496","cljs.core._EQ_","statearr-38568","statearr-38569","statearr-38570","inst_38526","statearr-38571","inst_38537","statearr-38572","statearr-38577","inst_38488","inst_38510","statearr-38578","statearr-38579","statearr-38583","inst_38543","cljs.core.async.impl.ioc-helpers/return-chan","statearr-38588","statearr-38589","inst_38489","cljs.core/PersistentVector","inst_38490","inst_38491","statearr-38594","cljs.core.async/ioc-alts!","statearr-38595","inst_38539","statearr-38596","inst_38516","inst_38515","statearr-38603","statearr-38604","statearr-38605","inst_38501","inst_38502","inst_38503","inst_38504","cljs.core/PersistentHashMap","statearr-38610","cljs.core.async.impl.ioc-helpers/put!","inst_38529","inst_38530","inst_38531","statearr-38615","statearr-38616","statearr-38617","inst_38533","statearr-38618","statearr-38619","inst_38521","inst_38522","inst_38523","inst_38524","inst_38506","inst_38507","statearr-38620","statearr-38621","statearr-38623","state-machine__28629__auto__","ret-value__28630__auto__","result__28631__auto__","cljs.core/keyword-identical?","ex__28632__auto__","e38631","statearr-38632","cljs.core/seq","statearr-38633","state__28999__auto__","statearr-38638","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/close!"],"sourcesContent":["(ns chord.client\n  (:require [cljs.core.async :as a :refer [chan <! >! put! close!]]\n            [chord.channels :refer [read-from-ws! write-to-ws! bidi-ch]]\n            [chord.format :refer [wrap-format]])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop alt!]]))\n\n(defn close-event->maybe-error [ev]\n  (when-not (.-wasClean ev)\n    {:reason (.-reason ev)\n     :code (.-code ev)}))\n\n(defn- create-ws [url opts]\n  (cond\n    ;; Detect if the \"ws\" node library is available\n    ;; Note that just checking that cljs.core/*target* == nodejs works for nodejs\n    ;; but not for node-webkit (at least)\n    ;; This should work in all cases\n    (and (exists? js/require)\n         (try (js/require \"ws\")\n              (catch :default e\n                false)))\n    (let [ws (js/require \"ws\")]\n      (if opts\n        (new ws url (clj->js opts))\n        (new ws url)))\n\n    :else (js/WebSocket. url)))\n\n(defn ws-ch\n  \"Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n      :ws-opts       - (optional) Other options to be passed to the websocket constructor (NodeJS only)\n                                  see https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \\\"ws://127.0.0.1:6437\\\"))\n\n    (a/<! (ws-ch \\\"ws://127.0.0.1:6437\\\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \\\"ws://127.0.0.1:6437\\\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))\"\n\n  [ws-url & [{:keys [read-ch write-ch format ws-opts] :as opts}]]\n\n  (let [web-socket (create-ws ws-url ws-opts)\n        {:keys [read-ch write-ch]} (-> {:read-ch (or read-ch (chan))\n                                        :write-ch (or write-ch (chan))}\n                                       (wrap-format opts))\n        open-ch (a/chan)\n        close-ch (a/chan)]\n\n    (set! (.-binaryType web-socket) \"arraybuffer\")\n    (read-from-ws! web-socket read-ch)\n    (write-to-ws! web-socket write-ch)\n\n    (set! (.-onopen web-socket)\n          #(put! open-ch %))\n    (set! (.-onclose web-socket)\n          #(put! close-ch %))\n\n    (let [ws-chan (bidi-ch read-ch write-ch {:on-close #(.close web-socket)})\n          initial-ch (a/chan)]\n\n      (go-loop [opened? false]\n        (alt!\n          open-ch ([_]\n                     (a/>! initial-ch {:ws-channel ws-chan})\n                     (a/close! initial-ch)\n                     (recur true))\n\n          close-ch ([ev]\n                      (let [maybe-error (close-event->maybe-error ev)]\n                        (when maybe-error\n                          (a/>! (if opened?\n                                  read-ch\n                                  initial-ch)\n                                {:error maybe-error}))\n\n                        (a/close! ws-chan)\n                        (a/close! initial-ch)))))\n\n      initial-ch)))\n"]}