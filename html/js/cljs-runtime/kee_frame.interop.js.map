{"version":3,"sources":["kee_frame/interop.cljs"],"mappings":"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","names":["this__4461__auto__","k__4462__auto__","this__4463__auto__","k38683","else__4464__auto__","G__38687","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__38689","vec__38690","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__38682","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","cljs.core/PROTOCOL_SENTINEL","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this38684","other38685","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","this__4469__auto__","k__4470__auto__","pred__38715","cljs.core/keyword-identical?","expr__38716","cljs.core.assoc","this__4474__auto__","cljs.core/seq","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","kee-frame.interop/AccountantNavigator","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__38686","extmap__4501__auto__","G__38730","cljs.core/record?","kee-frame.interop/->AccountantNavigator","kee-frame.interop/map->AccountantNavigator","_","accountant.core/dispatch-current!","url","accountant.core.navigate_BANG_","kee-frame.interop/create-socket","chord.client/ws-ch","kee-frame.interop/websocket-url","path","clojure.string/starts-with?","js/document","kee-frame.interop/make-navigator","opts","accountant.core/configure-navigation!","kee-frame.interop/render-root","root-component","temp__5751__auto__","app-element","reagent.core.render","cljs.core.ex_info","kee-frame.interop/breakpoints-or-defaults","breakpoints","or__4212__auto__","kee-frame.interop/set-breakpoint-subs","breaking-point.core/register-subs","kee-frame.interop/set-breakpoints","G__38749","re-frame.core/dispatch-sync","p__38752","map__38754","cljs.core/--destructure-map","kee-frame.interop/set-log-level!","overwrites?","re-frame.loggers/set-loggers!","args","cljs.core/re-find","cljs.core/first","cljs.core.apply","js/console.warn"],"sourcesContent":["(ns ^:no-doc kee-frame.interop\n  (:require [kee-frame.api :as api]\n            [accountant.core :as accountant]\n            [reagent.core :as reagent]\n            [re-frame.core :as rf]\n            [day8.re-frame.http-fx]\n            [chord.client :as chord]\n            [breaking-point.core :as bp]\n            [clojure.string :as str]\n            [re-frame.loggers :as rf.log]))\n\n(defrecord AccountantNavigator []\n  api/Navigator\n  (dispatch-current! [_]\n    (accountant/dispatch-current!))\n  (navigate! [_ url]\n    (accountant/navigate! url)))\n\n(def create-socket chord/ws-ch)\n\n(defn websocket-url [path]\n  (if (str/starts-with? path \"/\")\n    (str (if (= \"https:\" (-> js/document .-location .-protocol))\n           \"wss://\"\n           \"ws://\")\n         (-> js/document .-location .-host)\n         path)\n    ;; Consider this an url for now.\n    path))\n\n(defn make-navigator\n  [opts]\n  (accountant/configure-navigation! opts)\n  (->AccountantNavigator))\n\n(defn render-root [root-component]\n  (when root-component\n    (if-let [app-element (.getElementById js/document \"app\")]\n      (reagent/render root-component\n                      app-element)\n      (throw (ex-info \"Could not find element with id 'app' to mount app into\" {:component root-component})))))\n\n(defn breakpoints-or-defaults [breakpoints]\n  (or breakpoints\n      {:debounce-ms 166\n       :breakpoints [:mobile\n                     768\n                     :tablet\n                     992\n                     :small-monitor\n                     1200\n                     :large-monitor]}))\n\n(defn set-breakpoint-subs [breakpoints]\n  (bp/register-subs (:breakpoints (breakpoints-or-defaults breakpoints))))\n\n(defn set-breakpoints [breakpoints]\n  (rf/dispatch-sync [::bp/set-breakpoints (breakpoints-or-defaults breakpoints)]))\n\n(defn set-log-level! [{:keys [overwrites?]\n                       :or   {overwrites? false}}]\n  (when-not overwrites?\n    (rf.log/set-loggers!\n     {:warn (fn [& args]\n              (when-not (re-find #\"^re-frame: overwriting\" (first args))\n                (apply js/console.warn args)))})))"]}