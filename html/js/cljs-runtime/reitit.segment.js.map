{"version":3,"sources":["reitit/segment.cljc"],"mappings":"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","names":["this__4461__auto__","k__4462__auto__","this__4463__auto__","k40726","else__4464__auto__","G__40730","cljs.core/Keyword","data","path-params","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__40736","vec__40737","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__40725","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this40727","other40728","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__40754","this__4469__auto__","k__4470__auto__","pred__40755","cljs.core/keyword-identical?","expr__40756","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","reitit.segment/Match","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__40729","extmap__4501__auto__","G__40758","cljs.core/record?","reitit.segment/->Match","reitit.segment/map->Match","reitit$segment$Segment$_insert$dyn","x__4509__auto__","m__4510__auto__","reitit.segment/-insert","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","reitit$segment$Segment$_lookup$dyn","reitit.segment/-lookup","reitit.segment/Segment","this","ps","goog.object/set","_","reitit.segment/-catch-all","children","catch-all","p","reitit.impl/fast-get","clojure.string.join","cljs.core/cons","var_args","G__40767","reitit.segment/segment","js/Error","reitit.segment.segment","wilds","match","children'","reitit.impl/fast-map","wilds?","js/reitit","js/reitit.segment","js/reitit.segment.t_reitit$segment40770","reitit.segment/t_reitit$segment40770","_40772","meta40771","cljs.core/PROTOCOL_SENTINEL","p__40773","vec__40774","seq__40775","first__40776","cljs.core/first","cljs.core/next","p__40784","vec__40785","seq__40786","first__40787","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","reitit.segment/->t_reitit$segment40770","d","cljs.core/not","vec__40777","w","c","cljs.core.juxt","reitit.impl/wild-param","reitit.impl/catch-all-param","cljs.core.conj","or__4212__auto__","p1__40764#","cljs.core.update","and__4210__auto__","clojure.string/blank?","p1__40765#","cljs.core/some","reitit.segment/insert","trie","path","reitit.impl/segments","reitit.segment/compile","reitit.segment/scanner","compiled-tries","js/reitit.segment.t_reitit$segment40793","reitit.segment/t_reitit$segment40793","_40795","meta40794","reitit.segment/->t_reitit$segment40793","params","reitit.segment/lookup","temp__5751__auto__","reitit.impl/url-decode-coll"],"sourcesContent":["(ns reitit.segment\n  (:refer-clojure :exclude [-lookup compile])\n  (:require [reitit.impl :as impl]\n            [clojure.string :as str])\n  #?(:clj (:import (reitit SegmentTrie SegmentTrie$Match))))\n\n(defrecord Match [data path-params])\n\n(defprotocol Segment\n  (-insert [this ps data])\n  (-lookup [this ps path-params]))\n\n(extend-protocol Segment\n  nil\n  (-insert [_ _ _])\n  (-lookup [_ _ _]))\n\n(defn- -catch-all [children catch-all path-params p ps]\n  (-lookup\n    (impl/fast-get children catch-all)\n    nil\n    (assoc path-params catch-all (str/join \"/\" (cons p ps)))))\n\n(defn- segment\n  ([] (segment {} #{} nil nil))\n  ([children wilds catch-all match]\n   (let [children' (impl/fast-map children)\n         wilds? (seq wilds)]\n     ^{:type ::segment}\n     (reify\n       Segment\n       (-insert [_ [p & ps] d]\n         (if-not p\n           (segment children wilds catch-all d)\n           (let [[w c] ((juxt impl/wild-param impl/catch-all-param) p)\n                 wilds (if w (conj wilds w) wilds)\n                 catch-all (or c catch-all)\n                 children (update children (or w c p) #(-insert (or % (segment)) ps d))]\n             (segment children wilds catch-all match))))\n       (-lookup [_ [p & ps] path-params]\n         (if (nil? p)\n           (when match (assoc match :path-params path-params))\n           (or (-lookup (impl/fast-get children' p) ps path-params)\n               (if (and wilds? (not (str/blank? p))) (some #(-lookup (impl/fast-get children' %) ps (assoc path-params % p)) wilds))\n               (if catch-all (-catch-all children' catch-all path-params p ps)))))))))\n\n;;\n;; public api\n;;\n\n(defn insert\n  \"Returns a Segment Trie with path with data inserted into it. Creates the trie if `nil`.\"\n  [trie path data]\n  #?(:cljs (-insert (or trie (segment)) (impl/segments path) (map->Match {:data data}))\n     :clj  (.add (or ^SegmentTrie trie ^SegmentTrie (SegmentTrie.)) ^String path data)))\n\n(defn compile [trie]\n  \"Compiles the Trie so that [[lookup]] can be used.\"\n  #?(:cljs trie\n     :clj  (.matcher (or ^SegmentTrie trie (SegmentTrie.)))))\n\n(defn scanner [compiled-tries]\n  \"Returns a new compiled trie that does linear scan on the given compiled tries on [[lookup]].\"\n  #?(:cljs (reify\n             Segment\n             (-lookup [_ ps params]\n               (some (fn [trie] (-lookup trie ps params)) compiled-tries)))\n     :clj  (SegmentTrie/scanner compiled-tries)))\n\n(defn lookup [trie path]\n  \"Looks the path from a Segment Trie. Returns a [[Match]] or `nil`.\"\n  #?(:cljs (if-let [match (-lookup trie (impl/segments path) {})]\n             (assoc match :path-params (impl/url-decode-coll (:path-params match))))\n     :clj  (if-let [match ^SegmentTrie$Match (SegmentTrie/lookup trie path)]\n             (->Match (.data match) (clojure.lang.PersistentHashMap/create (.params match))))))\n"]}