{"version":3,"sources":["breaking_point/core.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__38130","vec__38131","cljs.core.nth","map__38134","cljs.core/--destructure-map","cljs.core.get","_","breakpoints","debounce-ms","opts","G__38135","G__38136","re-frame.core/reg-cofx","coeffect","screen-width","or__4212__auto__","G__38137","js/window","G__38143","js/document","G__38144","screen-height","G__38145","G__38146","G__38148","cljs.core.assoc","p__38149","map__38150","breaking-point.core/set-screen-dimensions","db","cljs.core/assoc-in","re-frame.core/inject-cofx","p__38157","vec__38158","breaking-point.core/get-screen-width","cljs.core.get_in","breaking-point.core/get-screen-height","breaking-point.core/->get-screen","cljs.core.reduce","p__38169","vec__38170","prev-breakpoint","screen-key","breakpoint","cljs.core/reduced","cljs.core.partition_all","p__38181","vec__38182","breaking-point.core/get-orientation","breaking-point.core/register-subs","re-frame.core/reg-sub","G__38188","G__38189","G__38190","G__38191","G__38192","G__38193","G__38194","G__38195","G__38196","G__38197","G__38201","G__38202","G__38203","G__38204","orientation","cljs.core._EQ_","G__38207","G__38208","G__38209","G__38210","screen-keys","G__38211","cljs.core.map_indexed","cljs.core/vector","cljs.core.filter","p__38212","vec__38213","i","k","cljs.core/even?","cljs.core.mapv","cljs.core/second","seq__38218","cljs.core/seq","chunk__38219","count__38220","i__38221","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","G__38236","G__38237","G__38238","G__38239","G__38249","G__38250","G__38251","G__38252","cljs.core.keyword","cljs.core/name","screen","p__38260","map__38261","breaking-point.core/set-breakpoints","G__38262","re-frame.core/dispatch","G__38266","G__38267","re-frame.core/reg-fx"],"sourcesContent":["(ns breaking-point.core\n  (:require\n   [re-frame.core :as rf]\n   [re-frame-fx.dispatch]\n   ))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; PUBLIC API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(rf/reg-event-fx\n ::set-breakpoints\n (fn [_ [_ {:keys [breakpoints ;; required\n                   debounce-ms ;; optional\n                   ]\n            :as   opts}]]\n   {::set-breakpoints opts}))\n\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; COFX\n\n(rf/reg-cofx\n ::screen-dimensions\n (fn [coeffect]\n   (let [screen-width  (or (some-> js/window\n                                   .-innerWidth)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientWidth)\n                           (some-> js/document\n                                   .-body\n                                   .-clientWidth))\n         screen-height (or (some-> js/window\n                                   .-innerHeight)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientHeight)\n                           (some-> js/document\n                                   .-body\n                                   .-clientHeight))]\n     (assoc coeffect\n            :screen-width screen-width\n            :screen-height screen-height))))\n\n\n;; Events\n\n(defn set-screen-dimensions\n  [{:keys [db\n           screen-width\n           screen-height]} _]\n  {:db (-> db\n           (assoc-in [::breakpoints :screen-width] screen-width)\n           (assoc-in [::breakpoints :screen-height] screen-height))})\n\n(rf/reg-event-fx ::set-screen-dimensions\n                 [(rf/inject-cofx ::screen-dimensions)]\n                 set-screen-dimensions)\n\n(rf/reg-event-fx ::set-screen-dimensions-debounced\n                 (fn [_ [_ debounce-ms]]\n                   {:dispatch-debounce [{:id      ::calcaulate-width-after-resize\n                                         :timeout debounce-ms\n                                         :action  :dispatch\n                                         :event   [::set-screen-dimensions]}]}))\n\n\n;; Subs\n\n(defn get-screen-width [db _]\n  (get-in db [::breakpoints :screen-width]))\n\n(defn get-screen-height [db _]\n  (get-in db [::breakpoints :screen-height]))\n\n\n(defn ->get-screen [breakpoints]\n  (fn get-screen\n    [screen-width _]\n    (when screen-width\n      (reduce\n       (fn [prev-breakpoint [screen-key breakpoint]]\n         (if (or (nil? breakpoint)\n                 (and (< screen-width breakpoint)\n                      (>= screen-width prev-breakpoint)))\n           (reduced screen-key)\n           breakpoint))\n       0\n       (partition-all 2 breakpoints)))))\n\n\n(defn get-orientation\n  [[screen-width\n    screen-height] _]\n  (if (> screen-height\n         screen-width)\n    :portrait\n    :landscape))\n\n\n(defn register-subs [breakpoints]\n  (rf/reg-sub ::screen-width get-screen-width)\n  (rf/reg-sub ::screen-height get-screen-height)\n\n  (rf/reg-sub ::screen\n              :<- [::screen-width]\n              (->get-screen breakpoints))\n\n  (rf/reg-sub ::orientation\n              :<- [::screen-width]\n              :<- [::screen-height]\n              get-orientation)\n\n  (rf/reg-sub ::portrait?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :portrait)))\n\n  (rf/reg-sub ::landscape?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :landscape)))\n\n  (let [screen-keys (some->> breakpoints\n                             (map-indexed vector)\n                             (filter (fn [[i k]]\n                                       (even? i)))\n                             (mapv second))]\n    (doseq [screen-key screen-keys]\n      (rf/reg-sub (keyword \"breaking-point.core\"\n                           (str (name screen-key) \"?\"))\n                  :<- [::screen]\n                  (fn [screen _]\n                    (= screen\n                       screen-key))))))\n\n\n;; FX\n\n(defn set-breakpoints [{:keys [breakpoints\n                               debounce-ms]\n                        :as   opts}]\n  (register-subs breakpoints)\n  (rf/dispatch [::set-screen-dimensions])\n  (.addEventListener js/window \"resize\"\n                     #(if debounce-ms\n                        (rf/dispatch [::set-screen-dimensions-debounced debounce-ms])\n                        (rf/dispatch [::set-screen-dimensions]))\n                     true))\n\n(rf/reg-fx\n ::set-breakpoints\n set-breakpoints)\n"]}