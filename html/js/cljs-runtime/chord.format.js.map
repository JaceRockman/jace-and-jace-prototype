{"version":3,"sources":["chord/format.cljc"],"mappings":"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","names":["chord$format$ChordFormatter$freeze$dyn","x__4509__auto__","m__4510__auto__","chord.format/freeze","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","chord$format$ChordFormatter$thaw$dyn","chord.format/thaw","chord.format/ChordFormatter","_","obj","s","js/chord","js/chord.format","js/chord.format.formatter*","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__38381","cljs.core/MultiFn","cljs.core.symbol","chord.format/formatter*","js/chord.format.t_chord$format38382","chord.format/t_chord$format38382","_38384","meta38383","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","chord.format/->t_chord$format38382","cljs.core.pr_str","cljs.reader.read_string","js/chord.format.t_chord$format38400","chord.format/t_chord$format38400","_38402","meta38401","chord.format/->t_chord$format38400","js/JSON.stringify","cljs.core/clj->js","this","cljs.core.js__GT_clj","js/JSON.parse","opts","json-formatter","cljs.core.assoc","js/chord.format.t_chord$format38407","chord.format/t_chord$format38407","_38409","meta38408","chord.format/->t_chord$format38407","clojure.walk/keywordize-keys","js/chord.format.t_chord$format38416","chord.format/t_chord$format38416","_38418","meta38417","chord.format/->t_chord$format38416","cognitect.transit/write","cognitect.transit.writer","cognitect.transit/read","cognitect.transit.reader","js/chord.format.t_chord$format38419","chord.format/t_chord$format38419","_38421","meta38420","chord.format/->t_chord$format38419","chord.format/formatter","cljs.core/Keyword","p__38431","p__38432","map__38433","cljs.core/--destructure-map","map__38434","chord.format/wrap-format","read-ch","write-ch","format","fmtr","cljs.core.async/map<","p__38440","map__38441","message","e38442","js/Error","e","p1__38429#","cljs.core.async/map>"],"sourcesContent":["(ns chord.format\n  (:require #?(:clj [cheshire.core :as json])\n\n            #?(:clj [clojure.core.async :as a]\n               :cljs [cljs.core.async :as a])\n\n            #?(:clj [clojure.java.io :as io])\n\n            #?(:clj [clojure.tools.reader.edn :as edn]\n               :cljs [cljs.reader :as edn])\n\n            [clojure.walk :refer [keywordize-keys]]\n            [cognitect.transit :as transit])\n\n  #?(:clj (:import [java.io ByteArrayOutputStream ByteArrayInputStream])))\n\n(defprotocol ChordFormatter\n  (freeze [_ obj])\n  (thaw [_ s]))\n\n(defmulti formatter* :format)\n\n(defmethod formatter* :edn [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      (pr-str obj))\n\n    (thaw [_ s]\n      (edn/read-string s))))\n\n(defmethod formatter* :json [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      #?(:clj (json/encode obj))\n      #?(:cljs (js/JSON.stringify (clj->js obj))))\n\n    (thaw [this s]\n      #?(:clj (json/decode s))\n      #?(:cljs (js->clj (js/JSON.parse s))))))\n\n(defmethod formatter* :json-kw [opts]\n  (let [json-formatter (formatter* (assoc opts :format :json))]\n    (reify ChordFormatter\n      (freeze [_ obj]\n        (freeze json-formatter obj))\n\n      (thaw [_ s]\n        (keywordize-keys (thaw json-formatter s))))))\n\n(defmethod formatter* :transit-json [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      #?(:clj\n       (let [baos (ByteArrayOutputStream.)]\n         (transit/write (transit/writer baos :json) obj)\n         (.toString baos)))\n\n      #?(:cljs\n       (transit/write (transit/writer :json) obj)))\n\n    (thaw [_ s]\n      #?(:clj\n       (let [bais (ByteArrayInputStream. (.getBytes s))]\n         (transit/read (transit/reader bais :json))))\n\n      #?(:cljs\n       (transit/read (transit/reader :json) s)))))\n\n(defmethod formatter* :str [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      obj)\n\n    (thaw [_ s]\n      s)))\n\n(defn formatter [opts]\n  (formatter* (if (keyword? opts)\n                {:format opts}\n                opts)))\n\n(defn wrap-format [{:keys [read-ch write-ch]} {:keys [format] :as opts}]\n  (let [fmtr (formatter (if format\n                          opts\n                          {:format :edn}))]\n\n    ;; TODO need to replace a/map< etc with transducers when 1.7.0 is\n    ;; released\n\n    {:read-ch (a/map< (fn [{:keys [message]}]\n                        (try\n                          (when message\n                            {:message (thaw fmtr message)})\n                          (catch #?(:clj Exception, :cljs js/Error) e\n                                 {:error :invalid-format\n                                  :cause e\n                                  :invalid-msg message})))\n                      read-ch)\n\n     :write-ch (a/map> #(when %\n                          (freeze fmtr %))\n                       write-ch)}))\n"]}