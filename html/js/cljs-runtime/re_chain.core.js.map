{"version":3,"sources":["re_chain/core.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/vector?","cljs.core/fn?","cljs.spec.alpha/rep-impl","cljs.core/keyword?","cljs.spec.alpha/map-spec-impl","G__40913","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl","G__40918","cljs.core/coll?","re-chain.core/links","cljs.core.atom","re-chain.core/step-id","event-id","counter","cljs.core._EQ_","cljs.core.keyword","cljs.core/namespace","cljs.core/name","re-chain.core/replace-pointers","next-event","effects","clojure.walk/postwalk","x","re-frame.core/console","fexpr__40920","re-chain.core/single-valid-link","links","cljs.core/deref","cljs.core.filter","p__40921","map__40922","cljs.core/--destructure-map","cljs.core.get","get-dispatch","effect-present?","and__4210__auto__","cljs.core/not","cljs.core/count","cljs.core/first","re-chain.core/dispatch-empty-or-next","next-event-id","event","cljs.core.assoc","re-chain.core/single-valid-next","xs","p__40929","map__40930","re-chain.core/select-link","or__4212__auto__","cljs.core.ex_info","p__40937","vec__40938","seq__40939","cljs.core/seq","first__40940","cljs.core/next","re-chain.core/make-event","previous-event-params","_","params","cljs.core.into","cljs.core.concat","re-chain.core/link-effects","event-params","temp__5751__auto__","map__40944","set-dispatch","G__40945","G__40946","re-chain.core/effect-postprocessor","ctx","cljs.core/rest","re-frame.core/get-coeffect","p1__40947#","cljs.core.update","re-chain.core/chain-interceptor","current-event-id","G__40948","G__40949","G__40950","G__40951","re-frame.core/->interceptor","re-chain.core/collect-named-event-instructions","step-fns","chain-handlers","cljs.spec.alpha/conform","expound.alpha.expound","cljs.spec.alpha/explain-data","cljs.core.partition","cljs.core.map","p__40952","vec__40953","map__40956","cljs.core.nth","id","event-handler","handler-1","handler-2","next-id","re-chain.core/collect-event-instructions","key","cljs.core.map_indexed","p__40961","vec__40962","current-handler","next-handler","map__40965","fn","interceptors","re-chain.core/register-chain-handlers!","instructions","user-interceptors","seq__40966","chunk__40967","count__40968","i__40969","map__40974","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__40976","interceptor","re_frame.core.reg_event_fx","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","re-chain.core/reg-chain-named*","seq40978","G__40979","self__4805__auto__","re-chain.core/reg-chain*","seq40984","G__40985","G__40986","re-chain.core/configure!","chain-links","cljs.core/reset!","re-chain.core/reg-chain-named","seq41003","self__4806__auto__","handlers","cljs.core.apply","re-chain.core/reg-chain","seq41007","G__41008"],"sourcesContent":["(ns re-chain.core\n  (:require [clojure.walk :as walk]\n            [re-frame.core :as rf]\n            #?(:cljs [cljs.spec.alpha :as s]\n               :clj  [clojure.spec.alpha :as s])\n            [expound.alpha :as e]))\n\n(s/def ::handler (s/cat :interceptors (s/? vector?) :fn fn?))\n(s/def ::handlers (s/* ::handler))\n(s/def ::named-handlers (s/* (s/cat :id keyword? :event-handler ::handler)))\n(s/def ::effect-present? fn?)\n(s/def ::get-dispatch fn?)\n(s/def ::set-dispatch fn?)\n(s/def ::link (s/keys :req-un [::effect-present? ::get-dispatch ::set-dispatch]))\n(s/def ::links (s/nilable (s/coll-of ::link)))\n\n(def links (atom []))\n\n(defn step-id [event-id counter]\n  (if (= 0 counter)\n    event-id\n    (keyword\n      (str (namespace event-id)\n           (if (namespace event-id) \"/\")\n           (name event-id)\n           \"-\" counter))))\n\n(defn replace-pointers [next-event effects]\n  (walk/postwalk\n    (fn [x]\n      (when (= x :kee-frame.core/next)\n        (rf/console :warn \"Keyword :kee-frame.core/next is deprecated, use :chain/next instead.\"))\n      (if (#{:kee-frame.core/next :chain/next} x)\n        next-event\n        x))\n    effects))\n\n(defn single-valid-link [effects]\n  (let [links (->> @links\n                   (filter (fn [{:keys [get-dispatch effect-present?]}]\n                             (and (effect-present? effects)\n                                  (not (get-dispatch effects))))))]\n    (when (= 1 (count links))\n      (first links))))\n\n(defn dispatch-empty-or-next [effects next-event-id]\n  (when (or (not (:dispatch effects))\n            (-> effects\n                :dispatch\n                first\n                (= next-event-id)))\n    {:get-dispatch :dispatch\n     :set-dispatch (fn [effects event] (assoc effects :dispatch event))}))\n\n(defn single-valid-next [next-event-id effects]\n  (let [xs (->> @links\n                (filter (fn [{:keys [get-dispatch]}]\n                          (= next-event-id\n                             (-> effects get-dispatch first)))))]\n    (when (= 1 (count xs))\n      (first xs))))\n\n(defn select-link [next-event-id effects]\n  (or\n    (single-valid-next next-event-id effects)\n    (single-valid-link effects)\n    (dispatch-empty-or-next effects next-event-id)\n    (throw\n      (ex-info \"Not possible to select next in chain\"\n               {:next-id  next-event-id\n                :dispatch (:dispatch effects)\n                :links    @links}))))\n\n(defn make-event [next-event-id previous-event-params [_ & params]]\n  (into [next-event-id] (concat previous-event-params params)))\n\n(defn link-effects [next-event-id event-params effects]\n  (if next-event-id\n    (if-let [{:keys [set-dispatch get-dispatch]} (select-link next-event-id effects)]\n      (set-dispatch effects (make-event next-event-id event-params (get-dispatch effects)))\n      effects)\n    effects))\n\n(defn effect-postprocessor [next-event-id]\n  (fn [ctx]\n    (let [event-params (rest (rf/get-coeffect ctx :event))]\n      (update ctx :effects #(->> %\n                                 (replace-pointers next-event-id)\n                                 (link-effects next-event-id event-params))))))\n\n(defn chain-interceptor [current-event-id next-event-id]\n  (rf/->interceptor\n    :id current-event-id\n    :after (effect-postprocessor next-event-id)))\n\n(defn collect-named-event-instructions [step-fns]\n  (let [chain-handlers (s/conform ::named-handlers step-fns)]\n    (when (= ::s/invalid chain-handlers)\n      (e/expound ::named-handlers step-fns)\n      (throw (ex-info \"Invalid named chain. Should be pairs of keyword and handler\" (s/explain-data ::named-handlers step-fns))))\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map (fn [[{:keys [id event-handler] :as handler-1} handler-2]]\n                (let [next-id (:id handler-2)]\n                  (assoc handler-1 :next-id (:id handler-2)\n                                   :interceptors (:interceptors event-handler)\n                                   :event-handler (:fn event-handler)\n                                   :interceptor (chain-interceptor id next-id))))))))\n\n(defn collect-event-instructions [key step-fns]\n  (let [chain-handlers (s/conform ::handlers step-fns)]\n    (when (= ::s/invalid chain-handlers)\n      (e/expound ::handlers step-fns)\n      (throw (ex-info \"Invalid chain. Should be functions or pairs of interceptor and function\" (s/explain-data ::handlers step-fns))))\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map-indexed (fn [counter [current-handler next-handler]]\n                        (let [{:keys [fn interceptors]} current-handler\n                              id (step-id key counter)\n                              next-id (when next-handler (step-id key (inc counter)))]\n                          {:id            id\n                           :next-id       next-id\n                           :event-handler fn\n                           :interceptors  interceptors\n                           :interceptor   (chain-interceptor id next-id)}))))))\n\n(defn register-chain-handlers! [instructions user-interceptors]\n  (doseq [{:keys [id event-handler interceptor interceptors]} instructions]\n    (rf/reg-event-fx id (into [interceptor] (concat user-interceptors interceptors)) event-handler)))\n\n(defn reg-chain-named*\n  \"Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [interceptors & step-fns]\n  (let [instructions (collect-named-event-instructions step-fns)]\n    (register-chain-handlers! instructions interceptors)))\n\n(defn reg-chain*\n  \"Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [id interceptors & step-fns]\n  (let [instructions (collect-event-instructions id step-fns)]\n    (register-chain-handlers! instructions interceptors)))\n\n(defn configure!\n  \"re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  \"\n  [chain-links]\n  (reset! links chain-links))\n\n(defn reg-chain-named\n  \"Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \\\"...\\\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [& handlers]\n  (apply reg-chain-named* nil handlers))\n\n(defn reg-chain\n  \"Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \\\"/customer/\\\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [id & handlers]\n  (apply reg-chain* id nil handlers))"]}