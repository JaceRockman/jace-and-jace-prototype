{"version":3,"sources":["chord/channels.cljc"],"mappings":";AAeA,oCAAA,pCAAMA,gFAAeC,GAAGC;AAAxB,AAKK,QAAM,AAAaD,eACb,WAAKE;AAAL,AACE,IAAMC,UAAQ,AAAQD;AAAtB,AACE,kEAAA,2CAAA,tGAACE,wDAAKH,yGAAaE;;;AAElC,mCAAA,nCAAME,8EAAcL,GAAGC;AAAvB,AACE,IAAAK,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,AAAA,IAAAE,uBAAAF;AAAA,AAAA,CAAAE,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAD,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,OAAAG,4CAAAH,gBAAA,IACgBV;;AADhB,GAAA,CAAAW,oBAAA;AAAA,IAAAG,aAAA,CAAAJ,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAAK,6CAAAL,gBAAAI;;AAAA,GAAA,CAAAH,oBAAA;AAAA,IAAAK,aAAA,CAAAN,YAAA;IAAAM,iBAAA,CAAAN,YAAA;IAAAA,kBAAA,iBAAAO,iBAAAP;AAAA,AAAA,CAAAO,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,AAAA,oBAAAD;AAAA,IAAAE,uBAAAR;AAAA,AAAA,CAAAQ,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAT;AAAA,AAAA,CAAAS,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAAR,oBAAA;AAAA,IAAAK,aAAA,CAAAN,YAAA;IAAAU,aAAA,QAAAJ,RAOgBjB;IAPhBW,kBAAA,iBAAAW,iBAAAX;AAAA,AAAA,CAAAW,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,AAAA,IAAAC,uBAAAZ;AAAA,AAAA,CAAAY,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAX,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,AAAA,IAAAa,uBAAAb;AAAA,AAAA,CAAAa,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAZ,oBAAA;AAAA,IAAAa,aAAA,CAAAd,YAAA;IAAAA,kBAAAA;AAAA,AAAA,AAAA,IAAAe,uBAAAf;AAAA,AAAA,CAAAe,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAC,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;oFAAAhB;;AAAA,AAAA,IAAAkB,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAApB,sBAAAC;AAAA,AAAA,GAAA,AAAAoB,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAvB;AAAA,AAAA,CAAAuB,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAxB,YAAA;AAAA,IAAAyB,uBAAAzB;AAAA,AAAA,CAAAyB,qBAAA,OAAA,AAAAC,gBAAA,CAAA1B,YAAA;;AAAAyB;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAlB;;;;AAAAkB;;;;;2EAAAlB;;;;;oFAAAA;;;;;;;;;IAAA2B,uBAAA,iBAAAC,iBAAA,AAAA9B;AAAA,AAAA,CAAA8B,eAAAC,AAAA,OAAAlC;;AAAAiC;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAAhC;;AAUF,AAAA,yBAAA,iCAAAoC,1DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8DAAA,4BAAAG,1FAAMD,yEAASY,QAAQC;AAAvB,AAAA,IAAAX,aAAAD;IAAAE,aAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAC,iBAAA,AAAAE,4BAAAF;eAAA,AAAAG,4CAAAH,eAAA,tEAA2CW;AAA3C,AACE,AAAA,GAAA,QAAAC,kCAAAC,2CAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,wFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;iDADaP,eAAQC,oEAAoBC,pIACzC,AAAA,YAAAI,oEAAAjB,gBAAAC,kBAAAC,kCAAAiB;;;AAAA,CAAA,AAAA,AAAAF,+EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,0FAAAG;;AAAA,CAAA,AAAA,AAAAH,4GAAA,WAEUS,EAAEC;;AAFZ,AAAA,YAAA,RAEUD;AAFV,AAGI,OAACE,0CAAQjB,eAAQgB;;;AAHrB,CAAA,AAAA,AAAAV,2FAAAG;;AAAA,CAAA,AAAA,AAAAH,4GAAA,WAMSS,EAAEG,IAAIF;;AANf,AAAA,YAAA,RAMSD;AANT,AAOI,OAACI,yCAAOlB,gBAASiB,IAAIF;;;AAPzB,CAAA,AAAA,AAAAV,yFAAAG;;AAAA,CAAA,AAAA,AAAAH,4GAAA,WAUWS;;AAVX,AAAA,YAAA,RAUWA;AAVX,AAWI,AAACK,2CAASpB;;AACV,AAACoB,2CAASnB;;AACV,oBAAMC;AAAN,AACE,QAACA,gDAAAA,kDAAAA;;AADH;;;;AAbJ,CAAA,AAAAI,gDAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,sDAAA;;AAAA,CAAA,AAAAA,yDAAA;;AAAA,CAAA,AAAAA,8DAAA,WAAAI,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;gGADaX,YAAQC,wDAAoBC,pKACzCY,4CAAA,6EAAAzB,aAAAC,eAAAC,4BAAAiB;iDADaR,YAAQC,wDAAoBC,rHACzC,AAAA,YAAAI,8DAAAjB,aAAAC,eAAAC,4BAAAiB;;;AAAAF;;iDADaN,QAAQC,4CAAoBC,rGACzC,YAAAI,sDAAAjB,SAAAC,WAAAC,wBAAA;;;AADF,CAAA,iDAAA,jDAAMH;;AAAN;AAAA,CAAA,2CAAA,WAAAO,tDAAMP;AAAN,AAAA,IAAAQ,WAAA,AAAAnB,gBAAAkB;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAArB,gBAAAkB;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAE,SAAAH;;;AAAA","names":["chord.channels/read-from-ws!","ws","ch","ev","message","cljs.core.async.put_BANG_","chord.channels/write-to-ws!","c__28997__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__28998__auto__","switch__28628__auto__","state_37872","state_val_37873","statearr-37875","cljs.core.async.impl.ioc-helpers/take!","inst_37870","cljs.core.async.impl.ioc-helpers/return-chan","inst_37862","statearr-37878","statearr-37879","statearr-37881","inst_37864","statearr-37883","statearr-37885","statearr-37887","inst_37868","statearr-37888","statearr-37892","state-machine__28629__auto__","ret-value__28630__auto__","result__28631__auto__","cljs.core/keyword-identical?","ex__28632__auto__","e37894","statearr-37895","cljs.core/seq","statearr-37897","cljs.core/first","state__28999__auto__","statearr-37898","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","chord.channels/bidi-ch","p__37906","vec__37907","map__37910","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","seq37902","G__37903","cljs.core/next","G__37904","self__4805__auto__","read-ch","write-ch","on-close","js/chord","js/chord.channels","js/chord.channels.t_chord$channels37911","chord.channels/t_chord$channels37911","_37913","meta37912","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","chord.channels/->t_chord$channels37911","_","handler","cljs.core.async.impl.protocols/take!","msg","cljs.core.async.impl.protocols/put!","cljs.core.async.impl.protocols/close!"],"sourcesContent":["(ns chord.channels\n  (:require #?(:clj [org.httpkit.server :as http])\n\n            #?(:clj\n               [clojure.core.async :refer [chan <! >! put! close! go-loop]]\n               :cljs\n               [cljs.core.async :refer [chan put! close! <! >!]])\n\n            #?(:clj\n               [clojure.core.async.impl.protocols :as p]\n               :cljs\n               [cljs.core.async.impl.protocols :as p]))\n\n  #?(:cljs (:require-macros [cljs.core.async.macros :refer [go-loop]])))\n\n(defn read-from-ws! [ws ch]\n  #?(:clj\n     (http/on-receive ws #(put! ch {:message %}))\n\n     :cljs\n     (set! (.-onmessage ws)\n           (fn [ev]\n             (let [message (.-data ev)]\n               (put! ch {:message message}))))))\n\n(defn write-to-ws! [ws ch]\n  (go-loop []\n    (let [msg (<! ch)]\n      (when msg\n        #?(:clj\n           (http/send! ws msg)\n\n           :cljs\n           (.send ws msg))\n        (recur)))))\n\n(defn bidi-ch [read-ch write-ch & [{:keys [on-close]}]]\n  (reify\n    p/ReadPort\n    (take! [_ handler]\n      (p/take! read-ch handler))\n\n    p/WritePort\n    (put! [_ msg handler]\n      (p/put! write-ch msg handler))\n\n    p/Channel\n    (close! [_]\n      (p/close! read-ch)\n      (p/close! write-ch)\n      (when on-close\n        (on-close)))))\n"]}