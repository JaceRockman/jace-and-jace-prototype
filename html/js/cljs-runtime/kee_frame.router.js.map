{"version":3,"sources":["kee_frame/router.cljc"],"mappings":"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","names":["kee-frame.router/default-chain-links","effects","cljs.core.get_in","dispatch","cljs.core/assoc-in","kee-frame.router/url","data","cljs.core/deref","kee-frame.state/router","cljs.core.ex_info","kee-frame.api/data->url","kee-frame.router/goto","kee-frame.api/navigate!","kee-frame.state/navigator","kee-frame.router/nav-handler","router","path","temp__5751__auto__","route","kee-frame.api/url->data","G__41200","re-frame.core/dispatch","re-frame.core/console","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__41201","cljs.core/map?","i__11950__auto__","v__11951__auto__","cljs.core.nth","cljs.core/any?","kee-frame.router/assert-route-data","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.spec.alpha/explain-data","kee-frame.router/url-not-found","routes","kee-frame.router/route-match-not-found","url","kee-frame.router/match-data","hash?","vec__41205","_","path-params","cljs.core.apply","reitit.core/match-by-name","temp__5757__auto__","q","h","kee-frame.router/match-url","vec__41209","vec__41212","path+query","fragment","clojure.string/replace","clojure.string.split","query","G__41215","reitit.core/match-by-path","cljs.core.assoc","this__4461__auto__","k__4462__auto__","this__4463__auto__","k41217","else__4464__auto__","G__41221","cljs.core/Keyword","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__41222","vec__41223","k__4485__auto__","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__41216","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this41218","other41219","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4468__auto__","G__41228","this__4469__auto__","k__4470__auto__","pred__41229","cljs.core/keyword-identical?","expr__41230","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","kee-frame.router/ReititRouter","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__41220","extmap__4501__auto__","G__41233","cljs.core/record?","kee-frame.router/->ReititRouter","kee-frame.router/map->ReititRouter","or__4212__auto__","kee-frame.router/bootstrap-routes","hash-routing?","scroll","initialized?","cljs.core/boolean","reitit.core.router","cljs.core/reset!","re-frame.core/reg-fx","kee-frame.scroll/start!","p1__41234#","kee-frame.interop/make-navigator","kee-frame.api/dispatch-current!","re_frame.core.reg_event_db","p__41236","vec__41239","db","initial","cljs.core.merge","kee-frame.router/debug-enabled?","map__41244","cljs.core/--destructure-map","routes?","kee-frame.state/debug-config","and__4210__auto__","kee-frame.state/debug?","kee-frame.router/reg-route-event","re_frame.core.reg_event_fx","re-frame.core/debug","p__41245","p__41246","map__41247","vec__41248","ctx","kee-frame.scroll/monitor-requests!","cljs.core.swap_BANG_","kee-frame.state/controllers","kee-frame.controller/apply-route","p__41251","map__41252","kee-frame.router/start!","initial-db","app-db-spec","debug?","root-component","chain-links","screen","debug-config","kee-frame.interop/set-log-level!","kee-frame.state/app-db-spec","re-chain.core/configure!","G__41253","re-frame.core/dispatch-sync","config","cljs.core/boolean?","kee-frame.state/breakpoints-initialized?","kee-frame.interop/set-breakpoint-subs","kee-frame.interop/set-breakpoints","G__41254","G__41255","re-frame.core/reg-sub","kee-frame.interop/render-root","kee-frame.router/make-route-component","component","cljs.core/fn?","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","kee-frame.router/switch-route","seq41256","G__41257","cljs.core/first","cljs.core/next","self__4805__auto__","f","pairs","cljs.core/even?","G__41258","re-frame.core/subscribe","dispatch-value","G__41259","G__41263","vec__41264","seq__41265","first__41266","vec__41267","seq__41268","first__41269","first-pair","rest-pairs","cljs.core.partition","vec__41270","value"],"sourcesContent":["(ns ^:no-doc kee-frame.router\n  (:require [kee-frame.interop :as interop]\n            [re-frame.core :as rf]\n            [re-chain.core :as chain]\n            [kee-frame.api :as api :refer [dispatch-current! navigate! url->data data->url]]\n            [kee-frame.interop :as interop]\n            [kee-frame.state :as state]\n            [kee-frame.scroll :as scroll]\n            [kee-frame.controller :as controller]\n            [reitit.core :as reitit]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [kee-frame.spec :as spec]\n            [expound.alpha :as e]))\n\n(def default-chain-links [{:effect-present? (fn [effects] (:http-xhrio effects))\n                           :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                           :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n\n(defn url [data]\n  (when-not @state/router\n    (throw (ex-info \"No router defined for this app\" {:router @state/router})))\n  (data->url @state/router data))\n\n(defn goto [data]\n  (navigate! @state/navigator (url data)))\n\n(defn nav-handler [router]\n  (fn [path]\n    (if-let [route (url->data router path)]\n      (rf/dispatch [::route-changed route])\n      (do (rf/console :group \"No route match found\")\n          (rf/console :error \"No match found for path \" path)\n          (rf/console :groupEnd)))))\n\n(s/def ::reitit-route-data (s/cat :route-name keyword? :path-params (s/* (s/map-of keyword? any?))))\n\n(defn assert-route-data [data]\n  (when-not (s/valid? ::reitit-route-data data)\n    (e/expound ::reitit-route-data data)\n    (throw (ex-info \"Bad route data input\" (s/explain-data ::reitit-route-data data)))))\n\n(defn url-not-found [routes data]\n  (throw (ex-info \"Could not find url for the provided data\"\n                  {:routes routes\n                   :data   data})))\n\n(defn route-match-not-found [routes url]\n  (throw (ex-info \"No match for URL in routes\"\n                  {:url    url\n                   :routes routes})))\n\n(defn match-data [routes route hash?]\n  (let [[_ path-params] route]\n    (str (when hash? \"/#\") (:path (apply reitit/match-by-name routes route))\n         (when-some [q (:query-string path-params)] (str \"?\" q))\n         (when-some [h (:hash path-params)] (str \"#\" h)))))\n\n(defn match-url [routes url]\n  (let [[path+query fragment] (-> url (str/replace #\"^/#/\" \"/\") (str/split #\"#\" 2))\n        [path query] (str/split path+query #\"\\?\" 2)]\n    (some-> (reitit/match-by-path routes path)\n            (assoc :query-string query :hash fragment))))\n\n(defrecord ReititRouter [routes hash?]\n  api/Router\n  (data->url [_ data]\n    (assert-route-data data)\n    (or (match-data routes data hash?)\n        (url-not-found routes data)))\n  (url->data [_ url]\n    (or (match-url routes url)\n        (route-match-not-found routes url))))\n\n(defn bootstrap-routes [routes router hash-routing? scroll]\n  (let [initialized? (boolean @state/navigator)\n        router (or router (->ReititRouter (reitit/router routes) hash-routing?))]\n    (reset! state/router router)\n    (rf/reg-fx :navigate-to goto)\n\n    (when-not initialized?\n      (when scroll (scroll/start!))\n      (reset! state/navigator\n              (interop/make-navigator {:nav-handler  (nav-handler router)\n                                       :path-exists? #(boolean (url->data router %))})))\n    (dispatch-current! @state/navigator)))\n\n(rf/reg-event-db :init (fn [db [_ initial]] (merge initial db)))\n\n\n(defn debug-enabled? []\n  (let [{:keys [routes?]\n         :or   {routes? true}}  @state/debug-config]\n    (and @state/debug?\n         routes?)))\n\n(defn reg-route-event [scroll]\n  (rf/reg-event-fx ::route-changed\n                   (when (debug-enabled?) [rf/debug])\n                   (fn [{:keys [db] :as ctx} [_ route]]\n                     (when scroll\n                       (scroll/monitor-requests! route))\n                     (swap! state/controllers controller/apply-route ctx route)\n                     (merge {:db (assoc db :kee-frame/route route)}\n                            (when scroll\n                              {:dispatch-later [{:ms       50\n                                                 :dispatch [::scroll/poll route 0]}]})))))\n\n(defn start! [{:keys [routes initial-db router hash-routing? app-db-spec debug? root-component chain-links\n                      screen scroll debug-config]\n               :or   {debug? false\n                      scroll true}}]\n  (interop/set-log-level! debug-config)\n  (reset! state/app-db-spec app-db-spec)\n  (reset! state/debug? debug?)\n  (reset! state/debug-config debug-config)\n  (chain/configure! (concat default-chain-links\n                            chain-links))\n\n  (reg-route-event scroll)\n  (when (and routes router)\n    (throw (ex-info \"Both routes and router specified. If you want to use these routes, pass them to your router constructor.\"\n                    {:routes routes\n                     :router router})))\n  (when (or routes router)\n    (bootstrap-routes routes router hash-routing? scroll))\n\n  (when initial-db\n    (rf/dispatch-sync [:init initial-db]))\n\n  (when screen\n    (let [config (when-not (boolean? screen) screen)]\n      (if @state/breakpoints-initialized?\n        (interop/set-breakpoint-subs config)\n        (do (interop/set-breakpoints config)\n            (reset! state/breakpoints-initialized? true)))))\n\n  (rf/reg-sub :kee-frame/route (fn [db] (:kee-frame/route db nil)))\n  (interop/render-root root-component))\n\n(defn make-route-component [component route]\n  (if (fn? component)\n    [component route]\n    component))\n\n(defn switch-route [f & pairs]\n  (when-not (even? (count pairs))\n    (throw (ex-info \"switch-route accepts an even number of args\" {:pairs       pairs\n                                                                   :pairs-count (count pairs)})))\n  (let [route (rf/subscribe [:kee-frame/route])\n        dispatch-value (f @route)]\n    (loop [[first-pair & rest-pairs] (partition 2 pairs)]\n      (if first-pair\n        (let [[value component] first-pair]\n          (if (= value dispatch-value)\n            (make-route-component component @route)\n            (recur rest-pairs)))\n        (throw (ex-info \"Could not find a component to match route. Did you remember to include a case for nil?\"\n                        {:route          @route\n                         :dispatch-value dispatch-value\n                         :pairs          pairs}))))))"]}