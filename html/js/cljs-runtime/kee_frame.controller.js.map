{"version":3,"sources":["kee_frame/controller.cljc"],"mappings":"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","names":["kee-frame.controller/process-params","params","route","cljs.core/vector?","cljs.core.get_in","cljs.core/ifn?","kee-frame.controller/validate-and-dispatch!","dispatch","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.core.ex_info","cljs.spec.alpha/explain-data","re-frame.core/dispatch","kee-frame.controller/debug-enabled?","map__41153","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","controllers?","kee-frame.state/debug-config","and__4210__auto__","kee-frame.state/debug?","kee-frame.controller/start!","id","ctx","start","re-frame.core/console","G__41155","cljs.core.conj","kee-frame.controller/stop!","stop","p__41156","map__41157","kee-frame.controller/process-controller","last-params","current-params","ocr-41159","cljs.core.match/backtrack","e41175","js/Error","e__39376__auto__","e41179","e41180","e41178","cljs.core._EQ_","kee-frame.controller/apply-route","controllers","cljs.core.map","p__41183","vec__41184","cljs.core.nth","controller","cljs.core.assoc","cljs.core.into"],"sourcesContent":["(ns ^:no-doc kee-frame.controller\n  (:require\n    [re-frame.core :as rf]\n    #?(:cljs\n       [cljs.core.match :refer [match]])\n    #?(:clj\n    [clojure.core.match :refer [match]])\n    [kee-frame.state :as state]\n    [kee-frame.spec :as spec]\n    [clojure.spec.alpha :as s]\n    [expound.alpha :as e]))\n\n(defn process-params [params route]\n  (cond\n    (vector? params) (get-in route params)\n    (ifn? params) (params route)))\n\n(defn validate-and-dispatch! [dispatch]\n  (when dispatch\n    (when-not (s/valid? ::spec/event-vector dispatch)\n      (e/expound ::spec/event-vector dispatch)\n      (throw (ex-info \"Invalid dispatch value\"\n                      (s/explain-data ::spec/event-vector dispatch))))\n    (rf/dispatch dispatch)))\n\n(defn debug-enabled? []\n  (let [{:keys [controllers?]\n         :or   {controllers? true}} @state/debug-config]\n    (and @state/debug?\n         controllers?)))\n\n(defn start! [id ctx start params]\n  (when start\n    (when (debug-enabled?)\n      (rf/console :log \"Starting controller \" id \" with params \" params))\n    (cond\n      (vector? start) (rf/dispatch (conj start params))\n      (ifn? start) (validate-and-dispatch! (start ctx params)))))\n\n(defn stop! [id ctx stop]\n  (when stop\n    (when (debug-enabled?)\n      (rf/console :log \"Stopping controller \" id))\n    (cond\n      (vector? stop) (rf/dispatch stop)\n      (ifn? stop) (validate-and-dispatch! (stop ctx)))))\n\n(defn process-controller [id {:keys [last-params params start stop]} ctx route]\n  (let [current-params (process-params params route)]\n    (match [last-params current-params (= last-params current-params)]\n           [_ _ true] nil\n           [nil _ false] (start! id ctx start current-params)\n           [_ nil false] (stop! id ctx stop)\n           [_ _ false] (do (stop! id ctx stop)\n                           (start! id ctx start current-params)))\n    current-params))\n\n(defn apply-route [controllers ctx route]\n  (->> controllers\n       (map (fn [[id controller]]\n              [id (assoc controller :last-params (process-controller id controller ctx route))]))\n       (into {})))"]}