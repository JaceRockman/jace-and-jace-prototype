{"version":3,"sources":["modular_roleplaying_framework/views.cljs"],"mappings":"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","names":["modular-roleplaying-framework.views/main-menu","G__108491","modular-roleplaying-framework.db-CRUD/>evt","G__108492","modular-roleplaying-framework.db-CRUD/<sub","G__108493","G__108494","var_args","G__108496","modular-roleplaying-framework.views/overlay","js/Error","item-id","G__108497","G__108498","params","G__108499","G__108500","G__108501","G__108503","modular-roleplaying-framework.views/dice-roll","dice-quantity","dice-size","roll-type","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/rand-int","flat-bonus","G__108505","modular-roleplaying-framework.views/dice-button","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","modular_roleplaying_framework.views.dice_roll.cljs$core$IFn$_invoke$arity$3","modular_roleplaying_framework.views.dice_roll.cljs$core$IFn$_invoke$arity$4","modular-roleplaying-framework.views/dice-display","modular-roleplaying-framework.views/text->hiccup","text","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","p1__108506#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/with-meta","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","modular-roleplaying-framework.views/background-color","section-type","section-number","G__108507","modular-roleplaying-framework.views/get-section-class","section-layout","G__108508","G__108509","modular-roleplaying-framework.views/divify","content","modular-roleplaying-framework.views/keywordize-keys","m","cljs.core/zipmap","cljs.core/keyword","cljs.core/keys","cljs.core/vals","modular-roleplaying-framework.views/keywordized-frequencies","v","cljs.core/frequencies","modular-roleplaying-framework.views/positions","pred","coll","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","idx","x","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","modular-roleplaying-framework.views/toggle-layout","section-one","section-two","section-three","layout","G__108510","modular-roleplaying-framework.views/reorder-sections","direction","G__108511","G__108512","modular-roleplaying-framework.views/text","section-id","section-tab","items","G__108513","G__108514","modular-roleplaying-framework.views/list-item","item","G__108515","G__108516","G__108517","G__108518","G__108519","G__108520","modular-roleplaying-framework.views/basic-list","G__108521","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","modular-roleplaying-framework.views/skillbility-view","skillbility-id","modular_roleplaying_framework.views.overlay.cljs$core$IFn$_invoke$arity$1","G__108522","modular-roleplaying-framework.views/skills-abilities-details","modular-roleplaying-framework.views/skill-checks","_","map__108523","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fexpr__108525","G__108526","skills","skillbilities?","splintering","caution","G__108527","style","G__108529","G__108530","G__108531","G__108532","G__108533","G__108534","modular-roleplaying-framework.views/resources","fexpr__108536","G__108537","G__108538","modular-roleplaying-framework.views/encounters","map__108539","fexpr__108541","G__108542","encounter-style","G__108543","G__108545","G__108546","G__108547","G__108548","modular-roleplaying-framework.views/damage-and-recovery","map__108549","fexpr__108551","G__108552","damage-tiers","recovery-tiers?","condition-style","abilities","recovery-times","treatment?","G__108553","G__108555","G__108556","cljs.core/count","G__108557","G__108558","modular-roleplaying-framework.views/condition","condition","G__108559","modular-roleplaying-framework.views/conditions-list","G__108560","modular-roleplaying-framework.views/creature-summary","creature-id","G__108561","G__108562","modular-roleplaying-framework.views/skill","skill-title","skill-level","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","modular-roleplaying-framework.views/ability","ability-title","ability-level","modular-roleplaying-framework.views/skillbility","skillbility-title","modular-roleplaying-framework.views/simple-stat-block","G__108563","G__108564","G__108565","G__108566","G__108567","G__108568","G__108569","G__108570","modular-roleplaying-framework.views/moderate-stat-block","G__108571","G__108572","G__108573","G__108574","G__108575","G__108576","G__108577","G__108578","G__108579","G__108580","G__108581","G__108582","G__108583","G__108584","G__108585","G__108586","G__108587","G__108588","G__108589","G__108590","G__108591","G__108592","G__108593","G__108594","modular-roleplaying-framework.views/complex-stat-block","sidebar?","G__108595","G__108596","G__108597","G__108598","G__108599","G__108600","G__108601","G__108602","G__108603","G__108604","G__108605","G__108606","G__108607","G__108608","G__108609","G__108610","G__108611","G__108612","G__108613","G__108614","G__108615","G__108616","G__108617","G__108618","modular-roleplaying-framework.views/creature-stats","G__108620","section-ids","G__108621","G__108622","G__108623","section-types","p1__108619#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","G__108624","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__108625","G__108626","G__108627","cljs.core/first","cljs.core/reset!","G__108631","G__108632","cljs.core/second","G__108633","cljs.core/deref","modular-roleplaying-framework.views/resource-divify","resource-quantity","resource","quantity","cljs.core/last","G__108635","modular-roleplaying-framework.views/subsection-titles","modular-roleplaying-framework.views/domain-resource-subsection","subsection-id","G__108636","clojure.string/capitalize","G__108637","modular-roleplaying-framework.views/miscellaneous-resource-subsection","G__108638","G__108639","modular-roleplaying-framework.views/creature-resources-subsections","modular-roleplaying-framework.views/feature-display","feature-id","G__108640","G__108641","modular-roleplaying-framework.views/creature-features","G__108642","G__108643","modular-roleplaying-framework.views/creature-notes","G__108645","G__108646","p1__108644#","G__108647","G__108648","G__108649","G__108650","G__108651","G__108652","modular-roleplaying-framework.views/creature-sheet","modular-roleplaying-framework.views/unlocked-creatures","modular-roleplaying-framework.views/password-entry","modular-roleplaying-framework.views/creature-list-item","G__108653","G__108654","G__108655","G__108656","G__108657","G__108658","G__108659","G__108660","modular-roleplaying-framework.views/creature-list","active-world","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","G__108661","G__108662","creatures","G__108663","entry","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","fexpr__108665","G__108666","cljs.core/vector","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__108667","G__108668","modular-roleplaying-framework.views/heritage-roles-list-item","G__108669","G__108670","G__108671","G__108672","G__108673","G__108674","modular-roleplaying-framework.views/fixed-resource-divify","resource-id","G__108675","modular-roleplaying-framework.views/fixed-heritage-divify","G__108676","modular-roleplaying-framework.views/heritages-list","G__108677","G__108678","heritages","G__108679","cljs.core.map.cljs$core$IFn$_invoke$arity$4","G__108680","G__108681","G__108682","G__108683","G__108684","G__108685","G__108686","G__108687","modular-roleplaying-framework.views/roles-list","G__108688","G__108689","roles","G__108690","G__108691","G__108692","G__108693","G__108694","G__108695","G__108696","G__108697","G__108698","modular-roleplaying-framework.views/simple-skill-description","modular-roleplaying-framework.views/moderate-skill-description","modular-roleplaying-framework.views/complex-skill-description","modular-roleplaying-framework.views/skills-and-abilities","active-ruleset","G__108699","G__108700","G__108701","G__108702","modular-roleplaying-framework.views/complete-resource-divify","G__108703","modular-roleplaying-framework.views/resources-list","resources","G__108704","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","modular-roleplaying-framework.views/world-item","p__108709","vec__108710","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq108705","G__108706","cljs.core/next","G__108707","G__108708","self__4776__auto__","size","tab-id","G__108713","G__108714","G__108715","G__108716","G__108717","G__108718","G__108719","G__108720","G__108721","modular-roleplaying-framework.views/creatures-list","modular-roleplaying-framework.views/advancements-list","advancements","G__108722","G__108723","G__108724","G__108725","G__108726","modular-roleplaying-framework.views/key-figures-list","key-figures","G__108727","G__108728","G__108729","G__108730","G__108731","modular-roleplaying-framework.views/organizations-list","organizations","G__108732","G__108733","G__108734","G__108735","G__108736","modular-roleplaying-framework.views/lore-list","lore","G__108737","G__108738","G__108739","G__108740","G__108741","modular-roleplaying-framework.views/civilizations-list","active-world-item","G__108742","world-territories","G__108743","civilizations","G__108744","cljs.core.map.cljs$core$IFn$_invoke$arity$variadic","G__108745","G__108746","map__108747","civilization-details","G__108748","G__108749","religion","society","economy","politics","military","modular-roleplaying-framework.views/territories-list","territories","G__108751","G__108752","G__108753","G__108754","G__108755","cljs.core/not-empty","G__108756","G__108757","G__108758","G__108759","modular-roleplaying-framework.views/world-overview","G__108760","modular-roleplaying-framework.views/content","G__108761","G__108763","fexpr__108765","G__108766","modular-roleplaying-framework.views/navigation-tab","G__108767","G__108768","G__108769","G__108770","modular-roleplaying-framework.views/navbar-tab","G__108772","G__108773","p1__108771#","cljs.core/not-any?","G__108774","G__108775","G__108776","G__108777","modular-roleplaying-framework.views/generate-tabs","tabs","modular-roleplaying-framework.views/navbar","G__108778","modular-roleplaying-framework.views/section","G__108779","modular-roleplaying-framework.views/resource-select","G__108780","G__108781","modular-roleplaying-framework.views/creature-resource","resource-subtype","fexpr__108783","G__108784","G__108785","G__108786","modular-roleplaying-framework.views/creature-menu","G__108787","fexpr__108789","G__108790","modular-roleplaying-framework.views/matches?","coll1","coll2","cljs.core/some","matches","y","modular-roleplaying-framework.views/feature-details","feature","resource-properties","G__108791","G__108792","modular-roleplaying-framework.views/resource-details","G__108793","cljs.core/str","G__108794","G__108795","G__108797","G__108799","G__108800","G__108801","modular-roleplaying-framework.views/condition-effect","condition-id","effect-id","G__108802","G__108803","modular-roleplaying-framework.views/condition-details","map__108804","title","description","duration","effects","G__108805","G__108807","G__108808","effect-count","G__108809","cljs.core/inc","cljs.core.range.cljs$core$IFn$_invoke$arity$1","modular-roleplaying-framework.views/skillbility-details","map__108810","details","G__108811","G__108813","G__108814","modular-roleplaying-framework.views/overlay-content","G__108815","G__108816","modular-roleplaying-framework.views/system-menu","G__108817","map__108818","G__108819","G__108821","overlay-item","G__108822","G__108823","section-numbers","G__108824","G__108825","G__108826","section-tabs","section-layouts"],"sourcesContent":["(ns modular-roleplaying-framework.views\r\n  (:require\r\n   [reagent.core :as r]\r\n   [re-frame.core :as rf]\r\n   [kee-frame.core :as kf]\r\n   [clojure.string :as s]\r\n   [modular-roleplaying-framework.db-CRUD :refer (<sub >evt)]))\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;\r\n;; Main Menu ;;\r\n;;;;;;;;;;;;;;;\r\n\r\n;; Currently, the main menu simply navigates to the test data of ruleset 1, world 1, adventure 1, and layout: \"book\"\r\n;; Eventually, it will actually navigate to real data.\r\n(defn main-menu []\r\n  [:div.main-menu\r\n   [:button\r\n    {:class \"view-system-btn\"\r\n     :type \"button\"\r\n     :value \"Prototype System\"\r\n     :on-click #(>evt [:initialize-system (<sub [:section 3]) (<sub [:section 2]) (<sub [:section 10]) \"book-layout\"])}\r\n    \"Prototype System\"]\r\n  ;;  [:button\r\n  ;;   {:class \"view-system-btn\"\r\n  ;;    :type \"button\"\r\n  ;;    :value \"Simple System\"\r\n  ;;    :on-click #(>evt [:initialize-system (<sub [:section 3]) (<sub [:section 2]) (<sub [:section 11]) \"book-layout\"])}\r\n  ;;   \"Simple System\"]\r\n  ;;  [:button\r\n  ;;   {:class \"view-system-btn\"\r\n  ;;    :type \"button\"\r\n  ;;    :value \"Moderate System\"\r\n  ;;    :on-click #(>evt [:initialize-system (<sub [:section 3]) (<sub [:section 2]) (<sub [:section 12]) \"book-layout\"])}\r\n  ;;   \"Moderate System\"]\r\n  ;;  [:button\r\n  ;;   {:class \"view-system-btn\"\r\n  ;;    :type \"button\"\r\n  ;;    :value \"Complex System\"\r\n  ;;    :on-click #(>evt [:initialize-system (<sub [:section 3]) (<sub [:section 2]) (<sub [:section 13]) \"book-layout\"])}\r\n  ;;   \"Complex System\"]\r\n  ;;  [:button\r\n  ;;   {:class \"view-system-btn\"\r\n  ;;    :type \"button\"\r\n  ;;    :value \"Multiple Characters\"\r\n  ;;    :on-click #(>evt [:initialize-system (<sub [:section 13]) (<sub [:section 3]) (<sub [:section 3]) \"book-layout\"])}\r\n  ;;   \"Multiple Characters\"]\r\n   ])\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n;; Helper Functions ;;\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn overlay\r\n  ([item-id]\r\n   (do (>evt [:overlay-item-change item-id])\r\n       (>evt [:overlay-state-change \"visible\"])))\r\n  ([item-id params]\r\n   (do (>evt [:overlay-item-change item-id])\r\n       (>evt [:overlay-state-change \"visible\"])\r\n       (>evt [:overlay-params-change params]))))\r\n\r\n(defn dice-roll\r\n  ([dice-quantity dice-size roll-type]\r\n   (str roll-type \": \" (apply max (repeat dice-quantity (inc (rand-int dice-size))))))\r\n  ([dice-quantity dice-size flat-bonus roll-type]\r\n   (str roll-type \": \" (+ flat-bonus (apply max (repeat dice-quantity (inc (rand-int dice-size))))))))\r\n\r\n(defn dice-button\r\n  ([dice-quantity dice-size roll-type]\r\n   [:button {:type \"button\"\r\n             :value (str dice-quantity \"d\" dice-size)\r\n             :on-click #(println (dice-roll dice-quantity dice-size roll-type))}\r\n    (str dice-quantity \"d\" dice-size)])\r\n  ([dice-quantity dice-size flat-bonus roll-type]\r\n   [:button {:type \"button\"\r\n             :value (str dice-quantity \"d\" dice-size \" +\" flat-bonus)\r\n             :on-click #(println (dice-roll dice-quantity dice-size flat-bonus roll-type))}\r\n    (str dice-quantity \"d\" dice-size \" +\" flat-bonus)]))\r\n\r\n(defn dice-display [dice-quantity dice-size]\r\n  [:div {:style {:font-size \"1.5em\"}}\r\n   (str dice-quantity \"d\" dice-size)])\r\n\r\n(defn text->hiccup\r\n  \"Convert newlines to [:br]'s.\"\r\n  [text]\r\n  (->> (s/split text \"\\n\")\r\n       (interpose [:br])\r\n       (map #(if (string? %)\r\n               %\r\n               (with-meta % {:key (gensym \"br-\")})))))\r\n\r\n;; Given a section-type (adventure, ruleset, world, etc.) this function will return the color styling for that section.\r\n;; (defn background-color [section-type section-number]\r\n;;   (case section-type\r\n;;     \"ruleset\"   \"rgb(230, 230, 255)\"\r\n;;     \"world\"     \"rgb(230, 255, 230)\"\r\n;;     \"adventure\" \"rgb(255, 230, 230)\"\r\n;;     \"character\" \"rgb(250, 230, 255)\"\r\n;;     (println \"ERROR: BACKGROUND COLOR: unrecognized section type in\" section-number \"-\" section-type)))\r\n\r\n;; Given a section-type (adventure, ruleset, world, etc.) this function will return the color styling for that section.\r\n(defn background-color [section-type section-number]\r\n  (case section-type\r\n    \"ruleset\"   \"rgb(125, 125, 125)\"\r\n    \"world\"     \"rgb(125, 125, 125)\"\r\n    \"adventure\" \"rgb(125, 125, 125)\"\r\n    \"character\" \"rgb(125, 125, 125)\"\r\n    (println \"ERROR: BACKGROUND COLOR: unrecognized section type in\" section-number \"-\" section-type)))\r\n\r\n;; This is used to simplify the the class declaration in the main div for the section function.\r\n;; I'm hoping to find a more clever way of doing this since this feels pretty ugly.\r\n(defn get-section-class [section-layout section-number]\r\n  (case section-layout\r\n    \"sidebar\" (case section-number\r\n                \"section-one\" \"sidebar left\"\r\n                \"section-three\" \"sidebar right\")\r\n    \"page\" \"page\"\r\n    \"book\" \"book\"))\r\n\r\n(defn divify [content]\r\n  [:div (str content)])\r\n\r\n(defn keywordize-keys [m] (zipmap (map keyword (keys m)) (vals m)))\r\n\r\n(defn keywordized-frequencies [v] (keywordize-keys (frequencies v)))\r\n\r\n(defn positions\r\n  [pred coll]\r\n  (keep-indexed (fn [idx x]\r\n                  (when (= pred x)\r\n                    idx))\r\n                coll))\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n;; Floating Buttons ;;\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn toggle-layout [section-one section-two section-three layout]\r\n  [:div {:class \"float-button\" :style {:bottom \"6%\"}}\r\n   [:div [:input {:class \"float-button\"\r\n                  :type \"button\"\r\n                  :value \"Toggle Layout\"\r\n                  :on-click #(>evt [:toggle-layout])}]]])\r\n\r\n(defn reorder-sections [section-one section-two section-three layout direction]\r\n  [:div.float-button\r\n   [:button {:class \"float-button\"\r\n             :type \"button\"\r\n             :on-click #(>evt [:reorder-sections direction])}\r\n    [:i {:class (case direction\r\n                  \"forward\" \"fas fa-chevron-right\"\r\n                  \"backward\" \"fas fa-chevron-left\"\r\n                  :else (println \"ERROR: Unrecognized direction while reordering sections.\"))}]]])\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;\r\n;; Tab Templates ;;\r\n;;;;;;;;;;;;;;;;;;;\r\n;; Tasks:\r\n;; 1. Create better formatting for the content section.\r\n\r\n;; Testing out tab template functionality.\r\n;; In a tab's data, it will have a template.\r\n;; The tab-template function will receive that template name and return the function that knows how to turn sidebar-items and page-items into hiccup.\r\n\r\n(defn text [section-number section-type section-id section-tab section-layout]\r\n  (let [items (<sub [:tab-items section-tab])]\r\n    [:div {:class \"body\"} (<sub [:item-text (items 0)])]))\r\n\r\n(defn list-item [item section-number section-tab]\r\n  [:button {:class \"body\"\r\n            :style (if (= (<sub [:state-section-item section-number]) item)\r\n                     {:background \"black\"\r\n                      :color \"white\"})\r\n            :type \"button\"\r\n            :on-click (if (= item (<sub [:state-section-item section-number]))\r\n                        #(>evt [:item-deselect section-number])\r\n                        #(do (>evt [:item-deselect section-number])\r\n                             (>evt [:item-select section-number item])))}\r\n   (<sub [:item-title item])])\r\n\r\n(defn basic-list [section-number section-type section-id section-tab section-layout]\r\n  (let [items (<sub [:tab-items section-tab])]\r\n    (doall (map list-item items (repeat section-number)))))\r\n\r\n   ;;;;;;;;;;;;;;\r\n   ;; Rulesets ;;\r\n   ;;;;;;;;;;;;;;\r\n\r\n(defn skillbility-view [skillbility-id section-layout]\r\n  [:button {:class \"unselected-button\"\r\n            :style {:width \"95%\"}\r\n            :on-click #(overlay skillbility-id)}\r\n   [:div (<sub [:item-title skillbility-id])]])\r\n\r\n(defn skills-abilities-details [section-number section-type section-id section-tab section-layout]\r\n  (if (= section-layout \"sidebar\")\r\n    [:div \"This information is not formatted for the sidebar\"]\r\n    [:div {:class \"moderate-stats\"}\r\n     [:div {:class \"skill-ability-header\"}]\r\n     [:div {:class \"skill-ability-header\"} \"Initiation\"]\r\n     [:div {:class \"skill-ability-header\"} \"Reaction\"]\r\n     [:div {:class \"skill-ability-header\"} \"Continuation\"]\r\n     [:div {:class \"domain-header\"} \"Physical\"]\r\n     [:div {:class \"border\"} (skillbility-view 10 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 11 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 12 section-layout)]\r\n     [:div {:class \"domain-header\"} \"Spiritual\"]\r\n     [:div {:class \"border\"} (skillbility-view 13 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 14 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 15 section-layout)]\r\n     [:div {:class \"domain-header\"} \"Mental\"]\r\n     [:div {:class \"border\"} (skillbility-view 16 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 17 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 18 section-layout)]\r\n     [:div {:class \"domain-header\"} \"Social\"]\r\n     [:div {:class \"border\"} (skillbility-view 19 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 20 section-layout)]\r\n     [:div {:class \"border\"} (skillbility-view 21 section-layout)]]))\r\n\r\n(defn skill-checks [_ _ section-id section-tab section-layout]\r\n  (let [item ((<sub [:tab-items section-tab]) 0)\r\n        {:keys [skills skillbilities? splintering caution]} (<sub [:section section-id])\r\n        style (if (= section-layout \"book\")\r\n                \"book-style-text\"\r\n                \"standard-text\")]\r\n    [:div\r\n     [:div {:style {:font-size \"20pt\"}} \"Overview\"]\r\n     [:div {:class style} (<sub [:overview item])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Base Dice Pool\"]\r\n     [:div {:class style} (<sub [:base-dice-pool item skillbilities? skills])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Passive Checks\"]\r\n     [:div {:class style} (<sub [:passive-checks item])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Bonuses & Penalties\"]\r\n     [:div {:class style} (<sub [:bonuses-and-penalties item])]\r\n     [:br]\r\n     (if (= true splintering) [:div {:style {:font-size \"20pt\"}} \"Multiple Actions\"])\r\n     (if (= true splintering) [:div {:class style} (<sub [:splintering item])])\r\n     [:br]\r\n     (if (= true caution) [:div {:style {:font-size \"20pt\"}} \"Careful & Reckless Action\"])\r\n     (if (= true caution) [:div {:class style} (<sub [:caution item])])]))\r\n\r\n(defn resources [section-number section-type section-id section-tab section-layout]\r\n  (let [item ((<sub [:tab-items section-tab]) 0)\r\n        style (if (= section-layout \"book\")\r\n                \"book-style-text\"\r\n                \"standard-text\")]\r\n    [:div\r\n     [:div {:style {:font-size \"20pt\"}} \"Overview\"]\r\n     [:div {:class style} (<sub [:overview item])]\r\n     [:br]]))\r\n\r\n(defn encounters [section-number section-type section-id section-tab section-layout]\r\n  (let [item ((<sub [:tab-items section-tab]) 0)\r\n        {:keys [encounter-style splintering caution]} (<sub [:section section-id])\r\n        style (if (= section-layout \"book\")\r\n                \"book-style-text\"\r\n                \"standard-text\")]\r\n    [:div\r\n     [:div {:style {:font-size \"20pt\"}} \"Overview\"]\r\n     [:div {:class style} (<sub [:overview item])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Rounds\"]\r\n     [:div {:class style} (<sub [:rounds item])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Moments\"]\r\n     [:div {:class style} (<sub [:moments item])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Actions\"]\r\n     [:div {:class style} (<sub [:actions item])]\r\n     [:div {:class \"actions-list\"}\r\n      [:div {:class \"action-section\"}\r\n       [:div {:class \"header\"} (str \"Setup Actions\")]\r\n       (map divify [\"- Release a Trap\"\r\n                    \"- Duck Behind Cover\"\r\n                    \"- Fall Prone\"\r\n                    \"- Walk\"\r\n                    \"- Crawl\"\r\n                    \"- Stand Up\"\r\n                    \"- Encourage\"\r\n                    \"- Corroborate\"\r\n                    \"- Focus \"])]\r\n      [:div {:class \"action-section\"}\r\n       [:div {:class \"header\"} (str \"Engagement Actions\")]\r\n       [:div {:style {:font-size \"1.5em\"}} \"Initiations\"]\r\n       (map divify [\"- Cast a spell\"\r\n                    \"- Fire a weapon\"\r\n                    \"- Strike at an opponent\"\r\n                    \"- Grapple\"\r\n                    \"- Disarm\"\r\n                    \"- Climb\"\r\n                    \"- Swim\"\r\n                    \"- Jump\"\r\n                    \"- Hide\"\r\n                    \"- Provide First Aid\"\r\n                    \"- Interrogate\"\r\n                    \"- Deceive\"\r\n                    \"- Befriend\"\r\n                    \"- Inspire\"])\r\n       [:div {:style {:font-size \"1.5em\"}} \"Reactions\"]\r\n       (map divify [\"- Block\"\r\n                    \"- Parry\"\r\n                    \"- Counterspell\"\r\n                    \"- Guard mind\"\r\n                    \"- Deflect\"\r\n                    \"- Evade\"])]]\r\n     [:br]\r\n    ;;  [:div {:class style} (<sub [:moments item encounter-style splintering caution])]\r\n    ;;  [:div {:class style} (<sub [:rounds item encounter-style])]\r\n     ]))\r\n\r\n(defn damage-and-recovery [section-number section-type section-id section-tab section-layout]\r\n  (let [item ((<sub [:tab-items section-tab]) 0)\r\n        {:keys [damage-tiers recovery-tiers? condition-style skills abilities skillbilities? recovery-times treatment?]} (<sub [:section section-id])\r\n        style (if (= section-layout \"book\")\r\n                \"book-style-text\"\r\n                \"standard-text\")]\r\n    [:div\r\n     [:div {:style {:font-size \"20pt\"}} \"Overview\"]\r\n     [:div {:class style} (<sub [:overview item])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Injuries\"]\r\n     [:div {:class style} (<sub [:injuries item (count damage-tiers) recovery-tiers?])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Conditions\"]\r\n     [:div {:class style} (<sub [:conditions item condition-style skills abilities skillbilities?])]\r\n     [:br]\r\n     [:div {:style {:font-size \"20pt\"}} \"Recovery\"]\r\n     [:div {:class style} (<sub [:recovery item (count damage-tiers) recovery-tiers? recovery-times treatment? skills abilities skillbilities?])]\r\n     [:br]]))\r\n\r\n(defn condition [condition]\r\n  [:button {:class \"unselected-button medium\"\r\n            :on-click #(overlay condition)}\r\n   [:div (<sub [:item-title condition])]])\r\n\r\n(defn conditions-list [section-number section-type section-id section-tab section-layout]\r\n  (let [items (<sub [:tab-items section-tab])]\r\n    [:div {:class \"conditions-list\"}\r\n     (map condition items)]))\r\n\r\n\r\n\r\n   ;;;;;;;;;;;;;;;\r\n   ;; Creatures ;;\r\n   ;;;;;;;;;;;;;;;\r\n\r\n\r\n(defn creature-summary [section-number section-type section-id section-tab section-layout]\r\n  (let [creature-id (<sub [:state-section-item section-number])]\r\n    [:div {:class \"creature-summary-header\"}\r\n     [:div {:style {:font-size \"2em\"}} (<sub [:creature-title creature-id])]]\r\n    ;; (case (<sub [:creature-summary-state creature-id])\r\n    ;;   0 [:div {:class \"creature-summary\"}\r\n    ;;      [:div {:class \"creature-summary-header\"}\r\n    ;;       [:div {:style {:font-size \"2em\"}} (<sub [:creature-title creature-id])]\r\n    ;;       [:button {:style {:background \"none\" :border \"none\" :outline \"none\"}\r\n    ;;                 :on-click #(>evt [:creature-summary-state-change creature-id 1])}\r\n    ;;        [:i {:class \"fas fa-edit\"}]]]\r\n    ;;      [:div {:class (if (= \"book\" section-layout) \"book-style-text\" \"standard-text\")}  (<sub [:creature-summary creature-id])]]\r\n    ;;   1 [:div {:class \"creature-summary\"}\r\n    ;;      [:div {:class \"creature-summary-header\"}\r\n    ;;       [:div {:style {:font-size \"2em\"}} (<sub [:creature-title creature-id])]\r\n    ;;       [:button {:style {:margin-left \"10px\" :margin-top \"5px\" :max-height \"2em\" :background \"none\" :border \"none\" :outline \"none\"}\r\n    ;;                 :on-click #(>evt [:creature-summary-state-change creature-id 0])}\r\n    ;;        [:i {:class \"fas fa-check\"}]]]\r\n    ;;      [:div {:style {:width \"100%\"}}]\r\n    ;;      [:textarea {:class \"text-edit\"\r\n    ;;                  :value (<sub [:creature-summary creature-id])\r\n    ;;                  :on-change #(>evt [:creature-summary-update creature-id (-> % .-target .-value)])}]])\r\n    ))\r\n\r\n\r\n\r\n(defn skill [skill-title skill-level section-layout]\r\n  [:div {:class \"stat\"}\r\n   (if (not= \"sidebar\" section-layout) [:div skill-title])\r\n   [:div skill-level]])\r\n\r\n(defn ability [ability-title ability-level section-layout]\r\n  [:div {:class \"stat\"}\r\n   (if (not= \"sidebar\" section-layout) [:div ability-title])\r\n   [:div (str \"d\" ability-level)]])\r\n\r\n(defn skillbility [skillbility-title skill-level ability-level section-layout]\r\n  [:div {:class \"stat\"}\r\n   (if (not= \"sidebar\" section-layout) [:div skillbility-title])\r\n   (dice-display skill-level (* 2 ability-level))])\r\n\r\n(defn simple-stat-block [creature-id section-layout]\r\n  [:div {:class \"simple-stats\"}\r\n   [:div {:class \"domain-header\"} \"Physical\"]\r\n   (skillbility \"Athleticism\" (<sub [:coordination creature-id]) (<sub [:might creature-id]) section-layout)\r\n   [:div {:class \"domain-header\"} \"Spiritual\"]\r\n   (skillbility \"Will\" (<sub [:exertion creature-id]) (<sub [:ambition creature-id]) section-layout)\r\n   [:div {:class \"domain-header\"} \"Mental\"]\r\n   (skillbility \"Acuity\" (<sub [:concentration creature-id]) (<sub [:intellect creature-id]) section-layout)\r\n   [:div {:class \"domain-header\"} \"Social\"]\r\n   (skillbility \"Charisma\" (<sub [:persuasion creature-id]) (<sub [:presence creature-id]) section-layout)])\r\n\r\n(defn moderate-stat-block [creature-id section-layout]\r\n  [:div {:class \"moderate-stats\"}\r\n   [:div {:class \"skill-ability-header\"}]\r\n   [:div {:class \"skill-ability-header\"} \"Initiation\"]\r\n   [:div {:class \"skill-ability-header\"} \"Reaction\"]\r\n   [:div {:class \"skill-ability-header\"} \"Continuation\"]\r\n   [:div {:class \"domain-header\"} \"Physical\"]\r\n   (skillbility \"Coordination\" (<sub [:coordination creature-id]) (<sub [:might creature-id]) section-layout)\r\n   (skillbility \"Reflexes\" (<sub [:reflexes creature-id]) (<sub [:finesse creature-id]) section-layout)\r\n   (skillbility \"Endurance\" (<sub [:endurance creature-id]) (<sub [:fortitude creature-id]) section-layout)\r\n   [:div {:class \"domain-header\"} \"Spiritual\"]\r\n   (skillbility \"Exertion\" (<sub [:exertion creature-id]) (<sub [:ambition creature-id]) section-layout)\r\n   (skillbility \"Instinct\" (<sub [:instinct creature-id]) (<sub [:discipline creature-id]) section-layout)\r\n   (skillbility \"Perseverance\" (<sub [:perseverance creature-id]) (<sub [:dedication creature-id]) section-layout)\r\n   [:div {:class \"domain-header\"} \"Mental\"]\r\n   (skillbility \"Concentration\" (<sub [:concentration creature-id]) (<sub [:intellect creature-id]) section-layout)\r\n   (skillbility \"Recognition\" (<sub [:recognition creature-id]) (<sub [:intuition creature-id]) section-layout)\r\n   (skillbility \"Comprehension\" (<sub [:comprehension creature-id]) (<sub [:stability creature-id]) section-layout)\r\n   [:div {:class \"domain-header\"} \"Social\"]\r\n   (skillbility \"Persuasion\" (<sub [:persuasion creature-id]) (<sub [:presence creature-id]) section-layout)\r\n   (skillbility \"Insight\" (<sub [:insight creature-id]) (<sub [:wit creature-id]) section-layout)\r\n   (skillbility \"Connections\" (<sub [:connections creature-id]) (<sub [:poise creature-id]) section-layout)])\r\n\r\n(defn complex-stat-block [creature-id section-layout]\r\n  (let [sidebar? (= \"sidebar\" section-layout)]\r\n    (if (= \"blarg\" section-layout)\r\n      [:div {:class \"standard-text\" :style {:color \"red\"}} \"ERROR: Complex stats cannot currently be displayed in the sidebar.\"]\r\n      [:div {:class \"complex-stats\"}\r\n       [:div {:class \"skill-ability-header\"}]\r\n       [:div {:class \"skill-ability-header\" :style {:grid-column \"2 / 5\"}} \"Skills\"]\r\n       [:div {:class \"skill-ability-header\" :style {:grid-column \"5 / 8\"}} \"Abilities\"]\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"}])\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"} \"Initiation\"])\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"} \"Reaction\"])\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"} \"Continuation\"])\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"} \"Dominance\"])\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"} \"Competence\"])\r\n       (if-not sidebar? [:div {:class \"skill-ability-header\"} \"Resilience\"])\r\n       [:div {:class \"domain-header\"} \"Physical\"]\r\n       (skill \"Coordination\" (<sub [:coordination creature-id]) section-layout)\r\n       (skill \"Reflexes\" (<sub [:reflexes creature-id]) section-layout)\r\n       (skill \"Endurance\" (<sub [:endurance creature-id]) section-layout)\r\n       (ability \"Might\" (<sub [:might creature-id]) section-layout)\r\n       (ability \"Finesse\" (<sub [:finesse creature-id]) section-layout)\r\n       (ability \"Fortitude\" (<sub [:fortitude creature-id]) section-layout)\r\n       [:div {:class \"domain-header\"} \"Spiritual\"]\r\n       (skill \"Exertion\" (<sub [:exertion creature-id]) section-layout)\r\n       (skill \"Instinct\" (<sub [:instinct creature-id]) section-layout)\r\n       (skill \"Perseverance\" (<sub [:perseverance creature-id]) section-layout)\r\n       (ability \"Ambition\" (<sub [:ambition creature-id]) section-layout)\r\n       (ability \"Discipline\" (<sub [:discipline creature-id]) section-layout)\r\n       (ability \"Dedication\" (<sub [:dedication creature-id]) section-layout)\r\n       [:div {:class \"domain-header\"} \"Mental\"]\r\n       (skill \"Concentration\" (<sub [:concentration creature-id]) section-layout)\r\n       (skill \"Recognition\" (<sub [:recognition creature-id]) section-layout)\r\n       (skill \"Comprehension\" (<sub [:comprehension creature-id]) section-layout)\r\n       (ability \"Intellect\" (<sub [:intellect creature-id]) section-layout)\r\n       (ability \"Intuition\" (<sub [:intuition creature-id]) section-layout)\r\n       (ability \"Stability\" (<sub [:stability creature-id]) section-layout)\r\n       [:div {:class \"domain-header\"} \"Social\"]\r\n       (skill \"Persuasion\" (<sub [:persuasion creature-id]) section-layout)\r\n       (skill \"Insight\" (<sub [:insight creature-id]) section-layout)\r\n       (skill \"Connections\" (<sub [:connections creature-id]) section-layout)\r\n       (ability \"Presence\" (<sub [:presence creature-id]) section-layout)\r\n       (ability \"Wit\" (<sub [:wit creature-id]) section-layout)\r\n       (ability \"Poise\" (<sub [:poise creature-id]) section-layout)])))\r\n\r\n(defn creature-stats [section-number section-type section-id section-tab section-layout]\r\n  (let [creature-id (<sub [:state-section-item section-number])\r\n        section-ids [(<sub [:state-section-id \"section-one\"]) (<sub [:state-section-id \"section-two\"]) (<sub [:state-section-id \"section-three\"])]\r\n        section-types (mapv #(<sub [:section-type %]) section-ids)\r\n        style (r/atom \"\")]\r\n    (cond\r\n      (> 1 (:ruleset (keywordized-frequencies section-types))) (println \"ERROR: NO RULESETS\")\r\n      (= 1 (:ruleset (keywordized-frequencies section-types))) (let [{:keys [skills abilities skillbilities?]} (<sub [:section (section-ids (first (positions \"ruleset\" section-types)))])]\r\n                                                                 (cond\r\n                                                                   (and (= skills 1) (true? skillbilities?)) (reset! style \"simple-stats\")\r\n                                                                   (and (= skills 3) (true? skillbilities?)) (reset! style \"moderate-stats\")\r\n                                                                   (and (= skills 3) (false? skillbilities?)) (reset! style \"complex-stats\")))\r\n      (< 1 (:ruleset (keywordized-frequencies section-types))) (println (str \"ERROR: MULTIPLE RULESETS: \" (section-ids (first (positions \"ruleset\" section-types))) \" and \" (section-ids (second (positions \"ruleset\" section-types))))))\r\n    (case @style\r\n      \"simple-stats\" (simple-stat-block creature-id section-layout)\r\n      \"moderate-stats\" (moderate-stat-block creature-id section-layout)\r\n      \"complex-stats\" (complex-stat-block creature-id section-layout))))\r\n\r\n\r\n\r\n(defn resource-divify [resource-quantity creature-id]\r\n  (let [resource (first resource-quantity)\r\n        quantity (last resource-quantity)]\r\n    [:div {:class \"resource\"}\r\n     [:button {:class \"unselected-button small\"\r\n               :on-click #(overlay resource)}\r\n      [:div (str (<sub [:resource-title resource])\r\n                 (if (> quantity 1)\r\n                   (str \" (\" quantity \")\")))]]\r\n    ;;  [:button {:on-click #(>evt [:creature-remove-resource resource creature-id])}\r\n    ;;   \"-\"]\r\n     ]))\r\n\r\n(def subsection-titles\r\n  [\"equipment\" \"traits\" \"expertise\" \"affiliations\" \"items\" \"wealth\"])\r\n\r\n(defn domain-resource-subsection [section-number subsection-id]\r\n  (let [creature-id (<sub [:state-section-item section-number])]\r\n    [:div\r\n     [:div {:class \"subheader\" :style {:text-align \"left\"}} (clojure.string/capitalize (subsection-titles subsection-id))]\r\n     [:div {:class \"domain-resource-list\"}\r\n      (map resource-divify (<sub [:creature-resources-typed-quantified creature-id subsection-id]) (repeat creature-id))\r\n      ;; [:button {:class \"add-resource\"\r\n      ;;           :on-click #(overlay creature-id [\"resource\" subsection-id])}\r\n      ;;  \"+\"]\r\n      ]]))\r\n\r\n(defn miscellaneous-resource-subsection [section-number subsection-id]\r\n  (let [creature-id (<sub [:state-section-item section-number])]\r\n    [:div\r\n     [:div {:class \"subheader\" :style {:text-align \"left\"}} (clojure.string/capitalize (subsection-titles subsection-id))]\r\n     [:div {:class \"miscellaneous-resource-list\"}\r\n      (map resource-divify (<sub [:creature-resources-typed-quantified creature-id subsection-id]) (repeat creature-id))\r\n      ;; [:button {:class \"add-resource\"\r\n      ;;           :on-click #(overlay creature-id [\"resource\" subsection-id])}\r\n      ;;  \"+\"]\r\n      ]]))\r\n\r\n;; (defn creature-resources-section [section-number section-type section-id section-tab section-layout]\r\n;;   (let [creature-id (<sub [:state-section-item section-number])]\r\n;;     [:div {:style {:grid-column \"1 / 3\"}}\r\n;;      [:div {:class \"header\"} \"Resources\"]\r\n;;      [:div {:class \"resource-list\"}\r\n;;       (map resource-divify (<sub [:creature-resources creature-id]))]\r\n;;      [:button {:class \"add-resource\"\r\n;;                :on-click #(overlay creature-id [\"resource\"])}\r\n;;       \"+\"]]))\r\n\r\n(defn creature-resources-subsections [section-number section-type section-id section-tab section-layout]\r\n  [:div {:class \"resource-section\"}\r\n   [:div {:class \"header\" :style {:grid-column \"1 / 3\" :padding \"5px\"}} \"Resources\"]\r\n   [:div\r\n    (domain-resource-subsection section-number 0)\r\n    (domain-resource-subsection section-number 1)\r\n    (domain-resource-subsection section-number 2)\r\n    (domain-resource-subsection section-number 3)]\r\n   [:div\r\n    (miscellaneous-resource-subsection section-number 4)\r\n    (miscellaneous-resource-subsection section-number 5)]])\r\n\r\n(defn feature-display [feature-id section-layout]\r\n  [:div {:class \"feature\"}\r\n   [:div {:class \"feature-title\"} (<sub [:feature-title feature-id])]\r\n   [:div {:class \"feature-content\"} (<sub [:feature-details feature-id])]])\r\n\r\n(defn creature-features [section-number section-type section-id section-tab section-layout]\r\n  (let [creature-id (<sub [:state-section-item section-number])]\r\n    [:div {:class \"feature-list\"}\r\n     (map feature-display (<sub [:creature-feature-list creature-id]) section-layout)]))\r\n\r\n(defn creature-notes [section-number section-type section-id section-tab section-layout]\r\n  (let [creature-id (<sub [:state-section-item section-number])]\r\n    (case (<sub [:creature-notes-state creature-id])\r\n      0 [:div {:class \"creature-notes\"}\r\n         [:div {:class \"creature-notes-header\"}\r\n          [:div {:style {:font-size \"2em\"}} \"Notes\"]\r\n          [:button {:style {:margin-left \"10px\" :margin-top \"5px\" :background \"none\" :border \"none\" :outline \"none\"}\r\n                    :on-click #(>evt [:creature-notes-state-change creature-id 1])}\r\n           [:i {:class \"fas fa-edit\"}]]]\r\n         [:div {:class (if (= \"book\" section-layout) \"book-style-text\" \"standard-text\")\r\n                :style {:grid-template-columns \"1 / 3\"}}\r\n          (text->hiccup (<sub [:creature-notes creature-id]))]]\r\n      1 [:div {:class \"creature-notes\"}\r\n         [:div {:class \"creature-notes-header\"}\r\n          [:div {:style {:font-size \"2em\"}} \"Notes\"]\r\n          [:button {:style {:margin-left \"10px\" :margin-top \"5px\" :max-height \"2em\" :background \"none\" :border \"none\" :outline \"none\"}\r\n                    :on-click #(>evt [:creature-notes-state-change creature-id 0])}\r\n           [:i {:class \"fas fa-check\"}]]]\r\n         [:textarea {:class \"text-edit\"\r\n                     :value (<sub [:creature-notes creature-id])\r\n                     :on-change #(>evt [:creature-notes-update creature-id (-> % .-target .-value)])}]])))\r\n\r\n(defn creature-sheet [section-number section-type section-id section-tab section-layout]\r\n  [:div {:class \"creature-sheet\"}\r\n   (creature-summary section-number section-type section-id section-tab section-layout)\r\n   (creature-stats section-number section-type section-id section-tab section-layout)\r\n   (creature-resources-subsections section-number section-type section-id section-tab section-layout)\r\n   (creature-notes section-number section-type section-id section-tab section-layout)])\r\n\r\n\r\n(def unlocked-creatures\r\n  (r/atom []))\r\n\r\n(def password-entry\r\n  (r/atom \"\"))\r\n\r\n(defn creature-list-item [creature-id section-number section-tab]\r\n  [:button {:class (if (= (<sub [:state-section-item section-number]) creature-id)\r\n                     (str \"selected-button\")\r\n                     (str \"unselected-button\"))\r\n            :type \"button\"\r\n            :on-click (if (= creature-id (<sub [:state-section-item section-number]))\r\n                        #(>evt [:item-deselect section-number])\r\n                        #(do (>evt [:item-deselect section-number])\r\n                             (>evt [:creature-summary-state-change creature-id 0])\r\n                             (>evt [:creature-notes-state-change creature-id 0])\r\n                             (>evt [:item-select section-number creature-id])))}\r\n   (<sub [:item-title creature-id])])\r\n\r\n(defn creature-list [section-number section-type section-id section-tab section-layout]\r\n  (let [active-world (first (filter (fn [section-id] (= \"world\" (<sub [:section-type section-id]))) (<sub [:state-section-ids])))\r\n        creatures (<sub [:world-creatures active-world])]\r\n    [:div {:style {:display \"block\"}}\r\n     [:div\r\n      [:div \"Enter Creature Password\"]\r\n      [:input {:type \"text\"\r\n               :value @password-entry\r\n               :on-change (fn [entry] (reset! password-entry (-> entry .-target .-value)))}]\r\n      [:button {:class \"unselected-button small\"\r\n                :on-click #(swap! unlocked-creatures conj ((<sub [:unlock-creature @password-entry]) 0))} \"Submit\"]]\r\n     (map creature-list-item (apply vector (distinct @unlocked-creatures)) (repeat section-number))\r\n     (if (= \"creature\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       (creature-sheet section-number section-type section-id section-tab section-layout))]))\r\n\r\n(defn heritage-roles-list-item [item-id section-number section-tab]\r\n  [:button {:class \"body\"\r\n            :style (if (= (<sub [:state-section-item section-number]) item-id)\r\n                     {:background \"black\"\r\n                      :color \"white\"})\r\n            :type \"button\"\r\n            :on-click (if (= item-id (<sub [:state-section-item section-number]))\r\n                        #(>evt [:item-deselect section-number])\r\n                        #(do (>evt [:item-deselect section-number])\r\n                             (>evt [:item-select section-number item-id])))}\r\n   (<sub [:item-title item-id])])\r\n\r\n(defn fixed-resource-divify [resource-id]\r\n  [:div {:class \"resource-view-only\"}\r\n   [:button {:on-click #(overlay resource-id)}\r\n    [:div (<sub [:resource-title resource-id])]]])\r\n\r\n(defn fixed-heritage-divify [feature-id]\r\n  [:div {:class \"feature-view-only\"}\r\n   [:button {:on-click #(overlay feature-id)}\r\n    [:div (<sub [:feature-title feature-id])]]])\r\n\r\n(defn heritages-list [section-number section-type section-id section-tab section-layout]\r\n  (let [active-world (first (filter (fn [section-id] (= \"world\" (<sub [:section-type section-id]))) (<sub [:state-section-ids])))\r\n        heritages (<sub [:world-heritages active-world])]\r\n    [:div\r\n     (map heritage-roles-list-item heritages (repeat section-number) (repeat section-tab))\r\n     (if (= \"heritage\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div\r\n        [:div (<sub [:heritage-details (<sub [:state-section-item section-number])])]\r\n        [:div {:class \"header\"} \"Resources\"]\r\n        [:div {:class \"resource-list\"}\r\n         (map fixed-resource-divify (<sub [:heritage-resources (<sub [:state-section-item section-number])]))]\r\n        [:div {:class \"header\"} \"Features\"]\r\n        (map fixed-heritage-divify (<sub [:heritage-features (<sub [:state-section-item section-number])]))])]))\r\n\r\n(defn roles-list [section-number section-type section-id section-tab section-layout]\r\n  (let [active-world (first (filter (fn [section-id] (= \"world\" (<sub [:section-type section-id]))) (<sub [:state-section-ids])))\r\n        roles (<sub [:world-roles active-world])]\r\n    [:div\r\n     (map heritage-roles-list-item roles (repeat section-number) (repeat section-tab))\r\n     (if (= \"role\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div\r\n        [:div (<sub [:role-details (<sub [:state-section-item section-number])])]\r\n        [:div {:class \"header\"} \"Resources\"]\r\n        [:div {:class \"resource-list\"}\r\n         (map fixed-resource-divify (<sub [:role-resources (<sub [:state-section-item section-number])]))]\r\n        [:div {:class \"header\"} \"Features\"]\r\n        (map fixed-heritage-divify (<sub [:role-features (<sub [:state-section-item section-number])]))])]))\r\n\r\n(def simple-skill-description\r\n  [:div\r\n   [:div \"ATHLETICISM\"]\r\n   [:div \"WILLPOWER\"]\r\n   [:div \"ACUITY\"]\r\n   [:div \"CHARISMA\"]])\r\n\r\n(def moderate-skill-description\r\n  [:div\r\n   [:div \"Coordination, Reflexes, and Endurance\"]\r\n   [:div \"Exertion, Instinct, and Perseverance\"]\r\n   [:div \"Concentration, Recognition, and Comprehension\"]\r\n   [:div \"Persuasion, Insight, and Connections\"]])\r\n\r\n(def complex-skill-description\r\n  [:div\r\n   [:div \"Coordination, Reflexes, Endurance, Might, Finesse, and Fortitude\"]\r\n   [:div \"Exertion, Instinct, Perseverance, Ambition, Discipline, and Dedication\"]\r\n   [:div \"Concentration, Recognition, Comprehension, Intellect, Intuition, and Stability\"]\r\n   [:div \"Persuasion, Insight, Connections, Presence, Wit, and Poise\"]])\r\n\r\n(defn skills-and-abilities [section-number section-type section-id section-tab section-layout]\r\n  (let [active-ruleset (first (filter (fn [section-id] (= \"ruleset\" (<sub [:section-type section-id]))) (<sub [:state-section-ids])))\r\n        skills (<sub [:ruleset-skills active-ruleset])\r\n        skillbilities? (<sub [:ruleset-skillbilities active-ruleset])]\r\n    (if (true? skillbilities?)\r\n      (if (= 1 skills)\r\n        simple-skill-description\r\n        moderate-skill-description)\r\n      complex-skill-description)))\r\n\r\n;; (defn resources-list [section-number section-type section-id section-tab section-layout]\r\n;;   (let [active-world (first (filter (fn [section-id] (= \"world\" (<sub [:section-type section-id]))) (<sub [:state-section-ids])))\r\n;;         resources (<sub [::resource-list active-world])]\r\n;;     [:div {:class \"resource-list\"}\r\n;;      (map fixed-resource-divify resources)]))\r\n\r\n(defn complete-resource-divify [resource-id]\r\n  [:div {:class \"fixed-resource\"}\r\n   [:button {:class \"unselected-button small\" :on-click #(overlay resource-id)}\r\n    [:div (<sub [:resource-title resource-id])]]])\r\n\r\n(defn resources-list [section-number section-type section-id section-tab section-layout]\r\n  (let [resources (<sub [:resource-list])]\r\n    [:div {:class \"complete-resource-list\" :style {:margin \"0px\"}}\r\n     (map complete-resource-divify resources)]))\r\n\r\n   ;;;;;;;;;;;;\r\n   ;; Worlds ;;\r\n   ;;;;;;;;;;;;\r\n\r\n(defn world-item [item-id section-number section-tab & [size]]\r\n  ;; Set tab-id to the tab contained in the section where the tab-type is identical to the item-type.\r\n  (let [tab-id (first (filter (fn [tab-id] (= (<sub [:item-type item-id]) (<sub [:tab-type tab-id]))) (<sub [:section-tabs (<sub [:state-section-id section-number])])))]\r\n    [:button {:class (if (= (<sub [:state-section-item section-number]) item-id)\r\n                       (str \"selected-button \" size)\r\n                       (str \"unselected-button \" size))\r\n              :style {:margin-bottom \"15px\"}\r\n              :type \"button\"\r\n              :on-click (if (= item-id (<sub [:state-section-item section-number]))\r\n                          #(>evt [:item-deselect section-number])\r\n                          #(>evt [:item-tab-select section-number item-id tab-id]))}\r\n     (<sub [:item-title item-id])]))\r\n\r\n(defn creatures-list [section-number section-type section-id section-tab section-layout]\r\n  [:div \"CREATURES\"])\r\n\r\n(defn advancements-list [section-number section-type section-id section-tab section-layout]\r\n  (let [advancements (<sub [:world-advancements section-id])]\r\n    (println advancements)\r\n    [:div\r\n     (map world-item advancements (repeat section-number) (repeat section-tab))\r\n     (if (= \"advancement\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div (<sub [:item-details (<sub [:state-section-item section-number])])])]))\r\n\r\n(defn key-figures-list [section-number section-type section-id section-tab section-layout]\r\n  (let [key-figures (<sub [:world-key-figures section-id])]\r\n    [:div\r\n     (map world-item key-figures (repeat section-number) (repeat section-tab))\r\n     (if (= \"key-figure\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div (<sub [:item-details (<sub [:state-section-item section-number])])])]))\r\n\r\n(defn organizations-list [section-number section-type section-id section-tab section-layout]\r\n  (let [organizations (<sub [:world-organizations section-id])]\r\n    [:div\r\n     (map world-item organizations (repeat section-number) (repeat section-tab))\r\n     (if (= \"organization\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div (<sub [:item-details (<sub [:state-section-item section-number])])])]))\r\n\r\n(defn lore-list [section-number section-type section-id section-tab section-layout]\r\n  (let [lore (<sub [:world-lore section-id])]\r\n    [:div\r\n     (map world-item lore (repeat section-number) (repeat section-tab))\r\n     (if (= \"lore\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div (<sub [:item-details (<sub [:state-section-item section-number])])])]))\r\n\r\n(defn civilizations-list [section-number section-type section-id section-tab section-layout]\r\n  (let [active-world-item (<sub [:state-section-item section-number])\r\n        world-territories (<sub [:world-territories section-id])\r\n        civilizations (<sub [:world-civilizations section-id])]\r\n    [:div\r\n     (map world-item civilizations (repeat section-number) (repeat section-tab) (repeat \"medium\"))\r\n     (if (= \"civilization\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       (let [civilization-details (<sub [:civilization-details (<sub [:state-section-item section-number])])\r\n             {:keys [religion society economy politics military]} civilization-details]\r\n         [:div\r\n          ;; [:div {:style {:font-size \"250%\"}} (<sub [:item-title (<sub [:state-section-item section-number])])]\r\n          (if (some? religion)\r\n            [:div\r\n             [:div {:class \"header\" :style {:margin-bottom \"10px\"}} \"Religion\"]\r\n             [:div religion]])\r\n          (if (some? society)\r\n            [:div\r\n             [:div {:class \"header\" :style {:margin-bottom \"10px\"}} \"Society\"]\r\n             [:div society]])\r\n          (if (some? economy)\r\n            [:div\r\n             [:div {:class \"header\" :style {:margin-bottom \"10px\"}} \"Economy\"]\r\n             [:div economy]])\r\n          (if (some? politics)\r\n            [:div\r\n             [:div {:class \"header\" :style {:margin-bottom \"10px\"}} \"Politics\"]\r\n             [:div politics]])\r\n          (if (some? military)\r\n            [:div\r\n             [:div {:class \"header\" :style {:margin-bottom \"10px\"}} \"Military\"]\r\n             [:div military]])]))]))\r\n          ;; [:div {:class \"header\"} \"Lore\"]\r\n          ;; (map world-item (<sub [:civilization-lore (<sub [:state-section-item section-number])]) (repeat section-number) (repeat section-tab))\r\n          ;; [:div {:class \"header\"} \"Organizations\"]\r\n          ;; (map world-item (<sub [:civilization-organizations (<sub [:state-section-item section-number])]) (repeat section-number) (repeat section-tab))\r\n          ;; [:div {:class \"header\"} \"Key Figures\"]\r\n          ;; (map world-item (<sub [:civilization-key-figures (<sub [:state-section-item section-number])]) (repeat section-number) (repeat section-tab))\r\n          ;; [:div {:class \"header\"} \"Advancements\"]\r\n          ;; (map world-item (<sub [:civilization-advancements (<sub [:state-section-item section-number])]) (repeat section-number) (repeat section-tab))\r\n\r\n(defn territories-list [section-number section-type section-id section-tab section-layout]\r\n  (let [territories (<sub [:world-territories section-id])]\r\n    [:div\r\n     (map world-item territories (repeat section-number) (repeat section-tab) (repeat \"medium\"))\r\n     (if (= \"territory\" (<sub [:item-type (<sub [:state-section-item section-number])]))\r\n       [:div\r\n        [:div (<sub [:territory-details (<sub [:state-section-item section-number])])]\r\n        (if (not-empty (<sub [:territory-civilizations (<sub [:state-section-item section-number])]))\r\n          [:div\r\n           [:br]\r\n           [:div {:class \"header\" :style {:margin-bottom \"10px\" :font-size \"1.5em\"}} \"CIVILIZATIONS\"]\r\n           (map world-item (<sub [:territory-civilizations (<sub [:state-section-item section-number])]) (repeat section-number) (repeat section-tab) (repeat \"medium\"))])])]))\r\n\r\n(defn world-overview [section-number section-type section-id section-tab section-layout]\r\n  [:div {:class \"superbody\"} (<sub [:world-overview section-id])])\r\n\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;\r\n;; Content Area ;;\r\n;;;;;;;;;;;;;;;;;;\r\n(defn content [section-number section-type section-id section-tab section-layout]\r\n  [:div {:class \"content\"}\r\n   [:div {:class \"header\"} (<sub [:section-title section-id])]\r\n   [:div {:class \"subheader\"} (str (<sub [:tab-title section-tab]))]\r\n   [:div {:class \"body\"} ((<sub [:tab-template section-tab]) section-number section-type section-id section-tab section-layout)]\r\n   (if (= section-number \"section-two\")\r\n     [:div {:style {:height \"30px\"}}])])\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;\r\n;; Navbar Area ;;\r\n;;;;;;;;;;;;;;;;;\r\n;; Tasks:\r\n;; 1. Get navbar icons to always center and resize correctly regardless of screen size.\r\n;; 2. Clean up the tab-order declaration if possible\r\n\r\n(defn navigation-tab [section-number section-id section-layout]\r\n  (let [direction (case section-number\r\n                    \"section-one\" {:text \"backward\" :icon \"fas fa-chevron-left\"}\r\n                    \"section-three\" {:text \"forward\" :icon \"fas fa-chevron-right\"}\r\n                    nil)]\r\n    [:button {:class \"navigation-tab\"\r\n              :type \"button\"\r\n              :on-click #(>evt [:reorder-sections (direction :text)])}\r\n     [:i {:class (direction :icon)}]]))\r\n\r\n;; navbar-tab takes a section number, that section's layout, and a tab-id and generates a tab button.\r\n(defn navbar-tab [section-number section-id section-layout tab-id]\r\n  [:button {:class \"tab\"\r\n            :style (cond\r\n                     (= tab-id (<sub [:active-tab section-number])) {:background (background-color (<sub [:section-type section-id]) section-number)\r\n                                                                     :color \"black\"}\r\n                     (not-any? #(= tab-id %) (<sub [:section-tabs section-id])) {:border \"1px\" :border-style \"solid\" :border-color (background-color (<sub [:section-type section-id]) section-number)})\r\n            :key tab-id\r\n            :type \"button\"\r\n            :on-click #(>evt [:tab-select section-number tab-id])}\r\n   [:i {:class (<sub [:tab-icon tab-id])}]])\r\n\r\n(defn generate-tabs [section-number section-id section-layout tabs]\r\n  (doall (map navbar-tab\r\n              (repeat section-number)\r\n              (repeat section-id)\r\n              (repeat section-layout)\r\n              tabs)))\r\n\r\n;; This takes all of the section data (section number, type, id, tab, and layout) and generates a navbar with the active tab highlighted.\r\n(defn navbar [section-number section-type section-id section-tab section-layout]\r\n  (let [tabs (<sub [:section-tabs-full section-number section-tab])]\r\n    [:div {:class \"navbar\"}\r\n     (generate-tabs section-number section-id section-layout tabs)\r\n     [:div {:style {:height \"max-content\"}}]\r\n    ;;  (if (= section-layout \"sidebar\")\r\n    ;;    (navigation-tab section-number section-id section-layout))\r\n     ]))\r\n\r\n\r\n\r\n;;;;;;;;;;;;;\r\n;; Section ;;\r\n;;;;;;;;;;;;;\r\n;; Tasks:\r\n\r\n;; This takes all of the section data (section number, type, id, tab, and layout) and builds a section consisting of a navbar area and content area.\r\n(defn section [section-number section-type section-id section-tab section-layout]\r\n  [:div {:class (get-section-class section-layout section-number)\r\n         :key section-number\r\n         :style {:background (background-color (<sub [:section-type section-id]) section-number)}}\r\n   (navbar section-number section-type section-id section-tab section-layout)\r\n   (content section-number section-type section-id section-tab section-layout)])\r\n\r\n;;;;;;;;;;;;;\r\n;; Overlay ;;\r\n;;;;;;;;;;;;;\r\n\r\n(defn resource-select [resource-id creature-id]\r\n  [:div {:style {:display \"block\"}}\r\n   [:button {:style {:margin \"2px\" :align-content \"left\"}\r\n             :on-click #(>evt [:creature-add-resource resource-id creature-id])}\r\n    (<sub [:item-title resource-id])]])\r\n\r\n(defn creature-resource [creature-id]\r\n  (let [resource-subtype ((<sub [:overlay-params]) 1)]\r\n    [:div {:class \"resource-select-menu\"}\r\n     [:div \"Select an item below to add it to your inventory.\"]\r\n     (map resource-select (filter (fn [resource-id] (= resource-subtype (<sub [:resource-subtype resource-id]))) (<sub [:resource-list])) (repeat creature-id))]))\r\n\r\n(defn creature-menu [creature-id]\r\n  (case ((<sub [:overlay-params]) 0)\r\n    \"resource\" (creature-resource creature-id)))\r\n\r\n(defn matches? [coll1 coll2]\r\n  (some (fn [matches] (= true matches)) (map (fn [x y] (= x y)) coll1 coll2)))\r\n\r\n(defn feature-details [feature resource-properties]\r\n  [:div\r\n   [:div {:class \"header\"} (<sub [:feature-title feature resource-properties])]\r\n   [:div (<sub [:feature-details feature resource-properties])]])\r\n\r\n(defn resource-details [resource-id]\r\n  [:div {:class \"resource-details\"}\r\n   [:div\r\n    [:div {:class \"header\"} (<sub [:resource-title resource-id])]\r\n    [:div (apply str (interpose \", \" (<sub [:resource-properties resource-id])))]]\r\n   [:div\r\n    [:div (<sub [:resource-flavor-text resource-id])]\r\n    [:div (str \"Quality: \" (<sub [:resource-quality-bonus resource-id]))]\r\n    [:div (str \"Power: \" (<sub [:resource-power-bonus resource-id]))]]\r\n   (map feature-details\r\n        (<sub [:resource-features resource-id])\r\n        (repeat (<sub [:resource-properties resource-id])))])\r\n\r\n(defn condition-effect [condition-id effect-id]\r\n  [:div {:class \"effect\"}\r\n   [:div {:class \"description\"}\r\n    (<sub [:condition-effect-description condition-id effect-id])]\r\n   [:div {:class \"duration\"}\r\n    (<sub [:condition-effect-duration condition-id effect-id])]])\r\n\r\n(defn condition-details [condition-id]\r\n  (let [{:keys [title description duration effects]} (<sub [:item condition-id])]\r\n    [:div {:class \"condition\"}\r\n     ;; Get the title and description from the condition data\r\n     [:div {:class \"title\"} (<sub [:condition-title condition-id])]\r\n     [:div {:class \"description\"} (<sub [:condition-description condition-id])]\r\n     ;; Create multiple divs with the class \"effect\" using a list of the condition effect descriptions and condition effect durations.\r\n     ;; I'll need to come back to this.\r\n     (let [effect-count (count (<sub [:condition-effects condition-id]))]\r\n       [:div {:class \"effects\"}\r\n        [:div {:class \"effect\"}\r\n         [:div {:class \"header\"} \"Effect\"]\r\n         [:div {:class \"header\"} \"Duration\"]]\r\n        (map condition-effect (repeat condition-id) (map inc (range effect-count)))])]))\r\n\r\n(defn skillbility-details [skillbility-id]\r\n  (let [{:keys [title details]} (<sub [:item skillbility-id])]\r\n    [:div {:class \"condition\"}\r\n     [:div {:class \"title\"} (<sub [:item-title skillbility-id])]\r\n     [:div {:class \"description\"} (<sub [:item-details skillbility-id])]]))\r\n\r\n(defn overlay-content [item-id]\r\n  (case (<sub [:item-type item-id])\r\n    \"creature\" (creature-menu item-id)\r\n    \"resource\" (resource-details item-id)\r\n    ;; \"feature\" (feature-details item-id)\r\n    \"condition\" (condition-details item-id)\r\n    \"skillbility\" (skillbility-details item-id)\r\n    :else (println \"ERROR: Item type not configured for overlay display.\")))\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;\r\n;; System Menu ;;\r\n;;;;;;;;;;;;;;;;;\r\n\r\n;; The system menu can have one of two css classes: pages and book.\r\n;; \"pages\" consists of three equal sized page sections with navbars at the top.\r\n;; \"book\" consists of two sidebars half the size of a page section with navbars on the edges of the screen \r\n;;      and a central section that is twice the size of a page section with a navbar at the top.\r\n(defn system-menu []\r\n  (if (<sub [:initialized?])\r\n    (let [{:keys [section-one section-two section-three layout]} (<sub [:system-state])]\r\n      [:div {:class layout}\r\n\r\n       (if (= \"visible\" (<sub [:overlay-state]))\r\n         (let [overlay-item (<sub [:overlay-item])]\r\n           [:div {:class \"overlay\"}\r\n            [:div {:class \"overlay-content\"} (overlay-content overlay-item)]\r\n            [:button {:class \"overlay-x\"\r\n                      :on-click #(>evt [:overlay-state-change \"hidden\"])}\r\n             \"X\"]]))\r\n\r\n     ;; SECTIONS\r\n       (let [section-numbers [\"section-one\" \"section-two\" \"section-three\"]\r\n             section-ids [(:section-id section-one) (:section-id section-two) (:section-id section-three)]\r\n             section-types [(<sub [:section-type (section-ids 0)]) (<sub [:section-type (section-ids 1)]) (<sub [:section-type (section-ids 2)])]\r\n             section-tabs [(:tab-id section-one) (:tab-id section-two) (:tab-id section-three)]\r\n             section-layouts (if (= layout \"pages-layout\") [\"page\" \"page\" \"page\"] [\"sidebar\" \"book\" \"sidebar\"])]\r\n\r\n         (doall (map section section-numbers section-types section-ids section-tabs section-layouts)))\r\n\r\n       ;; FLOATING BUTTONS\r\n       [:div {:class \"float-section\" :draggable \"true\"}\r\n        (reorder-sections section-one section-two section-three layout \"backward\")\r\n        (toggle-layout  section-one section-two section-three layout)\r\n        (reorder-sections section-one section-two section-three layout \"forward\")]])\r\n    [:div \"Initializing...\"]))"]}