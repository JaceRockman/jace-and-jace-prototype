{"version":3,"sources":["accountant/core.cljs"],"mappings":"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","names":["accountant.core/transformer-create-url","token","path-prefix","location","accountant.core/transformer-retrieve-token","js/accountant","js/accountant.core","js/accountant.core.history","accountant.core/history","transformer","js/goog.history.Html5History.TokenTransformer","js/goog.history.Html5History","js/window","accountant.core/dispatch-on-navigate","history","nav-handler","goog.events/listen","goog.history.EventType/NAVIGATE","e","accountant.core/get-href-attribute","node","and__4210__auto__","cljs.core._EQ_","js/Node.ELEMENT_NODE","accountant.core/find-href-node","href","attrs","navigation-link?","cljs.core/not","temp__5753__auto__","parent","accountant.core/uri->query","uri","query","cljs.core/empty?","accountant.core/uri->fragment","fragment","accountant.core/prevent-reload-on-known-path","path-exists?","reload-same-path?","js/document","target","button","meta-key","alt-key","ctrl-key","shift-key","any-key","or__4212__auto__","href-node","link-target","js/goog.Uri","path","relative-href","title","host","port","current-host","js/window.location.hostname","current-port","js/window.location.port","loc","js/window.location","current-relative-href","fexpr__37267","cljs.core.not_EQ_","goog.events/dispatchEvent","js/goog.history.Event","js/accountant.core.nav-handler","accountant.core/nav-handler","js/accountant.core.path-exists?","accountant.core/path-exists?","p__37278","map__37279","cljs.core/--destructure-map","cljs.core.get","accountant.core/configure-navigation!","accountant.core/map->params","params","p1__37283#","cljs.core.map","cljs.core/name","cljs.core/keys","values","cljs.core/vals","pairs","cljs.core.partition","cljs.core.interleave","clojure.string.join","p1__37285#","var_args","G__37296","accountant.core/navigate!","js/Error","route","accountant.core.navigate_BANG_","old-route","cljs.core/first","clojure.string.split","query-string","cljs.core/reduce-kv","valid","k","v","cljs.core.assoc","with-params","js/console.error","accountant.core/dispatch-current!","hash","G__37354"],"sourcesContent":["(ns accountant.core\n  \"The only namespace in this library.\"\n  (:require [clojure.string :as str]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType])\n  (:import goog.history.Event\n           goog.history.Html5History\n           goog.Uri))\n\n(defn- transformer-create-url\n  [token path-prefix location]\n  (str path-prefix token))\n\n(defn- transformer-retrieve-token\n  [path-prefix location]\n  (str (.-pathname location) (.-search location) (.-hash location)))\n\n(defonce history (let [transformer (goog.history.Html5History.TokenTransformer.)]\n                   (set! (.. transformer -retrieveToken) transformer-retrieve-token)\n                   (set! (.. transformer -createUrl) transformer-create-url)\n                   (Html5History. js/window transformer)))\n\n(defn- dispatch-on-navigate\n  [history nav-handler]\n  (events/listen\n    history\n    EventType/NAVIGATE\n    (fn [e]\n      (let [token (.-token e)]\n        (nav-handler token)))))\n\n(defn- get-href-attribute\n  \"Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil.\"\n  [node]\n  (when (and node (= (.-nodeType node) js/Node.ELEMENT_NODE))\n    (.getAttribute node \"href\")))\n\n(defn- find-href-node\n  \"Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if\n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element.\"\n  [e]\n  (let [href (get-href-attribute e)\n        attrs (.-attributes e)\n        navigation-link? (and href attrs (-> attrs (aget \"data-trigger\") not))]\n    (if navigation-link?\n      e\n      (when-let [parent (.-parentNode e)]\n        (recur parent)))))\n\n(defn- uri->query [uri]\n  (let [query (.getQuery uri)]\n    (when-not (empty? query)\n      (str \"?\" query))))\n\n(defn- uri->fragment [uri]\n  (let [fragment (.getFragment uri)]\n    (when-not (empty? fragment)\n      (str \"#\" fragment))))\n\n(defn- prevent-reload-on-known-path\n  \"Create a click handler that blocks page reloads for known routes\"\n  [history path-exists? reload-same-path?]\n  (events/listen\n   js/document\n   \"click\"\n   (fn [e]\n     (let [target (.-target e)\n           button (.-button e)\n           meta-key (.-metaKey e)\n           alt-key (.-altKey e)\n           ctrl-key (.-ctrlKey e)\n           shift-key (.-shiftKey e)\n           any-key (or meta-key alt-key ctrl-key shift-key)\n           href-node (find-href-node target)\n           href (when href-node (.-href href-node))\n           link-target (when href-node (.-target href-node))\n           uri (.parse Uri href)\n           path (.getPath uri)\n           query (uri->query uri)\n           fragment (uri->fragment uri)\n           relative-href (str path query fragment)\n           title (.-title target)\n           host (.getDomain uri)\n           port (.getPort uri)\n           current-host js/window.location.hostname\n           current-port js/window.location.port\n           loc js/window.location\n           current-relative-href (str (.-pathname loc) (.-query loc) (.-hash loc))]\n       (when (and (not any-key)\n                  (#{\"\" \"_self\"} link-target)\n                  (= button 0)\n                  (= host current-host)\n                  (or (not port)\n                      (= (str port) (str current-port)))\n                  (path-exists? path))\n         (when (not= current-relative-href relative-href) ;; do not add duplicate html5 history state\n           (. history (setToken relative-href title)))\n         (.preventDefault e)\n         (when reload-same-path?\n           (events/dispatchEvent history (Event. path true))))))))\n\n(defonce nav-handler nil)\n(defonce path-exists? nil)\n\n(defn configure-navigation!\n  \"Create and configure HTML5 history navigation.\n\n  nav-handler: a fn of one argument, a path. Called when we've decided\n  to navigate to another page. You'll want to make your app draw the\n  new page here.\n\n  path-exists?: a fn of one argument, a path. Return truthy if this path is handled by the SPA\"\n  [{:keys [nav-handler path-exists? reload-same-path?]}]\n  (.setUseFragment history false)\n  (.setPathPrefix history \"\")\n  (.setEnabled history true)\n  (set! accountant.core/nav-handler nav-handler)\n  (set! accountant.core/path-exists? path-exists?)\n  (dispatch-on-navigate history nav-handler)\n  (prevent-reload-on-known-path history path-exists? reload-same-path?))\n\n(defn map->params [query]\n  (let [params (map #(name %) (keys query))\n        values (vals query)\n        pairs (partition 2 (interleave params values))]\n    (str/join \"&\" (map #(str/join \"=\" %) pairs))))\n\n(defn navigate!\n  \"add a browser history entry. updates window/location\"\n  ([route] (navigate! route {}))\n  ([route query]\n   (if nav-handler\n     (let [token (.getToken history)\n           old-route (first (str/split token \"?\"))\n           query-string (map->params (reduce-kv (fn [valid k v]\n                                                  (if v\n                                                    (assoc valid k v)\n                                                    valid)) {} query))\n           with-params (if (empty? query-string)\n                         route\n                         (str route \"?\" query-string))]\n       (if (= old-route route)\n         (. history (replaceToken with-params))\n         (. history (setToken with-params))))\n     (js/console.error \"can't navigate! until configure-navigation! called\"))))\n\n(defn dispatch-current! []\n  \"Dispatch current URI path.\"\n  (let [path (-> js/window .-location .-pathname)\n        query (-> js/window .-location .-search)\n        hash (-> js/window .-location .-hash)]\n    (if nav-handler\n      (nav-handler (str path query hash))\n      (js/console.error \"can't dispatch-current until configure-navigation! called\"))))\n"]}