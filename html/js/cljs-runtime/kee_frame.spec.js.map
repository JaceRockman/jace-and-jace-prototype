{"version":3,"sources":["kee_frame/spec.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/vector?","cljs.core/fn?","cljs.spec.alpha/map-spec-impl","G__41109","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.core/any?","p1__41125#","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","kee-frame.api/Router","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.spec.alpha.every_impl","G__41127","cljs.core/set?","G__41128","cljs.core/number?","G__41131","G__41136","G__41141","kee-frame.spec/log-spec-error","new-db","spec","re-frame.core/console","expound.alpha.expound","kee-frame.spec/rollback","context","db-spec","re-frame.interceptor/assoc-effect","re_frame.interceptor.get_coeffect","kee-frame.spec/spec-interceptor","db-spec-atom","re_frame.interceptor.__GT_interceptor","re_frame.interceptor.get_effect","and__4210__auto__","cljs.core/deref","cljs.spec.alpha.valid_QMARK_"],"sourcesContent":["(ns ^:no-doc kee-frame.spec\n  (:require [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n            [re-frame.core :refer [console]]\n            [clojure.spec.alpha :as s]\n            [re-chain.core :as chain]\n            [expound.alpha :as e]\n            [kee-frame.api :as api]))\n\n(s/def ::params (s/or :path-vector vector? :fn fn?))\n(s/def ::start (s/or :vector ::event-vector :fn fn?))\n(s/def ::stop (s/or :vector ::event-vector :fn fn?))\n\n(s/def ::controller (s/keys :req-un [::params ::start]\n                            :opt-un [::stop]))\n\n(s/def ::event-vector (s/cat :event-key keyword? :event-args (s/* any?)))\n\n(s/def ::routes any?)\n(s/def ::router #(satisfies? api/Router %))\n(s/def ::hash-routing? (s/nilable boolean?))\n(s/def ::root-component (s/nilable vector?))\n(s/def ::initial-db (s/nilable map?))\n(s/def ::app-db-spec (s/nilable keyword?))\n(s/def ::blacklist (s/coll-of keyword? :kind set?))\n(s/def ::skip-events? boolean?)\n(s/def ::skip-controllers? boolean?)\n(s/def ::skip-routes? boolean?)\n(s/def ::skip-overwrites? boolean?)\n(s/def ::debug?  boolean?)\n(s/def ::debug-config (s/nilable (s/keys :opt-un [::blacklist ::events? ::controllers? ::routes? ::overwrites?])))\n(s/def ::chain-links ::chain/links)\n(s/def ::breakpoints vector?)\n(s/def ::debounce-ms number?)\n(s/def ::scroll (s/nilable (s/or :boolean boolean?\n                                 :config (s/keys :opt-un [:scroll/timeout]))))\n(s/def ::screen (s/nilable (s/or :boolean boolean?\n                                 :config (s/keys :req-un [::breakpoints ::debounce-ms]))))\n\n(s/def ::start-options (s/keys :opt-un [::routes ::router ::hash-routing? ::root-component ::initial-db\n                                        ::app-db-spec ::debug? ::debug-config ::chain-links ::screen ::scroll]))\n\n(defn log-spec-error [new-db spec]\n  (console :group \"*** Spec error when updating DB, rolling back ***\")\n  (e/expound spec new-db)\n  (console :groupEnd \"*****************************\"))\n\n(defn rollback [context new-db db-spec]\n  (do\n    (log-spec-error new-db db-spec)\n    (assoc-effect context :db (get-coeffect context :db))))\n\n(defn spec-interceptor [db-spec-atom]\n  (->interceptor\n    :id :spec\n    :after (fn [context]\n             (let [new-db (get-effect context :db)]\n               (if (and @db-spec-atom new-db (not (s/valid? @db-spec-atom new-db)))\n                 (rollback context new-db @db-spec-atom)\n                 context)))))"]}