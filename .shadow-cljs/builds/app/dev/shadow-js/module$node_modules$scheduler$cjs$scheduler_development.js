["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/scheduler/cjs/scheduler.development.js"],"~:js","shadow$provide.module$node_modules$scheduler$cjs$scheduler_development=function(global,require,module,exports){(function(){function push(heap,node){var index=heap.length;heap.push(node);a:for(;;){var parentIndex=index-1>>>1,parent=heap[parentIndex];if(void 0!==parent&&0<compare(parent,node))heap[parentIndex]=node,heap[index]=parent,index=parentIndex;else break a}}function peek(heap){heap=heap[0];return void 0===heap?null:heap}function pop(heap){var first=heap[0];if(void 0!==first){var last=heap.pop();\nif(last!==first){heap[0]=last;a:for(var index=0,length=heap.length;index<length;){var leftIndex=2*(index+1)-1,left=heap[leftIndex],rightIndex=leftIndex+1,right=heap[rightIndex];if(void 0!==left&&0>compare(left,last))void 0!==right&&0>compare(right,left)?(heap[index]=right,heap[rightIndex]=last,index=rightIndex):(heap[index]=left,heap[leftIndex]=last,index=leftIndex);else if(void 0!==right&&0>compare(right,last))heap[index]=right,heap[rightIndex]=last,index=rightIndex;else break a}}return first}return null}\nfunction compare(a,b){var diff=a.sortIndex-b.sortIndex;return 0!==diff?diff:a.id-b.id}function logEvent(entries){if(null!==eventLog){var offset=eventLogIndex;eventLogIndex+=entries.length;if(eventLogIndex+1>eventLogSize){eventLogSize*=2;if(524288<eventLogSize){console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.\");stopLoggingProfilingEvents();return}var newEventLog=new Int32Array(4*eventLogSize);newEventLog.set(eventLog);eventLogBuffer=\nnewEventLog.buffer;eventLog=newEventLog}eventLog.set(entries,offset)}}function stopLoggingProfilingEvents(){var buffer=eventLogBuffer;eventLogSize=0;eventLog=eventLogBuffer=null;eventLogIndex=0;return buffer}function markTaskStart(task,ms){profilingState[3]++;null!==eventLog&&logEvent([1,1E3*ms,task.id,task.priorityLevel])}function advanceTimers(currentTime){for(var timer=peek(timerQueue);null!==timer;){if(null===timer.callback)pop(timerQueue);else if(timer.startTime<=currentTime)pop(timerQueue),\ntimer.sortIndex=timer.expirationTime,push(taskQueue,timer),markTaskStart(timer,currentTime),timer.isQueued=!0;else break;timer=peek(timerQueue)}}function handleTimeout(currentTime){isHostTimeoutScheduled=!1;advanceTimers(currentTime);if(!isHostCallbackScheduled)if(null!==peek(taskQueue))isHostCallbackScheduled=!0,requestHostCallback(flushWork);else{var firstTimer=peek(timerQueue);null!==firstTimer&&requestHostTimeout(handleTimeout,firstTimer.startTime-currentTime)}}function flushWork(hasTimeRemaining,\ninitialTime){null!==eventLog&&logEvent([8,1E3*initialTime,mainThreadIdCounter]);isHostCallbackScheduled=!1;isHostTimeoutScheduled&&(isHostTimeoutScheduled=!1,cancelHostTimeout());isPerformingWork=!0;var previousPriorityLevel=currentPriorityLevel;try{try{advanceTimers(initialTime);for(currentTask=peek(taskQueue);null!==currentTask&&(!(currentTask.expirationTime>initialTime)||hasTimeRemaining&&!shouldYieldToHost());){var callback=currentTask.callback;if(null!==callback){currentTask.callback=null;currentPriorityLevel=\ncurrentTask.priorityLevel;var didUserCallbackTimeout=currentTask.expirationTime<=initialTime,task=currentTask,ms=initialTime;runIdCounter++;profilingState[0]=task.priorityLevel;profilingState[1]=task.id;profilingState[2]=runIdCounter;null!==eventLog&&logEvent([5,1E3*ms,task.id,runIdCounter]);var continuationCallback=callback(didUserCallbackTimeout);initialTime=exports.unstable_now();\"function\"===typeof continuationCallback?(currentTask.callback=continuationCallback,task=currentTask,ms=initialTime,\nprofilingState[0]=0,profilingState[1]=0,profilingState[2]=0,null!==eventLog&&logEvent([6,1E3*ms,task.id,runIdCounter])):(task=currentTask,ms=initialTime,profilingState[0]=0,profilingState[1]=0,profilingState[3]--,null!==eventLog&&logEvent([2,1E3*ms,task.id]),currentTask.isQueued=!1,currentTask===peek(taskQueue)&&pop(taskQueue));advanceTimers(initialTime)}else pop(taskQueue);currentTask=peek(taskQueue)}if(null!==currentTask)var JSCompiler_inline_result=!0;else{var firstTimer=peek(timerQueue);null!==\nfirstTimer&&requestHostTimeout(handleTimeout,firstTimer.startTime-initialTime);JSCompiler_inline_result=!1}return JSCompiler_inline_result}catch(error){if(null!==currentTask){var currentTime=exports.unstable_now();hasTimeRemaining=currentTask;profilingState[0]=0;profilingState[1]=0;profilingState[3]--;null!==eventLog&&logEvent([3,1E3*currentTime,hasTimeRemaining.id]);currentTask.isQueued=!1}throw error;}}finally{currentTask=null,currentPriorityLevel=previousPriorityLevel,isPerformingWork=!1,previousPriorityLevel=\nexports.unstable_now(),mainThreadIdCounter++,null!==eventLog&&logEvent([7,1E3*previousPriorityLevel,mainThreadIdCounter])}}function timeoutForPriorityLevel(priorityLevel){switch(priorityLevel){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}if(\"undefined\"===typeof window||\"function\"!==typeof MessageChannel){var _callback=null,_timeoutID=null,_flushCallback=function(){if(null!==_callback)try{var currentTime=exports.unstable_now();_callback(!0,currentTime);\n_callback=null}catch(e){throw setTimeout(_flushCallback,0),e;}},initialTime=Date.now();exports.unstable_now=function(){return Date.now()-initialTime};var requestHostCallback=function(cb){null!==_callback?setTimeout(requestHostCallback,0,cb):(_callback=cb,setTimeout(_flushCallback,0))};var requestHostTimeout=function(cb,ms){_timeoutID=setTimeout(cb,ms)};var cancelHostTimeout=function(){clearTimeout(_timeoutID)};var shouldYieldToHost=function(){return!1};var requestPaint=exports.unstable_forceFrameRate=\nfunction(){}}else{var performance=window.performance,_Date=window.Date,_setTimeout=window.setTimeout,_clearTimeout=window.clearTimeout;\"undefined\"!==typeof console&&(requestPaint=window.cancelAnimationFrame,\"function\"!==typeof window.requestAnimationFrame&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"),\"function\"!==typeof requestPaint&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"));\nif(\"object\"===typeof performance&&\"function\"===typeof performance.now)exports.unstable_now=function(){return performance.now()};else{var _initialTime=_Date.now();exports.unstable_now=function(){return _Date.now()-_initialTime}}var isMessageLoopRunning=!1,scheduledHostCallback=null,taskTimeoutID=-1,yieldInterval=5,deadline=0;shouldYieldToHost=function(){return exports.unstable_now()>=deadline};requestPaint=function(){};exports.unstable_forceFrameRate=function(fps){0>fps||125<fps?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported\"):\nyieldInterval=0<fps?Math.floor(1E3/fps):5};var channel=new MessageChannel,port=channel.port2;channel.port1.onmessage=function(){if(null!==scheduledHostCallback){var currentTime=exports.unstable_now();deadline=currentTime+yieldInterval;try{scheduledHostCallback(!0,currentTime)?port.postMessage(null):(isMessageLoopRunning=!1,scheduledHostCallback=null)}catch(error){throw port.postMessage(null),error;}}else isMessageLoopRunning=!1};requestHostCallback=function(callback){scheduledHostCallback=callback;\nisMessageLoopRunning||(isMessageLoopRunning=!0,port.postMessage(null))};requestHostTimeout=function(callback,ms){taskTimeoutID=_setTimeout(function(){callback(exports.unstable_now())},ms)};cancelHostTimeout=function(){_clearTimeout(taskTimeoutID);taskTimeoutID=-1}}var runIdCounter=0,mainThreadIdCounter=0;channel=\"function\"===typeof SharedArrayBuffer?new SharedArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT):\"function\"===typeof ArrayBuffer?new ArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT):null;var profilingState=\nnull!==channel?new Int32Array(channel):[];profilingState[0]=0;profilingState[3]=0;var eventLogSize=profilingState[1]=0,eventLogBuffer=null,eventLog=null,eventLogIndex=0,taskQueue=[],timerQueue=[],taskIdCounter=1,currentTask=null,currentPriorityLevel=3,isPerformingWork=!1,isHostCallbackScheduled=!1,isHostTimeoutScheduled=!1;channel={startLoggingProfilingEvents:function(){eventLogSize=131072;eventLogBuffer=new ArrayBuffer(4*eventLogSize);eventLog=new Int32Array(eventLogBuffer);eventLogIndex=0},stopLoggingProfilingEvents:stopLoggingProfilingEvents,\nsharedProfilingBuffer:channel};exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=channel;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(task){if(task.isQueued){var currentTime=exports.unstable_now();profilingState[3]--;null!==eventLog&&logEvent([4,1E3*currentTime,task.id]);task.isQueued=!1}task.callback=null};exports.unstable_continueExecution=function(){isHostCallbackScheduled||\nisPerformingWork||(isHostCallbackScheduled=!0,requestHostCallback(flushWork))};exports.unstable_getCurrentPriorityLevel=function(){return currentPriorityLevel};exports.unstable_getFirstCallbackNode=function(){return peek(taskQueue)};exports.unstable_next=function(eventHandler){switch(currentPriorityLevel){case 1:case 2:case 3:var priorityLevel=3;break;default:priorityLevel=currentPriorityLevel}var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=priorityLevel;try{return eventHandler()}finally{currentPriorityLevel=\npreviousPriorityLevel}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=requestPaint;exports.unstable_runWithPriority=function(priorityLevel,eventHandler){switch(priorityLevel){case 1:case 2:case 3:case 4:case 5:break;default:priorityLevel=3}var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=priorityLevel;try{return eventHandler()}finally{currentPriorityLevel=previousPriorityLevel}};exports.unstable_scheduleCallback=function(priorityLevel,callback,options){var currentTime=\nexports.unstable_now();if(\"object\"===typeof options&&null!==options){var startTime=options.delay;startTime=\"number\"===typeof startTime&&0<startTime?currentTime+startTime:currentTime;options=\"number\"===typeof options.timeout?options.timeout:timeoutForPriorityLevel(priorityLevel)}else options=timeoutForPriorityLevel(priorityLevel),startTime=currentTime;options=startTime+options;priorityLevel={id:taskIdCounter++,callback:callback,priorityLevel:priorityLevel,startTime:startTime,expirationTime:options,\nsortIndex:-1,isQueued:!1};startTime>currentTime?(priorityLevel.sortIndex=startTime,push(timerQueue,priorityLevel),null===peek(taskQueue)&&priorityLevel===peek(timerQueue)&&(isHostTimeoutScheduled?cancelHostTimeout():isHostTimeoutScheduled=!0,requestHostTimeout(handleTimeout,startTime-currentTime))):(priorityLevel.sortIndex=options,push(taskQueue,priorityLevel),markTaskStart(priorityLevel,currentTime),priorityLevel.isQueued=!0,isHostCallbackScheduled||isPerformingWork||(isHostCallbackScheduled=!0,\nrequestHostCallback(flushWork)));return priorityLevel};exports.unstable_shouldYield=function(){var currentTime=exports.unstable_now();advanceTimers(currentTime);var firstTask=peek(taskQueue);return firstTask!==currentTask&&null!==currentTask&&null!==firstTask&&null!==firstTask.callback&&firstTask.startTime<=currentTime&&firstTask.expirationTime<currentTask.expirationTime||shouldYieldToHost()};exports.unstable_wrapCallback=function(callback){var parentPriorityLevel=currentPriorityLevel;return function(){var previousPriorityLevel=\ncurrentPriorityLevel;currentPriorityLevel=parentPriorityLevel;try{return callback.apply(this,arguments)}finally{currentPriorityLevel=previousPriorityLevel}}}})()}","~:source","shadow$provide[\"module$node_modules$scheduler$cjs$scheduler_development\"] = function(global,require,module,exports) {\n/** @license React v0.19.1\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\nvar enableSchedulerDebugging = false;\r\nvar enableProfiling = true;\r\n\r\nvar requestHostCallback;\r\nvar requestHostTimeout;\r\nvar cancelHostTimeout;\r\nvar shouldYieldToHost;\r\nvar requestPaint;\r\n\r\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\r\n// implementation using setTimeout.\r\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\r\ntypeof MessageChannel !== 'function') {\r\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\r\n  // fallback to a naive implementation.\r\n  var _callback = null;\r\n  var _timeoutID = null;\r\n\r\n  var _flushCallback = function () {\r\n    if (_callback !== null) {\r\n      try {\r\n        var currentTime = exports.unstable_now();\r\n        var hasRemainingTime = true;\r\n\r\n        _callback(hasRemainingTime, currentTime);\r\n\r\n        _callback = null;\r\n      } catch (e) {\r\n        setTimeout(_flushCallback, 0);\r\n        throw e;\r\n      }\r\n    }\r\n  };\r\n\r\n  var initialTime = Date.now();\r\n\r\n  exports.unstable_now = function () {\r\n    return Date.now() - initialTime;\r\n  };\r\n\r\n  requestHostCallback = function (cb) {\r\n    if (_callback !== null) {\r\n      // Protect against re-entrancy.\r\n      setTimeout(requestHostCallback, 0, cb);\r\n    } else {\r\n      _callback = cb;\r\n      setTimeout(_flushCallback, 0);\r\n    }\r\n  };\r\n\r\n  requestHostTimeout = function (cb, ms) {\r\n    _timeoutID = setTimeout(cb, ms);\r\n  };\r\n\r\n  cancelHostTimeout = function () {\r\n    clearTimeout(_timeoutID);\r\n  };\r\n\r\n  shouldYieldToHost = function () {\r\n    return false;\r\n  };\r\n\r\n  requestPaint = exports.unstable_forceFrameRate = function () {};\r\n} else {\r\n  // Capture local references to native APIs, in case a polyfill overrides them.\r\n  var performance = window.performance;\r\n  var _Date = window.Date;\r\n  var _setTimeout = window.setTimeout;\r\n  var _clearTimeout = window.clearTimeout;\r\n\r\n  if (typeof console !== 'undefined') {\r\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\r\n    // maybe we want to continue warning if they don't exist, to preserve the\r\n    // option to rely on it in the future?\r\n    var requestAnimationFrame = window.requestAnimationFrame;\r\n    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\r\n\r\n    if (typeof requestAnimationFrame !== 'function') {\r\n      // Using console['error'] to evade Babel and ESLint\r\n      console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n\r\n    if (typeof cancelAnimationFrame !== 'function') {\r\n      // Using console['error'] to evade Babel and ESLint\r\n      console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n  }\r\n\r\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\r\n    exports.unstable_now = function () {\r\n      return performance.now();\r\n    };\r\n  } else {\r\n    var _initialTime = _Date.now();\r\n\r\n    exports.unstable_now = function () {\r\n      return _Date.now() - _initialTime;\r\n    };\r\n  }\r\n\r\n  var isMessageLoopRunning = false;\r\n  var scheduledHostCallback = null;\r\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\r\n  // thread, like user events. By default, it yields multiple times per frame.\r\n  // It does not attempt to align with frame boundaries, since most tasks don't\r\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\r\n\r\n  var yieldInterval = 5;\r\n  var deadline = 0; // TODO: Make this configurable\r\n\r\n  {\r\n    // `isInputPending` is not available. Since we have no way of knowing if\r\n    // there's pending input, always yield at the end of the frame.\r\n    shouldYieldToHost = function () {\r\n      return exports.unstable_now() >= deadline;\r\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\r\n\r\n\r\n    requestPaint = function () {};\r\n  }\r\n\r\n  exports.unstable_forceFrameRate = function (fps) {\r\n    if (fps < 0 || fps > 125) {\r\n      // Using console['error'] to evade Babel and ESLint\r\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\r\n      return;\r\n    }\r\n\r\n    if (fps > 0) {\r\n      yieldInterval = Math.floor(1000 / fps);\r\n    } else {\r\n      // reset the framerate\r\n      yieldInterval = 5;\r\n    }\r\n  };\r\n\r\n  var performWorkUntilDeadline = function () {\r\n    if (scheduledHostCallback !== null) {\r\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\r\n      // cycle. This means there's always time remaining at the beginning of\r\n      // the message event.\r\n\r\n      deadline = currentTime + yieldInterval;\r\n      var hasTimeRemaining = true;\r\n\r\n      try {\r\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n\r\n        if (!hasMoreWork) {\r\n          isMessageLoopRunning = false;\r\n          scheduledHostCallback = null;\r\n        } else {\r\n          // If there's more work, schedule the next message event at the end\r\n          // of the preceding one.\r\n          port.postMessage(null);\r\n        }\r\n      } catch (error) {\r\n        // If a scheduler task throws, exit the current browser task so the\r\n        // error can be observed.\r\n        port.postMessage(null);\r\n        throw error;\r\n      }\r\n    } else {\r\n      isMessageLoopRunning = false;\r\n    } // Yielding to the browser will give it a chance to paint, so we can\r\n  };\r\n\r\n  var channel = new MessageChannel();\r\n  var port = channel.port2;\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n\r\n  requestHostCallback = function (callback) {\r\n    scheduledHostCallback = callback;\r\n\r\n    if (!isMessageLoopRunning) {\r\n      isMessageLoopRunning = true;\r\n      port.postMessage(null);\r\n    }\r\n  };\r\n\r\n  requestHostTimeout = function (callback, ms) {\r\n    taskTimeoutID = _setTimeout(function () {\r\n      callback(exports.unstable_now());\r\n    }, ms);\r\n  };\r\n\r\n  cancelHostTimeout = function () {\r\n    _clearTimeout(taskTimeoutID);\r\n\r\n    taskTimeoutID = -1;\r\n  };\r\n}\r\n\r\nfunction push(heap, node) {\r\n  var index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\nfunction peek(heap) {\r\n  var first = heap[0];\r\n  return first === undefined ? null : first;\r\n}\r\nfunction pop(heap) {\r\n  var first = heap[0];\r\n\r\n  if (first !== undefined) {\r\n    var last = heap.pop();\r\n\r\n    if (last !== first) {\r\n      heap[0] = last;\r\n      siftDown(heap, last, 0);\r\n    }\r\n\r\n    return first;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  var index = i;\r\n\r\n  while (true) {\r\n    var parentIndex = index - 1 >>> 1;\r\n    var parent = heap[parentIndex];\r\n\r\n    if (parent !== undefined && compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  var index = i;\r\n  var length = heap.length;\r\n\r\n  while (index < length) {\r\n    var leftIndex = (index + 1) * 2 - 1;\r\n    var left = heap[leftIndex];\r\n    var rightIndex = leftIndex + 1;\r\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\r\n\r\n    if (left !== undefined && compare(left, node) < 0) {\r\n      if (right !== undefined && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (right !== undefined && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  var diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n\r\n// TODO: Use symbols?\r\nvar NoPriority = 0;\r\nvar ImmediatePriority = 1;\r\nvar UserBlockingPriority = 2;\r\nvar NormalPriority = 3;\r\nvar LowPriority = 4;\r\nvar IdlePriority = 5;\r\n\r\nvar runIdCounter = 0;\r\nvar mainThreadIdCounter = 0;\r\nvar profilingStateSize = 4;\r\nvar sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\r\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\r\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\r\n;\r\nvar profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\r\n\r\nvar PRIORITY = 0;\r\nvar CURRENT_TASK_ID = 1;\r\nvar CURRENT_RUN_ID = 2;\r\nvar QUEUE_SIZE = 3;\r\n\r\n{\r\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\r\n  // array might include canceled tasks.\r\n\r\n  profilingState[QUEUE_SIZE] = 0;\r\n  profilingState[CURRENT_TASK_ID] = 0;\r\n} // Bytes per element is 4\r\n\r\n\r\nvar INITIAL_EVENT_LOG_SIZE = 131072;\r\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\r\n\r\nvar eventLogSize = 0;\r\nvar eventLogBuffer = null;\r\nvar eventLog = null;\r\nvar eventLogIndex = 0;\r\nvar TaskStartEvent = 1;\r\nvar TaskCompleteEvent = 2;\r\nvar TaskErrorEvent = 3;\r\nvar TaskCancelEvent = 4;\r\nvar TaskRunEvent = 5;\r\nvar TaskYieldEvent = 6;\r\nvar SchedulerSuspendEvent = 7;\r\nvar SchedulerResumeEvent = 8;\r\n\r\nfunction logEvent(entries) {\r\n  if (eventLog !== null) {\r\n    var offset = eventLogIndex;\r\n    eventLogIndex += entries.length;\r\n\r\n    if (eventLogIndex + 1 > eventLogSize) {\r\n      eventLogSize *= 2;\r\n\r\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\r\n        // Using console['error'] to evade Babel and ESLint\r\n        console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\r\n        stopLoggingProfilingEvents();\r\n        return;\r\n      }\r\n\r\n      var newEventLog = new Int32Array(eventLogSize * 4);\r\n      newEventLog.set(eventLog);\r\n      eventLogBuffer = newEventLog.buffer;\r\n      eventLog = newEventLog;\r\n    }\r\n\r\n    eventLog.set(entries, offset);\r\n  }\r\n}\r\n\r\nfunction startLoggingProfilingEvents() {\r\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\r\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\r\n  eventLog = new Int32Array(eventLogBuffer);\r\n  eventLogIndex = 0;\r\n}\r\nfunction stopLoggingProfilingEvents() {\r\n  var buffer = eventLogBuffer;\r\n  eventLogSize = 0;\r\n  eventLogBuffer = null;\r\n  eventLog = null;\r\n  eventLogIndex = 0;\r\n  return buffer;\r\n}\r\nfunction markTaskStart(task, ms) {\r\n  {\r\n    profilingState[QUEUE_SIZE]++;\r\n\r\n    if (eventLog !== null) {\r\n      // performance.now returns a float, representing milliseconds. When the\r\n      // event is logged, it's coerced to an int. Convert to microseconds to\r\n      // maintain extra degrees of precision.\r\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskCompleted(task, ms) {\r\n  {\r\n    profilingState[PRIORITY] = NoPriority;\r\n    profilingState[CURRENT_TASK_ID] = 0;\r\n    profilingState[QUEUE_SIZE]--;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskCanceled(task, ms) {\r\n  {\r\n    profilingState[QUEUE_SIZE]--;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskErrored(task, ms) {\r\n  {\r\n    profilingState[PRIORITY] = NoPriority;\r\n    profilingState[CURRENT_TASK_ID] = 0;\r\n    profilingState[QUEUE_SIZE]--;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskRun(task, ms) {\r\n  {\r\n    runIdCounter++;\r\n    profilingState[PRIORITY] = task.priorityLevel;\r\n    profilingState[CURRENT_TASK_ID] = task.id;\r\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskYield(task, ms) {\r\n  {\r\n    profilingState[PRIORITY] = NoPriority;\r\n    profilingState[CURRENT_TASK_ID] = 0;\r\n    profilingState[CURRENT_RUN_ID] = 0;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\r\n    }\r\n  }\r\n}\r\nfunction markSchedulerSuspended(ms) {\r\n  {\r\n    mainThreadIdCounter++;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\r\n    }\r\n  }\r\n}\r\nfunction markSchedulerUnsuspended(ms) {\r\n  {\r\n    if (eventLog !== null) {\r\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\r\n    }\r\n  }\r\n}\r\n\r\n/* eslint-disable no-var */\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\n\r\nvar maxSigned31BitInt = 1073741823; // Times out immediately\r\n\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\r\n\r\nvar USER_BLOCKING_PRIORITY = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\r\n\r\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\r\n\r\nvar taskQueue = [];\r\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\r\n\r\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\r\nvar currentTask = null;\r\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\r\n\r\nvar isPerformingWork = false;\r\nvar isHostCallbackScheduled = false;\r\nvar isHostTimeoutScheduled = false;\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  var timer = peek(timerQueue);\r\n\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n\r\n      {\r\n        markTaskStart(timer, currentTime);\r\n        timer.isQueued = true;\r\n      }\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      var firstTimer = peek(timerQueue);\r\n\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  {\r\n    markSchedulerUnsuspended(initialTime);\r\n  } // We'll need a host callback the next time work is scheduled.\r\n\r\n\r\n  isHostCallbackScheduled = false;\r\n\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n\r\n  try {\r\n    if (enableProfiling) {\r\n      try {\r\n        return workLoop(hasTimeRemaining, initialTime);\r\n      } catch (error) {\r\n        if (currentTask !== null) {\r\n          var currentTime = exports.unstable_now();\r\n          markTaskErrored(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n\r\n        throw error;\r\n      }\r\n    } else {\r\n      // No catch in prod codepath.\r\n      return workLoop(hasTimeRemaining, initialTime);\r\n    }\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n\r\n    {\r\n      var _currentTime = exports.unstable_now();\r\n\r\n      markSchedulerSuspended(_currentTime);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  var currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n\r\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\r\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n\r\n    var callback = currentTask.callback;\r\n\r\n    if (callback !== null) {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n      markTaskRun(currentTask, currentTime);\r\n      var continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = exports.unstable_now();\r\n\r\n      if (typeof continuationCallback === 'function') {\r\n        currentTask.callback = continuationCallback;\r\n        markTaskYield(currentTask, currentTime);\r\n      } else {\r\n        {\r\n          markTaskCompleted(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n      }\r\n\r\n      advanceTimers(currentTime);\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n\r\n    currentTask = peek(taskQueue);\r\n  } // Return whether there's additional work\r\n\r\n\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    var firstTimer = peek(timerQueue);\r\n\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case LowPriority:\r\n    case IdlePriority:\r\n      break;\r\n\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_next(eventHandler) {\r\n  var priorityLevel;\r\n\r\n  switch (currentPriorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = NormalPriority;\r\n      break;\r\n\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function () {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\nfunction timeoutForPriorityLevel(priorityLevel) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n      return IMMEDIATE_PRIORITY_TIMEOUT;\r\n\r\n    case UserBlockingPriority:\r\n      return USER_BLOCKING_PRIORITY;\r\n\r\n    case IdlePriority:\r\n      return IDLE_PRIORITY;\r\n\r\n    case LowPriority:\r\n      return LOW_PRIORITY_TIMEOUT;\r\n\r\n    case NormalPriority:\r\n    default:\r\n      return NORMAL_PRIORITY_TIMEOUT;\r\n  }\r\n}\r\n\r\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\r\n  var currentTime = exports.unstable_now();\r\n  var startTime;\r\n  var timeout;\r\n\r\n  if (typeof options === 'object' && options !== null) {\r\n    var delay = options.delay;\r\n\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n\r\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\r\n  } else {\r\n    timeout = timeoutForPriorityLevel(priorityLevel);\r\n    startTime = currentTime;\r\n  }\r\n\r\n  var expirationTime = startTime + timeout;\r\n  var newTask = {\r\n    id: taskIdCounter++,\r\n    callback: callback,\r\n    priorityLevel: priorityLevel,\r\n    startTime: startTime,\r\n    expirationTime: expirationTime,\r\n    sortIndex: -1\r\n  };\r\n\r\n  {\r\n    newTask.isQueued = false;\r\n  }\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      } // Schedule a timeout.\r\n\r\n\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n\r\n    {\r\n      markTaskStart(newTask, currentTime);\r\n      newTask.isQueued = true;\r\n    } // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n\r\n\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction unstable_pauseExecution() {\r\n}\r\n\r\nfunction unstable_continueExecution() {\r\n\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction unstable_getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction unstable_cancelCallback(task) {\r\n  {\r\n    if (task.isQueued) {\r\n      var currentTime = exports.unstable_now();\r\n      markTaskCanceled(task, currentTime);\r\n      task.isQueued = false;\r\n    }\r\n  } // Null out the callback to indicate the task has been canceled. (Can't\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n\r\n\r\n  task.callback = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nfunction unstable_shouldYield() {\r\n  var currentTime = exports.unstable_now();\r\n  advanceTimers(currentTime);\r\n  var firstTask = peek(taskQueue);\r\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\r\n}\r\n\r\nvar unstable_requestPaint = requestPaint;\r\nvar unstable_Profiling =  {\r\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\r\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\r\n  sharedProfilingBuffer: sharedProfilingBuffer\r\n} ;\r\n\r\nexports.unstable_IdlePriority = IdlePriority;\r\nexports.unstable_ImmediatePriority = ImmediatePriority;\r\nexports.unstable_LowPriority = LowPriority;\r\nexports.unstable_NormalPriority = NormalPriority;\r\nexports.unstable_Profiling = unstable_Profiling;\r\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\r\nexports.unstable_cancelCallback = unstable_cancelCallback;\r\nexports.unstable_continueExecution = unstable_continueExecution;\r\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\r\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\r\nexports.unstable_next = unstable_next;\r\nexports.unstable_pauseExecution = unstable_pauseExecution;\r\nexports.unstable_requestPaint = unstable_requestPaint;\r\nexports.unstable_runWithPriority = unstable_runWithPriority;\r\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\r\nexports.unstable_shouldYield = unstable_shouldYield;\r\nexports.unstable_wrapCallback = unstable_wrapCallback;\r\n  })();\r\n}\r\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["unstable_runWithPriority","callback","unstable_LowPriority","unstable_getCurrentPriorityLevel","unstable_forceFrameRate","isQueued","unstable_pauseExecution","stopLoggingProfilingEvents","sharedProfilingBuffer","priorityLevel","id","unstable_UserBlockingPriority","unstable_shouldYield","unstable_requestPaint","expirationTime","unstable_NormalPriority","startTime","unstable_cancelCallback","sortIndex","unstable_Profiling","startLoggingProfilingEvents","unstable_scheduleCallback","unstable_now","unstable_getFirstCallbackNode","unstable_continueExecution","unstable_ImmediatePriority","unstable_wrapCallback","unstable_next","onmessage","unstable_IdlePriority"]],"~:compiled-at",1614037542173,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$scheduler$cjs$scheduler_development.js\",\n\"lineCount\":23,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/scheduler/cjs/scheduler.development.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$scheduler$cjs$scheduler_development\\\"] = function(global,require,module,exports) {\\n/** @license React v0.19.1\\r\\n * scheduler.development.js\\r\\n *\\r\\n * Copyright (c) Facebook, Inc. and its affiliates.\\r\\n *\\r\\n * This source code is licensed under the MIT license found in the\\r\\n * LICENSE file in the root directory of this source tree.\\r\\n */\\r\\n\\r\\n'use strict';\\r\\n\\r\\n\\r\\n\\r\\nif (process.env.NODE_ENV !== \\\"production\\\") {\\r\\n  (function() {\\r\\n'use strict';\\r\\n\\r\\nvar enableSchedulerDebugging = false;\\r\\nvar enableProfiling = true;\\r\\n\\r\\nvar requestHostCallback;\\r\\nvar requestHostTimeout;\\r\\nvar cancelHostTimeout;\\r\\nvar shouldYieldToHost;\\r\\nvar requestPaint;\\r\\n\\r\\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\\r\\n// implementation using setTimeout.\\r\\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\\r\\ntypeof MessageChannel !== 'function') {\\r\\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\\r\\n  // fallback to a naive implementation.\\r\\n  var _callback = null;\\r\\n  var _timeoutID = null;\\r\\n\\r\\n  var _flushCallback = function () {\\r\\n    if (_callback !== null) {\\r\\n      try {\\r\\n        var currentTime = exports.unstable_now();\\r\\n        var hasRemainingTime = true;\\r\\n\\r\\n        _callback(hasRemainingTime, currentTime);\\r\\n\\r\\n        _callback = null;\\r\\n      } catch (e) {\\r\\n        setTimeout(_flushCallback, 0);\\r\\n        throw e;\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n\\r\\n  var initialTime = Date.now();\\r\\n\\r\\n  exports.unstable_now = function () {\\r\\n    return Date.now() - initialTime;\\r\\n  };\\r\\n\\r\\n  requestHostCallback = function (cb) {\\r\\n    if (_callback !== null) {\\r\\n      // Protect against re-entrancy.\\r\\n      setTimeout(requestHostCallback, 0, cb);\\r\\n    } else {\\r\\n      _callback = cb;\\r\\n      setTimeout(_flushCallback, 0);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  requestHostTimeout = function (cb, ms) {\\r\\n    _timeoutID = setTimeout(cb, ms);\\r\\n  };\\r\\n\\r\\n  cancelHostTimeout = function () {\\r\\n    clearTimeout(_timeoutID);\\r\\n  };\\r\\n\\r\\n  shouldYieldToHost = function () {\\r\\n    return false;\\r\\n  };\\r\\n\\r\\n  requestPaint = exports.unstable_forceFrameRate = function () {};\\r\\n} else {\\r\\n  // Capture local references to native APIs, in case a polyfill overrides them.\\r\\n  var performance = window.performance;\\r\\n  var _Date = window.Date;\\r\\n  var _setTimeout = window.setTimeout;\\r\\n  var _clearTimeout = window.clearTimeout;\\r\\n\\r\\n  if (typeof console !== 'undefined') {\\r\\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\\r\\n    // maybe we want to continue warning if they don't exist, to preserve the\\r\\n    // option to rely on it in the future?\\r\\n    var requestAnimationFrame = window.requestAnimationFrame;\\r\\n    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\\r\\n\\r\\n    if (typeof requestAnimationFrame !== 'function') {\\r\\n      // Using console['error'] to evade Babel and ESLint\\r\\n      console['error'](\\\"This browser doesn't support requestAnimationFrame. \\\" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\\r\\n    }\\r\\n\\r\\n    if (typeof cancelAnimationFrame !== 'function') {\\r\\n      // Using console['error'] to evade Babel and ESLint\\r\\n      console['error'](\\\"This browser doesn't support cancelAnimationFrame. \\\" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\\r\\n    exports.unstable_now = function () {\\r\\n      return performance.now();\\r\\n    };\\r\\n  } else {\\r\\n    var _initialTime = _Date.now();\\r\\n\\r\\n    exports.unstable_now = function () {\\r\\n      return _Date.now() - _initialTime;\\r\\n    };\\r\\n  }\\r\\n\\r\\n  var isMessageLoopRunning = false;\\r\\n  var scheduledHostCallback = null;\\r\\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\\r\\n  // thread, like user events. By default, it yields multiple times per frame.\\r\\n  // It does not attempt to align with frame boundaries, since most tasks don't\\r\\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\\r\\n\\r\\n  var yieldInterval = 5;\\r\\n  var deadline = 0; // TODO: Make this configurable\\r\\n\\r\\n  {\\r\\n    // `isInputPending` is not available. Since we have no way of knowing if\\r\\n    // there's pending input, always yield at the end of the frame.\\r\\n    shouldYieldToHost = function () {\\r\\n      return exports.unstable_now() >= deadline;\\r\\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\\r\\n\\r\\n\\r\\n    requestPaint = function () {};\\r\\n  }\\r\\n\\r\\n  exports.unstable_forceFrameRate = function (fps) {\\r\\n    if (fps < 0 || fps > 125) {\\r\\n      // Using console['error'] to evade Babel and ESLint\\r\\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (fps > 0) {\\r\\n      yieldInterval = Math.floor(1000 / fps);\\r\\n    } else {\\r\\n      // reset the framerate\\r\\n      yieldInterval = 5;\\r\\n    }\\r\\n  };\\r\\n\\r\\n  var performWorkUntilDeadline = function () {\\r\\n    if (scheduledHostCallback !== null) {\\r\\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\\r\\n      // cycle. This means there's always time remaining at the beginning of\\r\\n      // the message event.\\r\\n\\r\\n      deadline = currentTime + yieldInterval;\\r\\n      var hasTimeRemaining = true;\\r\\n\\r\\n      try {\\r\\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\\r\\n\\r\\n        if (!hasMoreWork) {\\r\\n          isMessageLoopRunning = false;\\r\\n          scheduledHostCallback = null;\\r\\n        } else {\\r\\n          // If there's more work, schedule the next message event at the end\\r\\n          // of the preceding one.\\r\\n          port.postMessage(null);\\r\\n        }\\r\\n      } catch (error) {\\r\\n        // If a scheduler task throws, exit the current browser task so the\\r\\n        // error can be observed.\\r\\n        port.postMessage(null);\\r\\n        throw error;\\r\\n      }\\r\\n    } else {\\r\\n      isMessageLoopRunning = false;\\r\\n    } // Yielding to the browser will give it a chance to paint, so we can\\r\\n  };\\r\\n\\r\\n  var channel = new MessageChannel();\\r\\n  var port = channel.port2;\\r\\n  channel.port1.onmessage = performWorkUntilDeadline;\\r\\n\\r\\n  requestHostCallback = function (callback) {\\r\\n    scheduledHostCallback = callback;\\r\\n\\r\\n    if (!isMessageLoopRunning) {\\r\\n      isMessageLoopRunning = true;\\r\\n      port.postMessage(null);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  requestHostTimeout = function (callback, ms) {\\r\\n    taskTimeoutID = _setTimeout(function () {\\r\\n      callback(exports.unstable_now());\\r\\n    }, ms);\\r\\n  };\\r\\n\\r\\n  cancelHostTimeout = function () {\\r\\n    _clearTimeout(taskTimeoutID);\\r\\n\\r\\n    taskTimeoutID = -1;\\r\\n  };\\r\\n}\\r\\n\\r\\nfunction push(heap, node) {\\r\\n  var index = heap.length;\\r\\n  heap.push(node);\\r\\n  siftUp(heap, node, index);\\r\\n}\\r\\nfunction peek(heap) {\\r\\n  var first = heap[0];\\r\\n  return first === undefined ? null : first;\\r\\n}\\r\\nfunction pop(heap) {\\r\\n  var first = heap[0];\\r\\n\\r\\n  if (first !== undefined) {\\r\\n    var last = heap.pop();\\r\\n\\r\\n    if (last !== first) {\\r\\n      heap[0] = last;\\r\\n      siftDown(heap, last, 0);\\r\\n    }\\r\\n\\r\\n    return first;\\r\\n  } else {\\r\\n    return null;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction siftUp(heap, node, i) {\\r\\n  var index = i;\\r\\n\\r\\n  while (true) {\\r\\n    var parentIndex = index - 1 >>> 1;\\r\\n    var parent = heap[parentIndex];\\r\\n\\r\\n    if (parent !== undefined && compare(parent, node) > 0) {\\r\\n      // The parent is larger. Swap positions.\\r\\n      heap[parentIndex] = node;\\r\\n      heap[index] = parent;\\r\\n      index = parentIndex;\\r\\n    } else {\\r\\n      // The parent is smaller. Exit.\\r\\n      return;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction siftDown(heap, node, i) {\\r\\n  var index = i;\\r\\n  var length = heap.length;\\r\\n\\r\\n  while (index < length) {\\r\\n    var leftIndex = (index + 1) * 2 - 1;\\r\\n    var left = heap[leftIndex];\\r\\n    var rightIndex = leftIndex + 1;\\r\\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\\r\\n\\r\\n    if (left !== undefined && compare(left, node) < 0) {\\r\\n      if (right !== undefined && compare(right, left) < 0) {\\r\\n        heap[index] = right;\\r\\n        heap[rightIndex] = node;\\r\\n        index = rightIndex;\\r\\n      } else {\\r\\n        heap[index] = left;\\r\\n        heap[leftIndex] = node;\\r\\n        index = leftIndex;\\r\\n      }\\r\\n    } else if (right !== undefined && compare(right, node) < 0) {\\r\\n      heap[index] = right;\\r\\n      heap[rightIndex] = node;\\r\\n      index = rightIndex;\\r\\n    } else {\\r\\n      // Neither child is smaller. Exit.\\r\\n      return;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction compare(a, b) {\\r\\n  // Compare sort index first, then task id.\\r\\n  var diff = a.sortIndex - b.sortIndex;\\r\\n  return diff !== 0 ? diff : a.id - b.id;\\r\\n}\\r\\n\\r\\n// TODO: Use symbols?\\r\\nvar NoPriority = 0;\\r\\nvar ImmediatePriority = 1;\\r\\nvar UserBlockingPriority = 2;\\r\\nvar NormalPriority = 3;\\r\\nvar LowPriority = 4;\\r\\nvar IdlePriority = 5;\\r\\n\\r\\nvar runIdCounter = 0;\\r\\nvar mainThreadIdCounter = 0;\\r\\nvar profilingStateSize = 4;\\r\\nvar sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\\r\\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\\r\\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\\r\\n;\\r\\nvar profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\\r\\n\\r\\nvar PRIORITY = 0;\\r\\nvar CURRENT_TASK_ID = 1;\\r\\nvar CURRENT_RUN_ID = 2;\\r\\nvar QUEUE_SIZE = 3;\\r\\n\\r\\n{\\r\\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\\r\\n  // array might include canceled tasks.\\r\\n\\r\\n  profilingState[QUEUE_SIZE] = 0;\\r\\n  profilingState[CURRENT_TASK_ID] = 0;\\r\\n} // Bytes per element is 4\\r\\n\\r\\n\\r\\nvar INITIAL_EVENT_LOG_SIZE = 131072;\\r\\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\\r\\n\\r\\nvar eventLogSize = 0;\\r\\nvar eventLogBuffer = null;\\r\\nvar eventLog = null;\\r\\nvar eventLogIndex = 0;\\r\\nvar TaskStartEvent = 1;\\r\\nvar TaskCompleteEvent = 2;\\r\\nvar TaskErrorEvent = 3;\\r\\nvar TaskCancelEvent = 4;\\r\\nvar TaskRunEvent = 5;\\r\\nvar TaskYieldEvent = 6;\\r\\nvar SchedulerSuspendEvent = 7;\\r\\nvar SchedulerResumeEvent = 8;\\r\\n\\r\\nfunction logEvent(entries) {\\r\\n  if (eventLog !== null) {\\r\\n    var offset = eventLogIndex;\\r\\n    eventLogIndex += entries.length;\\r\\n\\r\\n    if (eventLogIndex + 1 > eventLogSize) {\\r\\n      eventLogSize *= 2;\\r\\n\\r\\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\\r\\n        // Using console['error'] to evade Babel and ESLint\\r\\n        console['error'](\\\"Scheduler Profiling: Event log exceeded maximum size. Don't \\\" + 'forget to call `stopLoggingProfilingEvents()`.');\\r\\n        stopLoggingProfilingEvents();\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      var newEventLog = new Int32Array(eventLogSize * 4);\\r\\n      newEventLog.set(eventLog);\\r\\n      eventLogBuffer = newEventLog.buffer;\\r\\n      eventLog = newEventLog;\\r\\n    }\\r\\n\\r\\n    eventLog.set(entries, offset);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction startLoggingProfilingEvents() {\\r\\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\\r\\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\\r\\n  eventLog = new Int32Array(eventLogBuffer);\\r\\n  eventLogIndex = 0;\\r\\n}\\r\\nfunction stopLoggingProfilingEvents() {\\r\\n  var buffer = eventLogBuffer;\\r\\n  eventLogSize = 0;\\r\\n  eventLogBuffer = null;\\r\\n  eventLog = null;\\r\\n  eventLogIndex = 0;\\r\\n  return buffer;\\r\\n}\\r\\nfunction markTaskStart(task, ms) {\\r\\n  {\\r\\n    profilingState[QUEUE_SIZE]++;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      // performance.now returns a float, representing milliseconds. When the\\r\\n      // event is logged, it's coerced to an int. Convert to microseconds to\\r\\n      // maintain extra degrees of precision.\\r\\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markTaskCompleted(task, ms) {\\r\\n  {\\r\\n    profilingState[PRIORITY] = NoPriority;\\r\\n    profilingState[CURRENT_TASK_ID] = 0;\\r\\n    profilingState[QUEUE_SIZE]--;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markTaskCanceled(task, ms) {\\r\\n  {\\r\\n    profilingState[QUEUE_SIZE]--;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markTaskErrored(task, ms) {\\r\\n  {\\r\\n    profilingState[PRIORITY] = NoPriority;\\r\\n    profilingState[CURRENT_TASK_ID] = 0;\\r\\n    profilingState[QUEUE_SIZE]--;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markTaskRun(task, ms) {\\r\\n  {\\r\\n    runIdCounter++;\\r\\n    profilingState[PRIORITY] = task.priorityLevel;\\r\\n    profilingState[CURRENT_TASK_ID] = task.id;\\r\\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markTaskYield(task, ms) {\\r\\n  {\\r\\n    profilingState[PRIORITY] = NoPriority;\\r\\n    profilingState[CURRENT_TASK_ID] = 0;\\r\\n    profilingState[CURRENT_RUN_ID] = 0;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markSchedulerSuspended(ms) {\\r\\n  {\\r\\n    mainThreadIdCounter++;\\r\\n\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\nfunction markSchedulerUnsuspended(ms) {\\r\\n  {\\r\\n    if (eventLog !== null) {\\r\\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/* eslint-disable no-var */\\r\\n// Math.pow(2, 30) - 1\\r\\n// 0b111111111111111111111111111111\\r\\n\\r\\nvar maxSigned31BitInt = 1073741823; // Times out immediately\\r\\n\\r\\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\\r\\n\\r\\nvar USER_BLOCKING_PRIORITY = 250;\\r\\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\\r\\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\\r\\n\\r\\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\\r\\n\\r\\nvar taskQueue = [];\\r\\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\\r\\n\\r\\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\\r\\nvar currentTask = null;\\r\\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\\r\\n\\r\\nvar isPerformingWork = false;\\r\\nvar isHostCallbackScheduled = false;\\r\\nvar isHostTimeoutScheduled = false;\\r\\n\\r\\nfunction advanceTimers(currentTime) {\\r\\n  // Check for tasks that are no longer delayed and add them to the queue.\\r\\n  var timer = peek(timerQueue);\\r\\n\\r\\n  while (timer !== null) {\\r\\n    if (timer.callback === null) {\\r\\n      // Timer was cancelled.\\r\\n      pop(timerQueue);\\r\\n    } else if (timer.startTime <= currentTime) {\\r\\n      // Timer fired. Transfer to the task queue.\\r\\n      pop(timerQueue);\\r\\n      timer.sortIndex = timer.expirationTime;\\r\\n      push(taskQueue, timer);\\r\\n\\r\\n      {\\r\\n        markTaskStart(timer, currentTime);\\r\\n        timer.isQueued = true;\\r\\n      }\\r\\n    } else {\\r\\n      // Remaining timers are pending.\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    timer = peek(timerQueue);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction handleTimeout(currentTime) {\\r\\n  isHostTimeoutScheduled = false;\\r\\n  advanceTimers(currentTime);\\r\\n\\r\\n  if (!isHostCallbackScheduled) {\\r\\n    if (peek(taskQueue) !== null) {\\r\\n      isHostCallbackScheduled = true;\\r\\n      requestHostCallback(flushWork);\\r\\n    } else {\\r\\n      var firstTimer = peek(timerQueue);\\r\\n\\r\\n      if (firstTimer !== null) {\\r\\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction flushWork(hasTimeRemaining, initialTime) {\\r\\n  {\\r\\n    markSchedulerUnsuspended(initialTime);\\r\\n  } // We'll need a host callback the next time work is scheduled.\\r\\n\\r\\n\\r\\n  isHostCallbackScheduled = false;\\r\\n\\r\\n  if (isHostTimeoutScheduled) {\\r\\n    // We scheduled a timeout but it's no longer needed. Cancel it.\\r\\n    isHostTimeoutScheduled = false;\\r\\n    cancelHostTimeout();\\r\\n  }\\r\\n\\r\\n  isPerformingWork = true;\\r\\n  var previousPriorityLevel = currentPriorityLevel;\\r\\n\\r\\n  try {\\r\\n    if (enableProfiling) {\\r\\n      try {\\r\\n        return workLoop(hasTimeRemaining, initialTime);\\r\\n      } catch (error) {\\r\\n        if (currentTask !== null) {\\r\\n          var currentTime = exports.unstable_now();\\r\\n          markTaskErrored(currentTask, currentTime);\\r\\n          currentTask.isQueued = false;\\r\\n        }\\r\\n\\r\\n        throw error;\\r\\n      }\\r\\n    } else {\\r\\n      // No catch in prod codepath.\\r\\n      return workLoop(hasTimeRemaining, initialTime);\\r\\n    }\\r\\n  } finally {\\r\\n    currentTask = null;\\r\\n    currentPriorityLevel = previousPriorityLevel;\\r\\n    isPerformingWork = false;\\r\\n\\r\\n    {\\r\\n      var _currentTime = exports.unstable_now();\\r\\n\\r\\n      markSchedulerSuspended(_currentTime);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction workLoop(hasTimeRemaining, initialTime) {\\r\\n  var currentTime = initialTime;\\r\\n  advanceTimers(currentTime);\\r\\n  currentTask = peek(taskQueue);\\r\\n\\r\\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\\r\\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\\r\\n      // This currentTask hasn't expired, and we've reached the deadline.\\r\\n      break;\\r\\n    }\\r\\n\\r\\n    var callback = currentTask.callback;\\r\\n\\r\\n    if (callback !== null) {\\r\\n      currentTask.callback = null;\\r\\n      currentPriorityLevel = currentTask.priorityLevel;\\r\\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\\r\\n      markTaskRun(currentTask, currentTime);\\r\\n      var continuationCallback = callback(didUserCallbackTimeout);\\r\\n      currentTime = exports.unstable_now();\\r\\n\\r\\n      if (typeof continuationCallback === 'function') {\\r\\n        currentTask.callback = continuationCallback;\\r\\n        markTaskYield(currentTask, currentTime);\\r\\n      } else {\\r\\n        {\\r\\n          markTaskCompleted(currentTask, currentTime);\\r\\n          currentTask.isQueued = false;\\r\\n        }\\r\\n\\r\\n        if (currentTask === peek(taskQueue)) {\\r\\n          pop(taskQueue);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      advanceTimers(currentTime);\\r\\n    } else {\\r\\n      pop(taskQueue);\\r\\n    }\\r\\n\\r\\n    currentTask = peek(taskQueue);\\r\\n  } // Return whether there's additional work\\r\\n\\r\\n\\r\\n  if (currentTask !== null) {\\r\\n    return true;\\r\\n  } else {\\r\\n    var firstTimer = peek(timerQueue);\\r\\n\\r\\n    if (firstTimer !== null) {\\r\\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\\r\\n  switch (priorityLevel) {\\r\\n    case ImmediatePriority:\\r\\n    case UserBlockingPriority:\\r\\n    case NormalPriority:\\r\\n    case LowPriority:\\r\\n    case IdlePriority:\\r\\n      break;\\r\\n\\r\\n    default:\\r\\n      priorityLevel = NormalPriority;\\r\\n  }\\r\\n\\r\\n  var previousPriorityLevel = currentPriorityLevel;\\r\\n  currentPriorityLevel = priorityLevel;\\r\\n\\r\\n  try {\\r\\n    return eventHandler();\\r\\n  } finally {\\r\\n    currentPriorityLevel = previousPriorityLevel;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_next(eventHandler) {\\r\\n  var priorityLevel;\\r\\n\\r\\n  switch (currentPriorityLevel) {\\r\\n    case ImmediatePriority:\\r\\n    case UserBlockingPriority:\\r\\n    case NormalPriority:\\r\\n      // Shift down to normal priority\\r\\n      priorityLevel = NormalPriority;\\r\\n      break;\\r\\n\\r\\n    default:\\r\\n      // Anything lower than normal priority should remain at the current level.\\r\\n      priorityLevel = currentPriorityLevel;\\r\\n      break;\\r\\n  }\\r\\n\\r\\n  var previousPriorityLevel = currentPriorityLevel;\\r\\n  currentPriorityLevel = priorityLevel;\\r\\n\\r\\n  try {\\r\\n    return eventHandler();\\r\\n  } finally {\\r\\n    currentPriorityLevel = previousPriorityLevel;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_wrapCallback(callback) {\\r\\n  var parentPriorityLevel = currentPriorityLevel;\\r\\n  return function () {\\r\\n    // This is a fork of runWithPriority, inlined for performance.\\r\\n    var previousPriorityLevel = currentPriorityLevel;\\r\\n    currentPriorityLevel = parentPriorityLevel;\\r\\n\\r\\n    try {\\r\\n      return callback.apply(this, arguments);\\r\\n    } finally {\\r\\n      currentPriorityLevel = previousPriorityLevel;\\r\\n    }\\r\\n  };\\r\\n}\\r\\n\\r\\nfunction timeoutForPriorityLevel(priorityLevel) {\\r\\n  switch (priorityLevel) {\\r\\n    case ImmediatePriority:\\r\\n      return IMMEDIATE_PRIORITY_TIMEOUT;\\r\\n\\r\\n    case UserBlockingPriority:\\r\\n      return USER_BLOCKING_PRIORITY;\\r\\n\\r\\n    case IdlePriority:\\r\\n      return IDLE_PRIORITY;\\r\\n\\r\\n    case LowPriority:\\r\\n      return LOW_PRIORITY_TIMEOUT;\\r\\n\\r\\n    case NormalPriority:\\r\\n    default:\\r\\n      return NORMAL_PRIORITY_TIMEOUT;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\\r\\n  var currentTime = exports.unstable_now();\\r\\n  var startTime;\\r\\n  var timeout;\\r\\n\\r\\n  if (typeof options === 'object' && options !== null) {\\r\\n    var delay = options.delay;\\r\\n\\r\\n    if (typeof delay === 'number' && delay > 0) {\\r\\n      startTime = currentTime + delay;\\r\\n    } else {\\r\\n      startTime = currentTime;\\r\\n    }\\r\\n\\r\\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\\r\\n  } else {\\r\\n    timeout = timeoutForPriorityLevel(priorityLevel);\\r\\n    startTime = currentTime;\\r\\n  }\\r\\n\\r\\n  var expirationTime = startTime + timeout;\\r\\n  var newTask = {\\r\\n    id: taskIdCounter++,\\r\\n    callback: callback,\\r\\n    priorityLevel: priorityLevel,\\r\\n    startTime: startTime,\\r\\n    expirationTime: expirationTime,\\r\\n    sortIndex: -1\\r\\n  };\\r\\n\\r\\n  {\\r\\n    newTask.isQueued = false;\\r\\n  }\\r\\n\\r\\n  if (startTime > currentTime) {\\r\\n    // This is a delayed task.\\r\\n    newTask.sortIndex = startTime;\\r\\n    push(timerQueue, newTask);\\r\\n\\r\\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\\r\\n      // All tasks are delayed, and this is the task with the earliest delay.\\r\\n      if (isHostTimeoutScheduled) {\\r\\n        // Cancel an existing timeout.\\r\\n        cancelHostTimeout();\\r\\n      } else {\\r\\n        isHostTimeoutScheduled = true;\\r\\n      } // Schedule a timeout.\\r\\n\\r\\n\\r\\n      requestHostTimeout(handleTimeout, startTime - currentTime);\\r\\n    }\\r\\n  } else {\\r\\n    newTask.sortIndex = expirationTime;\\r\\n    push(taskQueue, newTask);\\r\\n\\r\\n    {\\r\\n      markTaskStart(newTask, currentTime);\\r\\n      newTask.isQueued = true;\\r\\n    } // Schedule a host callback, if needed. If we're already performing work,\\r\\n    // wait until the next time we yield.\\r\\n\\r\\n\\r\\n    if (!isHostCallbackScheduled && !isPerformingWork) {\\r\\n      isHostCallbackScheduled = true;\\r\\n      requestHostCallback(flushWork);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return newTask;\\r\\n}\\r\\n\\r\\nfunction unstable_pauseExecution() {\\r\\n}\\r\\n\\r\\nfunction unstable_continueExecution() {\\r\\n\\r\\n  if (!isHostCallbackScheduled && !isPerformingWork) {\\r\\n    isHostCallbackScheduled = true;\\r\\n    requestHostCallback(flushWork);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction unstable_getFirstCallbackNode() {\\r\\n  return peek(taskQueue);\\r\\n}\\r\\n\\r\\nfunction unstable_cancelCallback(task) {\\r\\n  {\\r\\n    if (task.isQueued) {\\r\\n      var currentTime = exports.unstable_now();\\r\\n      markTaskCanceled(task, currentTime);\\r\\n      task.isQueued = false;\\r\\n    }\\r\\n  } // Null out the callback to indicate the task has been canceled. (Can't\\r\\n  // remove from the queue because you can't remove arbitrary nodes from an\\r\\n  // array based heap, only the first one.)\\r\\n\\r\\n\\r\\n  task.callback = null;\\r\\n}\\r\\n\\r\\nfunction unstable_getCurrentPriorityLevel() {\\r\\n  return currentPriorityLevel;\\r\\n}\\r\\n\\r\\nfunction unstable_shouldYield() {\\r\\n  var currentTime = exports.unstable_now();\\r\\n  advanceTimers(currentTime);\\r\\n  var firstTask = peek(taskQueue);\\r\\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\\r\\n}\\r\\n\\r\\nvar unstable_requestPaint = requestPaint;\\r\\nvar unstable_Profiling =  {\\r\\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\\r\\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\\r\\n  sharedProfilingBuffer: sharedProfilingBuffer\\r\\n} ;\\r\\n\\r\\nexports.unstable_IdlePriority = IdlePriority;\\r\\nexports.unstable_ImmediatePriority = ImmediatePriority;\\r\\nexports.unstable_LowPriority = LowPriority;\\r\\nexports.unstable_NormalPriority = NormalPriority;\\r\\nexports.unstable_Profiling = unstable_Profiling;\\r\\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\\r\\nexports.unstable_cancelCallback = unstable_cancelCallback;\\r\\nexports.unstable_continueExecution = unstable_continueExecution;\\r\\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\\r\\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\\r\\nexports.unstable_next = unstable_next;\\r\\nexports.unstable_pauseExecution = unstable_pauseExecution;\\r\\nexports.unstable_requestPaint = unstable_requestPaint;\\r\\nexports.unstable_runWithPriority = unstable_runWithPriority;\\r\\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\\r\\nexports.unstable_shouldYield = unstable_shouldYield;\\r\\nexports.unstable_wrapCallback = unstable_wrapCallback;\\r\\n  })();\\r\\n}\\r\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"push\",\"heap\",\"node\",\"index\",\"length\",\"parentIndex\",\"parent\",\"undefined\",\"compare\",\"peek\",\"first\",\"pop\",\"last\",\"i\",\"leftIndex\",\"left\",\"rightIndex\",\"right\",\"a\",\"b\",\"diff\",\"sortIndex\",\"id\",\"logEvent\",\"entries\",\"eventLog\",\"offset\",\"eventLogIndex\",\"eventLogSize\",\"MAX_EVENT_LOG_SIZE\",\"console\",\"stopLoggingProfilingEvents\",\"newEventLog\",\"Int32Array\",\"set\",\"eventLogBuffer\",\"buffer\",\"markTaskStart\",\"task\",\"ms\",\"profilingState\",\"QUEUE_SIZE\",\"TaskStartEvent\",\"priorityLevel\",\"advanceTimers\",\"currentTime\",\"timer\",\"timerQueue\",\"callback\",\"startTime\",\"expirationTime\",\"taskQueue\",\"isQueued\",\"handleTimeout\",\"isHostTimeoutScheduled\",\"isHostCallbackScheduled\",\"requestHostCallback\",\"flushWork\",\"firstTimer\",\"requestHostTimeout\",\"hasTimeRemaining\",\"initialTime\",\"SchedulerResumeEvent\",\"mainThreadIdCounter\",\"cancelHostTimeout\",\"isPerformingWork\",\"previousPriorityLevel\",\"currentPriorityLevel\",\"currentTask\",\"shouldYieldToHost\",\"didUserCallbackTimeout\",\"runIdCounter\",\"PRIORITY\",\"CURRENT_TASK_ID\",\"CURRENT_RUN_ID\",\"TaskRunEvent\",\"continuationCallback\",\"unstable_now\",\"NoPriority\",\"TaskYieldEvent\",\"TaskCompleteEvent\",\"error\",\"TaskErrorEvent\",\"_currentTime\",\"SchedulerSuspendEvent\",\"timeoutForPriorityLevel\",\"ImmediatePriority\",\"IMMEDIATE_PRIORITY_TIMEOUT\",\"UserBlockingPriority\",\"USER_BLOCKING_PRIORITY\",\"IdlePriority\",\"maxSigned31BitInt\",\"LowPriority\",\"LOW_PRIORITY_TIMEOUT\",\"NORMAL_PRIORITY_TIMEOUT\",\"window\",\"MessageChannel\",\"_callback\",\"_timeoutID\",\"_flushCallback\",\"hasRemainingTime\",\"e\",\"setTimeout\",\"Date\",\"now\",\"exports.unstable_now\",\"cb\",\"clearTimeout\",\"requestPaint\",\"unstable_forceFrameRate\",\"exports.unstable_forceFrameRate\",\"performance\",\"_Date\",\"_setTimeout\",\"_clearTimeout\",\"cancelAnimationFrame\",\"requestAnimationFrame\",\"_initialTime\",\"isMessageLoopRunning\",\"scheduledHostCallback\",\"taskTimeoutID\",\"yieldInterval\",\"deadline\",\"fps\",\"Math\",\"floor\",\"channel\",\"port\",\"port2\",\"port1\",\"onmessage\",\"performWorkUntilDeadline\",\"hasMoreWork\",\"postMessage\",\"sharedProfilingBuffer\",\"SharedArrayBuffer\",\"profilingStateSize\",\"BYTES_PER_ELEMENT\",\"ArrayBuffer\",\"taskIdCounter\",\"NormalPriority\",\"unstable_Profiling\",\"startLoggingProfilingEvents\",\"INITIAL_EVENT_LOG_SIZE\",\"unstable_IdlePriority\",\"unstable_ImmediatePriority\",\"unstable_LowPriority\",\"unstable_NormalPriority\",\"unstable_UserBlockingPriority\",\"unstable_cancelCallback\",\"TaskCancelEvent\",\"unstable_continueExecution\",\"unstable_getCurrentPriorityLevel\",\"unstable_getFirstCallbackNode\",\"unstable_next\",\"eventHandler\",\"unstable_pauseExecution\",\"unstable_requestPaint\",\"unstable_runWithPriority\",\"unstable_scheduleCallback\",\"options\",\"delay\",\"timeout\",\"newTask\",\"unstable_shouldYield\",\"firstTask\",\"unstable_wrapCallback\",\"parentPriorityLevel\",\"apply\",\"arguments\"]\n}\n"]