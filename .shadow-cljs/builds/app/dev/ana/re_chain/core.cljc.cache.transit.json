["^ ","~:output",["^ ","~:js","goog.provide('re_chain.core');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.walk');\r\ngoog.require('re_frame.core');\r\ngoog.require('cljs.spec.alpha');\r\ngoog.require('expound.alpha');\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null)),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.maybe_impl(cljs.core.vector_QMARK_,new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null)),cljs.core.fn_QMARK_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null)),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null)], null)));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"handlers\",\"re-chain.core/handlers\",-1445792565),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870)),cljs.spec.alpha.rep_impl(new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870),new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870)));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"named-handlers\",\"re-chain.core/named-handlers\",2067005217),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843),new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870))),cljs.spec.alpha.rep_impl(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843),new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword_QMARK_,new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(\"re-chain.core\",\"handler\",\"re-chain.core/handler\",391159870)], null))));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"effect-present?\",\"re-chain.core/effect-present?\",-86427686),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),cljs.core.fn_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"get-dispatch\",\"re-chain.core/get-dispatch\",-1059183627),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),cljs.core.fn_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"set-dispatch\",\"re-chain.core/set-dispatch\",1763259951),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),cljs.core.fn_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"link\",\"re-chain.core/link\",-1450310738),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"re-chain.core\",\"effect-present?\",\"re-chain.core/effect-present?\",-86427686),new cljs.core.Keyword(\"re-chain.core\",\"get-dispatch\",\"re-chain.core/get-dispatch\",-1059183627),new cljs.core.Keyword(\"re-chain.core\",\"set-dispatch\",\"re-chain.core/set-dispatch\",1763259951)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"re-chain.core\",\"effect-present?\",\"re-chain.core/effect-present?\",-86427686),new cljs.core.Keyword(\"re-chain.core\",\"get-dispatch\",\"re-chain.core/get-dispatch\",-1059183627),new cljs.core.Keyword(\"re-chain.core\",\"set-dispatch\",\"re-chain.core/set-dispatch\",1763259951)], null),null,null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__28631){\r\nreturn cljs.core.map_QMARK_(G__28631);\r\n}),(function (G__28631){\r\nreturn cljs.core.contains_QMARK_(G__28631,new cljs.core.Keyword(null,\"effect-present?\",\"effect-present?\",131752804));\r\n}),(function (G__28631){\r\nreturn cljs.core.contains_QMARK_(G__28631,new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793));\r\n}),(function (G__28631){\r\nreturn cljs.core.contains_QMARK_(G__28631,new cljs.core.Keyword(null,\"set-dispatch\",\"set-dispatch\",2115263401));\r\n})], null),(function (G__28631){\r\nreturn ((cljs.core.map_QMARK_(G__28631)) && (cljs.core.contains_QMARK_(G__28631,new cljs.core.Keyword(null,\"effect-present?\",\"effect-present?\",131752804))) && (cljs.core.contains_QMARK_(G__28631,new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793))) && (cljs.core.contains_QMARK_(G__28631,new cljs.core.Keyword(null,\"set-dispatch\",\"set-dispatch\",2115263401))));\r\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"re-chain.core\",\"effect-present?\",\"re-chain.core/effect-present?\",-86427686),new cljs.core.Keyword(\"re-chain.core\",\"get-dispatch\",\"re-chain.core/get-dispatch\",-1059183627),new cljs.core.Keyword(\"re-chain.core\",\"set-dispatch\",\"re-chain.core/set-dispatch\",1763259951)], null),null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effect-present?\",\"effect-present?\",131752804),new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793),new cljs.core.Keyword(null,\"set-dispatch\",\"set-dispatch\",2115263401)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"effect-present?\",\"effect-present?\",131752804))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"set-dispatch\",\"set-dispatch\",2115263401)))], null),null])));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"re-chain.core\",\"links\",\"re-chain.core/links\",1676670008),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"re-chain.core\",\"link\",\"re-chain.core/link\",-1450310738))),cljs.spec.alpha.nilable_impl(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"re-chain.core\",\"link\",\"re-chain.core/link\",-1450310738)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"re-chain.core\",\"link\",\"re-chain.core/link\",-1450310738),new cljs.core.Keyword(\"re-chain.core\",\"link\",\"re-chain.core/link\",-1450310738),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__28712){\r\nreturn cljs.core.coll_QMARK_(G__28712);\r\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"re-chain.core\",\"link\",\"re-chain.core/link\",-1450310738))], null),null),null));\r\nre_chain.core.links = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\r\nre_chain.core.step_id = (function re_chain$core$step_id(event_id,counter){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),counter)){\r\nreturn event_id;\r\n} else {\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1([cljs.core.namespace(event_id),(cljs.core.truth_(cljs.core.namespace(event_id))?\"/\":null),cljs.core.name(event_id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(counter)].join(''));\r\n}\r\n});\r\nre_chain.core.replace_pointers = (function re_chain$core$replace_pointers(next_event,effects){\r\nreturn clojure.walk.postwalk((function (x){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.Keyword(\"kee-frame.core\",\"next\",\"kee-frame.core/next\",-2058375215))){\r\nvar G__28717_28922 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__28718_28923 = \"Keyword :kee-frame.core/next is deprecated, use :chain/next instead.\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$2 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$2(G__28717_28922,G__28718_28923) : re_frame.core.console.call(null,G__28717_28922,G__28718_28923));\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_((function (){var fexpr__28719 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"kee-frame.core\",\"next\",\"kee-frame.core/next\",-2058375215),null,new cljs.core.Keyword(\"chain\",\"next\",\"chain/next\",-480219822),null], null), null);\r\nreturn (fexpr__28719.cljs$core$IFn$_invoke$arity$1 ? fexpr__28719.cljs$core$IFn$_invoke$arity$1(x) : fexpr__28719.call(null,x));\r\n})())){\r\nreturn next_event;\r\n} else {\r\nreturn x;\r\n}\r\n}),effects);\r\n});\r\nre_chain.core.single_valid_link = (function re_chain$core$single_valid_link(effects){\r\nvar links = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p__28724){\r\nvar map__28725 = p__28724;\r\nvar map__28725__$1 = (((((!((map__28725 == null))))?(((((map__28725.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28725.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28725):map__28725);\r\nvar get_dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28725__$1,new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793));\r\nvar effect_present_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28725__$1,new cljs.core.Keyword(null,\"effect-present?\",\"effect-present?\",131752804));\r\nvar and__4174__auto__ = (effect_present_QMARK_.cljs$core$IFn$_invoke$arity$1 ? effect_present_QMARK_.cljs$core$IFn$_invoke$arity$1(effects) : effect_present_QMARK_.call(null,effects));\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn cljs.core.not((get_dispatch.cljs$core$IFn$_invoke$arity$1 ? get_dispatch.cljs$core$IFn$_invoke$arity$1(effects) : get_dispatch.call(null,effects)));\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n}),cljs.core.deref(re_chain.core.links));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(links))){\r\nreturn cljs.core.first(links);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nre_chain.core.dispatch_empty_or_next = (function re_chain$core$dispatch_empty_or_next(effects,next_event_id){\r\nif(((cljs.core.not(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009).cljs$core$IFn$_invoke$arity$1(effects))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009).cljs$core$IFn$_invoke$arity$1(effects)),next_event_id)))){\r\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793),new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),new cljs.core.Keyword(null,\"set-dispatch\",\"set-dispatch\",2115263401),(function (effects__$1,event){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(effects__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),event);\r\n})], null);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nre_chain.core.single_valid_next = (function re_chain$core$single_valid_next(next_event_id,effects){\r\nvar xs = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p__28735){\r\nvar map__28736 = p__28735;\r\nvar map__28736__$1 = (((((!((map__28736 == null))))?(((((map__28736.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28736.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28736):map__28736);\r\nvar get_dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28736__$1,new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793));\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(next_event_id,cljs.core.first((get_dispatch.cljs$core$IFn$_invoke$arity$1 ? get_dispatch.cljs$core$IFn$_invoke$arity$1(effects) : get_dispatch.call(null,effects))));\r\n}),cljs.core.deref(re_chain.core.links));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(xs))){\r\nreturn cljs.core.first(xs);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nre_chain.core.select_link = (function re_chain$core$select_link(next_event_id,effects){\r\nvar or__4185__auto__ = re_chain.core.single_valid_next(next_event_id,effects);\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nvar or__4185__auto____$1 = re_chain.core.single_valid_link(effects);\r\nif(cljs.core.truth_(or__4185__auto____$1)){\r\nreturn or__4185__auto____$1;\r\n} else {\r\nvar or__4185__auto____$2 = re_chain.core.dispatch_empty_or_next(effects,next_event_id);\r\nif(cljs.core.truth_(or__4185__auto____$2)){\r\nreturn or__4185__auto____$2;\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Not possible to select next in chain\",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"next-id\",\"next-id\",-224240762),next_event_id,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009).cljs$core$IFn$_invoke$arity$1(effects),new cljs.core.Keyword(null,\"links\",\"links\",-654507394),cljs.core.deref(re_chain.core.links)], null));\r\n}\r\n}\r\n}\r\n});\r\nre_chain.core.make_event = (function re_chain$core$make_event(next_event_id,previous_event_params,p__28751){\r\nvar vec__28752 = p__28751;\r\nvar seq__28753 = cljs.core.seq(vec__28752);\r\nvar first__28754 = cljs.core.first(seq__28753);\r\nvar seq__28753__$1 = cljs.core.next(seq__28753);\r\nvar _ = first__28754;\r\nvar params = seq__28753__$1;\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [next_event_id], null),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(previous_event_params,params));\r\n});\r\nre_chain.core.link_effects = (function re_chain$core$link_effects(next_event_id,event_params,effects){\r\nif(cljs.core.truth_(next_event_id)){\r\nvar temp__5733__auto__ = re_chain.core.select_link(next_event_id,effects);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar map__28761 = temp__5733__auto__;\r\nvar map__28761__$1 = (((((!((map__28761 == null))))?(((((map__28761.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28761.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28761):map__28761);\r\nvar set_dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28761__$1,new cljs.core.Keyword(null,\"set-dispatch\",\"set-dispatch\",2115263401));\r\nvar get_dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28761__$1,new cljs.core.Keyword(null,\"get-dispatch\",\"get-dispatch\",-807865793));\r\nvar G__28768 = effects;\r\nvar G__28769 = re_chain.core.make_event(next_event_id,event_params,(get_dispatch.cljs$core$IFn$_invoke$arity$1 ? get_dispatch.cljs$core$IFn$_invoke$arity$1(effects) : get_dispatch.call(null,effects)));\r\nreturn (set_dispatch.cljs$core$IFn$_invoke$arity$2 ? set_dispatch.cljs$core$IFn$_invoke$arity$2(G__28768,G__28769) : set_dispatch.call(null,G__28768,G__28769));\r\n} else {\r\nreturn effects;\r\n}\r\n} else {\r\nreturn effects;\r\n}\r\n});\r\nre_chain.core.effect_postprocessor = (function re_chain$core$effect_postprocessor(next_event_id){\r\nreturn (function (ctx){\r\nvar event_params = cljs.core.rest((function (){var G__28780 = ctx;\r\nvar G__28781 = new cljs.core.Keyword(null,\"event\",\"event\",301435442);\r\nreturn (re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$2 ? re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$2(G__28780,G__28781) : re_frame.core.get_coeffect.call(null,G__28780,G__28781));\r\n})());\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(function (p1__28776_SHARP_){\r\nreturn re_chain.core.link_effects(next_event_id,event_params,re_chain.core.replace_pointers(next_event_id,p1__28776_SHARP_));\r\n}));\r\n});\r\n});\r\nre_chain.core.chain_interceptor = (function re_chain$core$chain_interceptor(current_event_id,next_event_id){\r\nvar G__28784 = new cljs.core.Keyword(null,\"id\",\"id\",-1388402092);\r\nvar G__28785 = current_event_id;\r\nvar G__28786 = new cljs.core.Keyword(null,\"after\",\"after\",594996914);\r\nvar G__28787 = re_chain.core.effect_postprocessor(next_event_id);\r\nreturn (re_frame.core.__GT_interceptor.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.__GT_interceptor.cljs$core$IFn$_invoke$arity$4(G__28784,G__28785,G__28786,G__28787) : re_frame.core.__GT_interceptor.call(null,G__28784,G__28785,G__28786,G__28787));\r\n});\r\nre_chain.core.collect_named_event_instructions = (function re_chain$core$collect_named_event_instructions(step_fns){\r\nvar chain_handlers = cljs.spec.alpha.conform(new cljs.core.Keyword(\"re-chain.core\",\"named-handlers\",\"re-chain.core/named-handlers\",2067005217),step_fns);\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"cljs.spec.alpha\",\"invalid\",\"cljs.spec.alpha/invalid\",-1220295119),chain_handlers)){\r\nexpound.alpha.expound(new cljs.core.Keyword(\"re-chain.core\",\"named-handlers\",\"re-chain.core/named-handlers\",2067005217),step_fns);\r\n\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid named chain. Should be pairs of keyword and handler\",cljs.spec.alpha.explain_data(new cljs.core.Keyword(\"re-chain.core\",\"named-handlers\",\"re-chain.core/named-handlers\",2067005217),step_fns));\r\n} else {\r\n}\r\n\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__28793){\r\nvar vec__28795 = p__28793;\r\nvar map__28798 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28795,(0),null);\r\nvar map__28798__$1 = (((((!((map__28798 == null))))?(((((map__28798.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28798.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28798):map__28798);\r\nvar handler_1 = map__28798__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28798__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar event_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28798__$1,new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843));\r\nvar handler_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28795,(1),null);\r\nvar next_id = new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(handler_2);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(handler_1,new cljs.core.Keyword(null,\"next-id\",\"next-id\",-224240762),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(handler_2),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951).cljs$core$IFn$_invoke$arity$1(event_handler),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204).cljs$core$IFn$_invoke$arity$1(event_handler),new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076),re_chain.core.chain_interceptor(id,next_id)], 0));\r\n}),cljs.core.partition.cljs$core$IFn$_invoke$arity$4((2),(1),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [null], null),chain_handlers));\r\n});\r\nre_chain.core.collect_event_instructions = (function re_chain$core$collect_event_instructions(key,step_fns){\r\nvar chain_handlers = cljs.spec.alpha.conform(new cljs.core.Keyword(\"re-chain.core\",\"handlers\",\"re-chain.core/handlers\",-1445792565),step_fns);\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"cljs.spec.alpha\",\"invalid\",\"cljs.spec.alpha/invalid\",-1220295119),chain_handlers)){\r\nexpound.alpha.expound(new cljs.core.Keyword(\"re-chain.core\",\"handlers\",\"re-chain.core/handlers\",-1445792565),step_fns);\r\n\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid chain. Should be functions or pairs of interceptor and function\",cljs.spec.alpha.explain_data(new cljs.core.Keyword(\"re-chain.core\",\"handlers\",\"re-chain.core/handlers\",-1445792565),step_fns));\r\n} else {\r\n}\r\n\r\nreturn cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((function (counter,p__28804){\r\nvar vec__28806 = p__28804;\r\nvar current_handler = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28806,(0),null);\r\nvar next_handler = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28806,(1),null);\r\nvar map__28809 = current_handler;\r\nvar map__28809__$1 = (((((!((map__28809 == null))))?(((((map__28809.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28809.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28809):map__28809);\r\nvar fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28809__$1,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\r\nvar interceptors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28809__$1,new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951));\r\nvar id = re_chain.core.step_id(key,counter);\r\nvar next_id = (cljs.core.truth_(next_handler)?re_chain.core.step_id(key,(counter + (1))):null);\r\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),id,new cljs.core.Keyword(null,\"next-id\",\"next-id\",-224240762),next_id,new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843),fn,new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076),re_chain.core.chain_interceptor(id,next_id)], null);\r\n}),cljs.core.partition.cljs$core$IFn$_invoke$arity$4((2),(1),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [null], null),chain_handlers));\r\n});\r\nre_chain.core.register_chain_handlers_BANG_ = (function re_chain$core$register_chain_handlers_BANG_(instructions,user_interceptors){\r\nvar seq__28815 = cljs.core.seq(instructions);\r\nvar chunk__28816 = null;\r\nvar count__28817 = (0);\r\nvar i__28818 = (0);\r\nwhile(true){\r\nif((i__28818 < count__28817)){\r\nvar map__28827 = chunk__28816.cljs$core$IIndexed$_nth$arity$2(null,i__28818);\r\nvar map__28827__$1 = (((((!((map__28827 == null))))?(((((map__28827.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28827.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28827):map__28827);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28827__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar event_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28827__$1,new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843));\r\nvar interceptor = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28827__$1,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076));\r\nvar interceptors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28827__$1,new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951));\r\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [interceptor], null),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(user_interceptors,interceptors)),event_handler);\r\n\r\n\r\nvar G__28960 = seq__28815;\r\nvar G__28961 = chunk__28816;\r\nvar G__28962 = count__28817;\r\nvar G__28963 = (i__28818 + (1));\r\nseq__28815 = G__28960;\r\nchunk__28816 = G__28961;\r\ncount__28817 = G__28962;\r\ni__28818 = G__28963;\r\ncontinue;\r\n} else {\r\nvar temp__5735__auto__ = cljs.core.seq(seq__28815);\r\nif(temp__5735__auto__){\r\nvar seq__28815__$1 = temp__5735__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__28815__$1)){\r\nvar c__4609__auto__ = cljs.core.chunk_first(seq__28815__$1);\r\nvar G__28965 = cljs.core.chunk_rest(seq__28815__$1);\r\nvar G__28966 = c__4609__auto__;\r\nvar G__28967 = cljs.core.count(c__4609__auto__);\r\nvar G__28968 = (0);\r\nseq__28815 = G__28965;\r\nchunk__28816 = G__28966;\r\ncount__28817 = G__28967;\r\ni__28818 = G__28968;\r\ncontinue;\r\n} else {\r\nvar map__28841 = cljs.core.first(seq__28815__$1);\r\nvar map__28841__$1 = (((((!((map__28841 == null))))?(((((map__28841.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28841.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28841):map__28841);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28841__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar event_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28841__$1,new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843));\r\nvar interceptor = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28841__$1,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076));\r\nvar interceptors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28841__$1,new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951));\r\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [interceptor], null),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(user_interceptors,interceptors)),event_handler);\r\n\r\n\r\nvar G__28972 = cljs.core.next(seq__28815__$1);\r\nvar G__28973 = null;\r\nvar G__28974 = (0);\r\nvar G__28975 = (0);\r\nseq__28815 = G__28972;\r\nchunk__28816 = G__28973;\r\ncount__28817 = G__28974;\r\ni__28818 = G__28975;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\r\n *   will be appended to each event's interceptors.\r\n */\r\nre_chain.core.reg_chain_named_STAR_ = (function re_chain$core$reg_chain_named_STAR_(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___28976 = arguments.length;\r\nvar i__4790__auto___28977 = (0);\r\nwhile(true){\r\nif((i__4790__auto___28977 < len__4789__auto___28976)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___28977]));\r\n\r\nvar G__28978 = (i__4790__auto___28977 + (1));\r\ni__4790__auto___28977 = G__28978;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\r\nreturn re_chain.core.reg_chain_named_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\r\n});\r\n\r\n(re_chain.core.reg_chain_named_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (interceptors,step_fns){\r\nvar instructions = re_chain.core.collect_named_event_instructions(step_fns);\r\nreturn re_chain.core.register_chain_handlers_BANG_(instructions,interceptors);\r\n}));\r\n\r\n(re_chain.core.reg_chain_named_STAR_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_chain.core.reg_chain_named_STAR_.cljs$lang$applyTo = (function (seq28858){\r\nvar G__28859 = cljs.core.first(seq28858);\r\nvar seq28858__$1 = cljs.core.next(seq28858);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28859,seq28858__$1);\r\n}));\r\n\r\n/**\r\n * Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\r\n *   will be appended to each event's interceptors.\r\n */\r\nre_chain.core.reg_chain_STAR_ = (function re_chain$core$reg_chain_STAR_(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___28980 = arguments.length;\r\nvar i__4790__auto___28981 = (0);\r\nwhile(true){\r\nif((i__4790__auto___28981 < len__4789__auto___28980)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___28981]));\r\n\r\nvar G__28983 = (i__4790__auto___28981 + (1));\r\ni__4790__auto___28981 = G__28983;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((2) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((2)),(0),null)):null);\r\nreturn re_chain.core.reg_chain_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4796__auto__);\r\n});\r\n\r\n(re_chain.core.reg_chain_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (id,interceptors,step_fns){\r\nvar instructions = re_chain.core.collect_event_instructions(id,step_fns);\r\nreturn re_chain.core.register_chain_handlers_BANG_(instructions,interceptors);\r\n}));\r\n\r\n(re_chain.core.reg_chain_STAR_.cljs$lang$maxFixedArity = (2));\r\n\r\n/** @this {Function} */\r\n(re_chain.core.reg_chain_STAR_.cljs$lang$applyTo = (function (seq28880){\r\nvar G__28881 = cljs.core.first(seq28880);\r\nvar seq28880__$1 = cljs.core.next(seq28880);\r\nvar G__28882 = cljs.core.first(seq28880__$1);\r\nvar seq28880__$2 = cljs.core.next(seq28880__$1);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28881,G__28882,seq28880__$2);\r\n}));\r\n\r\n/**\r\n * re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\r\n *   of your app.\r\n * \r\n *   Parameters:\r\n * \r\n *   `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\r\n *   contain 3 keys:\r\n *   - `:effect-present?` : Is the effect present in the effects map returned from an event function?\r\n *   - `:get-dispatch` : Try to lookup the dispatch value from the effects map\r\n *   - `:set-dispatch` : Set the dispatch value in the effects map\r\n * \r\n *   Usage:\r\n *   ```\r\n *   (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\r\n *                    :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\r\n *                    :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\r\n *   ```\r\n *   \r\n */\r\nre_chain.core.configure_BANG_ = (function re_chain$core$configure_BANG_(chain_links){\r\nreturn cljs.core.reset_BANG_(re_chain.core.links,chain_links);\r\n});\r\n/**\r\n * Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\r\n *   event log.\r\n * \r\n *   Parameters:\r\n * \r\n *   `handlers`: pairs of id and event handler.\r\n * \r\n *   Usage:\r\n *   ```\r\n *   (k/reg-chain-named\r\n * \r\n *  :load-customer-data\r\n *  (fn [ctx [customer-id]]\r\n *    {:http-xhrio {:uri \"...\"}})\r\n * \r\n *  :receive-customer-data\r\n *   (fn [ctx [customer-id customer-data]]\r\n *    (assoc-in ctx [:db :customers customer-id] customer-data)))\r\n *   ```\r\n */\r\nre_chain.core.reg_chain_named = (function re_chain$core$reg_chain_named(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___28985 = arguments.length;\r\nvar i__4790__auto___28986 = (0);\r\nwhile(true){\r\nif((i__4790__auto___28986 < len__4789__auto___28985)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___28986]));\r\n\r\nvar G__28987 = (i__4790__auto___28986 + (1));\r\ni__4790__auto___28986 = G__28987;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\r\nreturn re_chain.core.reg_chain_named.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\r\n});\r\n\r\n(re_chain.core.reg_chain_named.cljs$core$IFn$_invoke$arity$variadic = (function (handlers){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(re_chain.core.reg_chain_named_STAR_,null,handlers);\r\n}));\r\n\r\n(re_chain.core.reg_chain_named.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_chain.core.reg_chain_named.cljs$lang$applyTo = (function (seq28895){\r\nvar self__4777__auto__ = this;\r\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq28895));\r\n}));\r\n\r\n/**\r\n * Register a list of re-frame fx handlers, chained together.\r\n * \r\n *   The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\r\n *   you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\r\n * \r\n *   Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\r\n *   receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\r\n *   to make all context available to the entire chain, without a complex framework or crazy scope tricks.\r\n * \r\n *   Parameters:\r\n * \r\n *   `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\r\n *   if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\r\n * \r\n *   `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`.\r\n * \r\n * \r\n *   Usage:\r\n *   ```\r\n *   (k/reg-chain\r\n *  :load-customer-data\r\n * \r\n *  (fn {ctx [customer-id]]\r\n *    {:http-xhrio {:uri    (str \"/customer/\" customer-id)\r\n *                  :method :get}})\r\n * \r\n *  (fn [cxt [customer-id customer-data]\r\n *    (assoc-in ctx [:db :customers customer-id] customer-data)))\r\n *   ```\r\n */\r\nre_chain.core.reg_chain = (function re_chain$core$reg_chain(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___28988 = arguments.length;\r\nvar i__4790__auto___28989 = (0);\r\nwhile(true){\r\nif((i__4790__auto___28989 < len__4789__auto___28988)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___28989]));\r\n\r\nvar G__28990 = (i__4790__auto___28989 + (1));\r\ni__4790__auto___28989 = G__28990;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\r\nreturn re_chain.core.reg_chain.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\r\n});\r\n\r\n(re_chain.core.reg_chain.cljs$core$IFn$_invoke$arity$variadic = (function (id,handlers){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(re_chain.core.reg_chain_STAR_,id,null,handlers);\r\n}));\r\n\r\n(re_chain.core.reg_chain.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_chain.core.reg_chain.cljs$lang$applyTo = (function (seq28898){\r\nvar G__28899 = cljs.core.first(seq28898);\r\nvar seq28898__$1 = cljs.core.next(seq28898);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28899,seq28898__$1);\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_chain/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-chain.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$expound.alpha","^Q","~$rf","~$re-frame.core","~$cljs.core","^T","~$goog","^U","~$walk","~$clojure.walk","~$e","^Q","~$s","^C","^C","^C","^W","^W","^S","^S"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^T","^T","~$s","^C","^C","^C"],"~:form",["~#list",["~$ns","^L",["^11",["^Y",["^W","~:as","^V"],["^S","^13","^R"],["^C","^13","~$s"],["^Q","^13","~$e"]]]]],"~:flags",["^ ","^Y",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^W","^S","^C","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_chain/core.cljc"],"~:compiled-at",1614037544896,"~:resource-name","re_chain/core.cljc","~:warnings",[],"~:source","(ns re-chain.core\n  (:require [clojure.walk :as walk]\n            [re-frame.core :as rf]\n            #?(:cljs [cljs.spec.alpha :as s]\n               :clj  [clojure.spec.alpha :as s])\n            [expound.alpha :as e]))\n\n(s/def ::handler (s/cat :interceptors (s/? vector?) :fn fn?))\n(s/def ::handlers (s/* ::handler))\n(s/def ::named-handlers (s/* (s/cat :id keyword? :event-handler ::handler)))\n(s/def ::effect-present? fn?)\n(s/def ::get-dispatch fn?)\n(s/def ::set-dispatch fn?)\n(s/def ::link (s/keys :req-un [::effect-present? ::get-dispatch ::set-dispatch]))\n(s/def ::links (s/nilable (s/coll-of ::link)))\n\n(def links (atom []))\n\n(defn step-id [event-id counter]\n  (if (= 0 counter)\n    event-id\n    (keyword\n      (str (namespace event-id)\n           (if (namespace event-id) \"/\")\n           (name event-id)\n           \"-\" counter))))\n\n(defn replace-pointers [next-event effects]\n  (walk/postwalk\n    (fn [x]\n      (when (= x :kee-frame.core/next)\n        (rf/console :warn \"Keyword :kee-frame.core/next is deprecated, use :chain/next instead.\"))\n      (if (#{:kee-frame.core/next :chain/next} x)\n        next-event\n        x))\n    effects))\n\n(defn single-valid-link [effects]\n  (let [links (->> @links\n                   (filter (fn [{:keys [get-dispatch effect-present?]}]\n                             (and (effect-present? effects)\n                                  (not (get-dispatch effects))))))]\n    (when (= 1 (count links))\n      (first links))))\n\n(defn dispatch-empty-or-next [effects next-event-id]\n  (when (or (not (:dispatch effects))\n            (-> effects\n                :dispatch\n                first\n                (= next-event-id)))\n    {:get-dispatch :dispatch\n     :set-dispatch (fn [effects event] (assoc effects :dispatch event))}))\n\n(defn single-valid-next [next-event-id effects]\n  (let [xs (->> @links\n                (filter (fn [{:keys [get-dispatch]}]\n                          (= next-event-id\n                             (-> effects get-dispatch first)))))]\n    (when (= 1 (count xs))\n      (first xs))))\n\n(defn select-link [next-event-id effects]\n  (or\n    (single-valid-next next-event-id effects)\n    (single-valid-link effects)\n    (dispatch-empty-or-next effects next-event-id)\n    (throw\n      (ex-info \"Not possible to select next in chain\"\n               {:next-id  next-event-id\n                :dispatch (:dispatch effects)\n                :links    @links}))))\n\n(defn make-event [next-event-id previous-event-params [_ & params]]\n  (into [next-event-id] (concat previous-event-params params)))\n\n(defn link-effects [next-event-id event-params effects]\n  (if next-event-id\n    (if-let [{:keys [set-dispatch get-dispatch]} (select-link next-event-id effects)]\n      (set-dispatch effects (make-event next-event-id event-params (get-dispatch effects)))\n      effects)\n    effects))\n\n(defn effect-postprocessor [next-event-id]\n  (fn [ctx]\n    (let [event-params (rest (rf/get-coeffect ctx :event))]\n      (update ctx :effects #(->> %\n                                 (replace-pointers next-event-id)\n                                 (link-effects next-event-id event-params))))))\n\n(defn chain-interceptor [current-event-id next-event-id]\n  (rf/->interceptor\n    :id current-event-id\n    :after (effect-postprocessor next-event-id)))\n\n(defn collect-named-event-instructions [step-fns]\n  (let [chain-handlers (s/conform ::named-handlers step-fns)]\n    (when (= ::s/invalid chain-handlers)\n      (e/expound ::named-handlers step-fns)\n      (throw (ex-info \"Invalid named chain. Should be pairs of keyword and handler\" (s/explain-data ::named-handlers step-fns))))\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map (fn [[{:keys [id event-handler] :as handler-1} handler-2]]\n                (let [next-id (:id handler-2)]\n                  (assoc handler-1 :next-id (:id handler-2)\n                                   :interceptors (:interceptors event-handler)\n                                   :event-handler (:fn event-handler)\n                                   :interceptor (chain-interceptor id next-id))))))))\n\n(defn collect-event-instructions [key step-fns]\n  (let [chain-handlers (s/conform ::handlers step-fns)]\n    (when (= ::s/invalid chain-handlers)\n      (e/expound ::handlers step-fns)\n      (throw (ex-info \"Invalid chain. Should be functions or pairs of interceptor and function\" (s/explain-data ::handlers step-fns))))\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map-indexed (fn [counter [current-handler next-handler]]\n                        (let [{:keys [fn interceptors]} current-handler\n                              id (step-id key counter)\n                              next-id (when next-handler (step-id key (inc counter)))]\n                          {:id            id\n                           :next-id       next-id\n                           :event-handler fn\n                           :interceptors  interceptors\n                           :interceptor   (chain-interceptor id next-id)}))))))\n\n(defn register-chain-handlers! [instructions user-interceptors]\n  (doseq [{:keys [id event-handler interceptor interceptors]} instructions]\n    (rf/reg-event-fx id (into [interceptor] (concat user-interceptors interceptors)) event-handler)))\n\n(defn reg-chain-named*\n  \"Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [interceptors & step-fns]\n  (let [instructions (collect-named-event-instructions step-fns)]\n    (register-chain-handlers! instructions interceptors)))\n\n(defn reg-chain*\n  \"Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [id interceptors & step-fns]\n  (let [instructions (collect-event-instructions id step-fns)]\n    (register-chain-handlers! instructions interceptors)))\n\n(defn configure!\n  \"re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  \"\n  [chain-links]\n  (reset! links chain-links))\n\n(defn reg-chain-named\n  \"Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \\\"...\\\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [& handlers]\n  (apply reg-chain-named* nil handlers))\n\n(defn reg-chain\n  \"Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \\\"/customer/\\\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [id & handlers]\n  (apply reg-chain* id nil handlers))","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/vector?","cljs.core/fn?","cljs.spec.alpha/rep-impl","cljs.core/keyword?","cljs.spec.alpha/map-spec-impl","G__28631","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__28712","cljs.core/coll?","re-chain.core/links","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","re-chain.core/step-id","event-id","counter","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/namespace","cljs.core/name","re-chain.core/replace-pointers","next-event","effects","clojure.walk/postwalk","x","G__28717","G__28718","re-frame.core/console","fexpr__28719","re-chain.core/single-valid-link","links","cljs.core/deref","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__28724","map__28725","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","get-dispatch","effect-present?","and__4174__auto__","cljs.core/not","cljs.core/count","cljs.core/first","re-chain.core/dispatch-empty-or-next","next-event-id","event","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","re-chain.core/single-valid-next","xs","p__28735","map__28736","re-chain.core/select-link","or__4185__auto__","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__28751","vec__28752","seq__28753","cljs.core/seq","first__28754","cljs.core/next","re-chain.core/make-event","previous-event-params","_","params","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","re-chain.core/link-effects","event-params","temp__5733__auto__","map__28761","set-dispatch","G__28768","G__28769","re-chain.core/effect-postprocessor","ctx","cljs.core/rest","G__28780","G__28781","re-frame.core/get-coeffect","p1__28776#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","re-chain.core/chain-interceptor","current-event-id","G__28784","G__28785","G__28786","G__28787","re-frame.core/->interceptor","re-chain.core/collect-named-event-instructions","step-fns","chain-handlers","cljs.spec.alpha/conform","expound.alpha/expound","cljs.spec.alpha/explain-data","cljs.core.partition.cljs$core$IFn$_invoke$arity$4","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__28793","vec__28795","map__28798","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","id","event-handler","handler-1","handler-2","next-id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-chain.core/collect-event-instructions","key","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p__28804","vec__28806","current-handler","next-handler","map__28809","fn","interceptors","re-chain.core/register-chain-handlers!","instructions","user-interceptors","seq__28815","chunk__28816","count__28817","i__28818","map__28827","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__28841","interceptor","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-chain.core/reg-chain-named*","seq28858","G__28859","self__4776__auto__","re-chain.core/reg-chain*","seq28880","G__28881","G__28882","re-chain.core/configure!","chain-links","cljs.core/reset!","re-chain.core/reg-chain-named","seq28895","self__4777__auto__","handlers","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","re-chain.core/reg-chain","seq28898","G__28899","cljs.core.apply.cljs$core$IFn$_invoke$arity$4"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1580517115000,1580517115000,1614013553954,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^18","reagent/impl/batching.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$reagent.debug","~$reagent.impl.util"]]],["^18","goog/dom/tagname.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.dom.HtmlElement"]]],["^18","goog/labs/useragent/platform.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.labs.userAgent.util","~$goog.string"]]],["^18","expound/util.cljc"],[1580517113934,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T"]]],["^18","cljs/spec/gen/alpha.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$goog.Uri"]]],["^18","goog/math/math.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.array","~$goog.asserts"]]],["^18","goog/html/trustedtypes.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","goog/string/stringformat.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1Q"]]],["^18","goog/labs/useragent/browser.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1P","~$goog.object","~$goog.string.internal"]]],["^18","goog/html/safeurl.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1V"]]],["^18","re_frame/loggers.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$clojure.set"]]],["^18","goog/array/array.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T"]]],["^1E","node_modules/prop-types/checkPropTypes.js"],[1580517115000,1580517115000,1614013553936,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^18","reagent/impl/util.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$clojure.string"]]],["^18","expound/problems.cljc"],[1580517113934,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$expound.paths","^C","^W","^23","~$expound.printer","~$expound.ansi"]]],["^18","goog/useragent/useragent.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1P","~$goog.reflect","^1Q"]]],["^18","re_frame/router.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$re-frame.events","~$re-frame.interop","~$re-frame.loggers","~$re-frame.trace"]]],["^18","goog/debug/error.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","re_frame/registrar.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2<","^2="]]],["^18","goog/dom/nodetype.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","cljs/pprint.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^23","^1Q","~$goog.string.StringBuffer"]]],["^18","expound/alpha.cljc"],[1580517113934,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$expound.problems","^C","^23","^21","^W","~$goog.string.format","^1Q","^25","~$expound.util","^26","^G"]]],["^1E","node_modules/scheduler/cjs/scheduler.development.js"],[1580517115000,1580517115000,1614013553978,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J"]]],["^18","reagent/ratom.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^1N","^1M","~$reagent.impl.batching","^21","^1U"]]],["^1E","node_modules/scheduler/cjs/scheduler.production.min.js"],[1580517115000,1580517115000,1614013553978,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J"]]],["^18","re_frame/interop.cljs"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^18","expound/ansi.cljc"],[1580517113934,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^23"]]],["^18","goog/string/typedstring.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^1E","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1580517115000,1580517115000,1614013553976,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J"]]],["^1E","node_modules/react/index.js"],[1580517115000,1580517115000,1614013553970,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^18","shadow/js.js"],[1580517115096,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","goog/object/object.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","reagent/impl/template.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^?","^23","^W","^1N","~$reagent.impl.component","^2C","^2F","^1M","^1U"]]],["^18","goog/dom/asserts.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T"]]],["^1E","node_modules/react-dom/cjs/react-dom.production.min.js"],[1580517115000,1580517115000,1614013553952,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1580517115000,1580517109000],["^1E","node_modules/react/cjs/react.development.js"],[1580517115000,1580517115000,1614013553969,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","^2J","~$module$node_modules$prop_types$checkPropTypes"]]],["^18","re_frame/events.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$re-frame.db","~$re-frame.utils","^2<","~$re-frame.registrar","^2=","~$re-frame.interceptor","^2>"]]],["^18","goog/math/long.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","^2:"]]],["^18","goog/html/trustedresourceurl.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","~$goog.html.trustedtypes","^1Y","^1Z","^1[","^20"]]],["^18","goog/string/internal.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^1E","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1580517115000,1580517115000,1614013553976,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J"]]],["^18","goog/functions/functions.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","re_chain/core.cljc"],[1580771652981,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^W","^S","^C","^Q"]]],["^18","goog/html/safestyle.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","~$goog.html.SafeUrl","^1[","^20","^1V"]]],["^18","goog/dom/safe.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2S","^1X","~$goog.html.uncheckedconversions","^1[","^1V"]]],["^18","expound/paths.cljc"],[1580517113934,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^C","^2B"]]],["^18","reagent/impl/component.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^1U","^?","^1N","^2C","^2F","^1M"]]],["^18","clojure/walk.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T"]]],["^18","goog/structs/map.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^18","goog/html/safehtml.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","~$goog.dom.TagName","~$goog.dom.tags","^2W","^2X","~$goog.html.SafeStyleSheet","^2S","^1X","^2R","^1Y","^1Z","^27","^1U","^1[","^20","^1V"]]],["^18","goog/dom/tags.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1U"]]],["^18","goog/math/size.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^1E","node_modules/scheduler/index.js"],[1580517115000,1580517115000,1614013553978,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^18","goog/labs/useragent/engine.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1P","^1Q"]]],["^18","goog/dom/dom.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^30","~$goog.dom.safe","^2V","^2Y","~$goog.math.Coordinate","~$goog.math.Size","^1U","^1Q","~$goog.string.Unicode","~$goog.userAgent"]]],["^18","goog/asserts/asserts.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.debug.Error","^36"]]],["^18","goog/uri/uri.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","^1Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","goog/i18n/bidi.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^1E","node_modules/object-assign/index.js"],[1580517115000,1580517115000,1614013553922,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J"]]],["^18","re_frame/db.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2<"]]],["^18","cljs/spec/alpha.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^1U","^W","^G","^23"]]],["^18","goog/fs/url.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","goog/base.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",[]]],["^18","goog/structs/structs.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1U"]]],["^18","clojure/string.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^1Q","^2?"]]],["^18","re_frame/cofx.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2N","^2Q","^2P","^2="]]],["^1E","node_modules/react/cjs/react.production.min.js"],[1580517115000,1580517115000,1614013553970,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","^2J"]]],["^18","goog/debug/entrypointregistry.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T"]]],["^18","goog/string/string.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^37","^2Y","^1[","^1V"]]],["^18","re_frame/interceptor.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2=","^2<","^2>","^21"]]],["^18","clojure/data.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^21"]]],["^18","goog/reflect/reflect.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","goog/labs/useragent/util.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1V"]]],["^18","expound/printer.cljc"],[1580517113934,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^23","^C","^E","^W","^21","^2B","^26"]]],["^18","reagent/core.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^?","~$reagent.impl.template","^2I","^1N","^2C","^2F","^1M","~$reagent.dom"]]],["^18","goog/string/stringbuffer.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","goog/math/coordinate.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.math"]]],["^18","re_frame/std_interceptors.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2Q","^2=","^2P","^2N","~$clojure.data","~$re-frame.cofx","^2O","^2>"]]],["^18","goog/iter/iter.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","^2U","^3D"]]],["^18","goog/async/nexttick.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","~$goog.debug.entryPointRegistry","~$goog.dom","^30","^37","^2U","^2V","^1X","^27","^28","^1["]]],["^18","goog/html/uncheckedconversions.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","^2V","^2W","^2X","^32","^2S","^1X","^1[","^1V"]]],["^18","re_frame/utils.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2="]]],["^18","reagent/dom.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^A","^1N","^3B","^2C","^2F"]]],["^18","re_frame/fx.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","~$re-frame.router","^2N","^2Q","^2<","^2;","^2P","^2=","^2>"]]],["^1E","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1580517115000,1580517115000,1614013553938,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J"]]],["^18","goog/dom/htmlelement.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U"]]],["^18","cljs/core.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^1Q","^1U","^1S","^1R","^2?"]]],["^18","goog/html/safescript.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","^2R","^1[","^20"]]],["^18","reagent/debug.cljs"],[1584279713756,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T"]]],["^18","goog/html/safestylesheet.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","^2X","^1U","^1[","^20","^1V"]]],["^18","goog/math/integer.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^2:"]]],["^18","goog/dom/browserfeature.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^3;"]]],["^1E","node_modules/scheduler/tracing.js"],[1580517115000,1580517115000,1614013553979,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1E","node_modules/react-dom/cjs/react-dom.development.js"],[1580517115000,1580517115000,1614013553951,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^1J","^?","^2J","^2K","^2M","~$module$node_modules$scheduler$tracing"]]],["^18","clojure/set.cljs"],[1580517109662,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T"]]],["^18","goog/uri/utils.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1S","^1T","^1Q"]]],["^18","goog/string/const.js"],[1580517112058,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^1T","^20"]]],["^18","re_frame/trace.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2<","^2=","^2U"]]],["^18","re_frame/subs.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2N","^2<","^2=","^2O","^2P","^2>"]]],["^18","re_frame/core.cljc"],[1584278805509,"^1F",["^ ","^1G",null,"^1H",["^J",[]],"^1I",["^U","^T","^2;","~$re-frame.subs","^2<","^2N","~$re-frame.fx","^3F","^3I","^2=","^2P","^2Q","~$re-frame.std-interceptors","^21"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/spec/alpha.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1584278805000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1584279713000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1584279713000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/pprint.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1584278805000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1584279713000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1584278805000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/spec/gen/alpha.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1584279713000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1580517109000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_chain/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^W","~$e","^Q","~$s","^C","^C","^C","^W","^W","^S","^S"],"^X",["^J",["^Y"]],"^Z",null,"~:defs",["^ ","~$reg-chain-named*",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_chain/core.cljc","^7",131,"^8",7,"^9",131,"^:",23,"~:arglists",["^11",["~$quote",["^11",[["~$interceptors","~$&","~$step-fns"]]]]],"~:doc","Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors.","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^11",["^4P","^4Q"]]],"^4N",["^11",[["^4P","~$&","^4Q"]]],"~:arglists-meta",["^11",[null]]]],"^K","~$re-chain.core/reg-chain-named*","^6","re_chain/core.cljc","^:",23,"^4S",["^ ","^4T",true,"^4U",1,"^4V",1,"^4W",[["^11",["^4P","^4Q"]]],"^4N",["^11",[["^4P","~$&","^4Q"]]],"^4X",["^11",[null]]],"^4W",[["^11",["^4P","^4Q"]]],"~:protocol-impl",null,"^4U",1,"^4X",["^11",[null]],"^8",1,"^4T",true,"~:methods",[["^ ","^4U",1,"^4T",true,"~:tag","~$clj-nil"]],"^7",131,"~:ret-tag","~$any","^9",131,"^4V",1,"~:fn-var",true,"^4N",["^11",[["^4P","~$&","^4Q"]]],"^4R","Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors."],"~$step-id",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",19,"^8",7,"^9",19,"^:",14,"^4N",["^11",["^4O",["^11",[["~$event-id","~$counter"]]]]]],"^K","~$re-chain.core/step-id","^6","re_chain/core.cljc","^:",14,"^4W",["^11",[["^56","^57"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",19,"^52",["^J",[null,"~$cljs.core/Keyword","^51"]],"^9",19,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^56","^57"]]]]]],"~$register-chain-handlers!",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",127,"^8",7,"^9",127,"^:",31,"^4N",["^11",["^4O",["^11",[["~$instructions","~$user-interceptors"]]]]]],"^K","~$re-chain.core/register-chain-handlers!","^6","re_chain/core.cljc","^:",31,"^4W",["^11",[["^5;","^5<"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",127,"^52","^51","^9",127,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^5;","^5<"]]]]]],"~$reg-chain*",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",138,"^8",7,"^9",138,"^:",17,"^4N",["^11",["^4O",["^11",[["~$id","^4P","~$&","^4Q"]]]]],"^4R","Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors.","^4S",["^ ","^4T",true,"^4U",2,"^4V",2,"^4W",[["^11",["^5?","^4P","^4Q"]]],"^4N",["^11",[["^5?","^4P","~$&","^4Q"]]],"^4X",["^11",[null]]]],"^K","~$re-chain.core/reg-chain*","^6","re_chain/core.cljc","^:",17,"^4S",["^ ","^4T",true,"^4U",2,"^4V",2,"^4W",[["^11",["^5?","^4P","^4Q"]]],"^4N",["^11",[["^5?","^4P","~$&","^4Q"]]],"^4X",["^11",[null]]],"^4W",[["^11",["^5?","^4P","^4Q"]]],"^4Z",null,"^4U",2,"^4X",["^11",[null]],"^8",1,"^4T",true,"^4[",[["^ ","^4U",2,"^4T",true,"^50","^51"]],"^7",138,"^52","^53","^9",138,"^4V",2,"^54",true,"^4N",["^11",[["^5?","^4P","~$&","^4Q"]]],"^4R","Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors."],"~$links",["^ ","^K","~$re-chain.core/links","^6","re_chain/core.cljc","^7",17,"^8",1,"^9",17,"^:",11,"^5",["^ ","^6","re_chain/core.cljc","^7",17,"^8",6,"^9",17,"^:",11],"^50","~$cljs.core/Atom"],"~$select-link",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",63,"^8",7,"^9",63,"^:",18,"^4N",["^11",["^4O",["^11",[["~$next-event-id","~$effects"]]]]]],"^K","~$re-chain.core/select-link","^6","re_chain/core.cljc","^:",18,"^4W",["^11",[["^5E","^5F"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",63,"^52",["^J",["^53","~$cljs.core/IMap"]],"^9",63,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^5E","^5F"]]]]]],"~$make-event",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",74,"^8",7,"^9",74,"^:",17,"^4N",["^11",["^4O",["^11",[["^5E","~$previous-event-params",["~$_","~$&","~$params"]]]]]]],"^K","~$re-chain.core/make-event","^6","re_chain/core.cljc","^:",17,"^4W",["^11",[["^5E","^5J","~$p__28751"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",74,"^52",["^J",[null,"~$clj","^53"]],"^9",74,"^4V",3,"^54",true,"^4N",["^11",["^4O",["^11",[["^5E","^5J",["~$_","~$&","^5K"]]]]]]],"~$link-effects",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",77,"^8",7,"^9",77,"^:",19,"^4N",["^11",["^4O",["^11",[["^5E","~$event-params","^5F"]]]]]],"^K","~$re-chain.core/link-effects","^6","re_chain/core.cljc","^:",19,"^4W",["^11",[["^5E","^5P","^5F"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",77,"^52",["^J",[null,"^53"]],"^9",77,"^4V",3,"^54",true,"^4N",["^11",["^4O",["^11",[["^5E","^5P","^5F"]]]]]],"~$configure!",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",145,"^8",7,"^9",145,"^:",17,"^4N",["^11",["^4O",["^11",[["~$chain-links"]]]]],"^4R","re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  "],"^K","~$re-chain.core/configure!","^6","re_chain/core.cljc","^:",17,"^4W",["^11",[["^5S"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",145,"^52",["^J",[null,"^53"]],"^9",145,"^4V",1,"^54",true,"^4N",["^11",["^4O",["^11",[["^5S"]]]]],"^4R","re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  "],"~$collect-event-instructions",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",110,"^8",7,"^9",110,"^:",33,"^4N",["^11",["^4O",["^11",[["~$key","^4Q"]]]]]],"^K","~$re-chain.core/collect-event-instructions","^6","re_chain/core.cljc","^:",33,"^4W",["^11",[["^5V","^4Q"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",110,"^52","^53","^9",110,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^5V","^4Q"]]]]]],"~$single-valid-next",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",55,"^8",7,"^9",55,"^:",24,"^4N",["^11",["^4O",["^11",[["^5E","^5F"]]]]]],"^K","~$re-chain.core/single-valid-next","^6","re_chain/core.cljc","^:",24,"^4W",["^11",[["^5E","^5F"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",55,"^52",["^J",["^53","^51"]],"^9",55,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^5E","^5F"]]]]]],"~$dispatch-empty-or-next",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",46,"^8",7,"^9",46,"^:",29,"^4N",["^11",["^4O",["^11",[["^5F","^5E"]]]]]],"^K","~$re-chain.core/dispatch-empty-or-next","^6","re_chain/core.cljc","^:",29,"^4W",["^11",[["^5F","^5E"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",46,"^52",["^J",["^5H","^51"]],"^9",46,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^5F","^5E"]]]]]],"~$reg-chain-named",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",167,"^8",7,"^9",167,"^:",22,"^4N",["^11",["^4O",["^11",[["~$&","~$handlers"]]]]],"^4R","Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \"...\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```","^4S",["^ ","^4T",true,"^4U",0,"^4V",0,"^4W",[["^11",["^61"]]],"^4N",["^11",[["~$&","^61"]]],"^4X",["^11",[null]]]],"^K","~$re-chain.core/reg-chain-named","^6","re_chain/core.cljc","^:",22,"^4S",["^ ","^4T",true,"^4U",0,"^4V",0,"^4W",[["^11",["^61"]]],"^4N",["^11",[["~$&","^61"]]],"^4X",["^11",[null]]],"^4W",[["^11",["^61"]]],"^4Z",null,"^4U",0,"^4X",["^11",[null]],"^8",1,"^4T",true,"^4[",[["^ ","^4U",0,"^4T",true,"^50","^53"]],"^7",167,"^52","^53","^9",167,"^4V",0,"^54",true,"^4N",["^11",[["~$&","^61"]]],"^4R","Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \"...\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```"],"~$effect-postprocessor",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",84,"^8",7,"^9",84,"^:",27,"^4N",["^11",["^4O",["^11",[["^5E"]]]]]],"^K","~$re-chain.core/effect-postprocessor","^6","re_chain/core.cljc","^:",27,"^4W",["^11",[["^5E"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",84,"^52","~$function","^9",84,"^4V",1,"^54",true,"^4N",["^11",["^4O",["^11",[["^5E"]]]]]],"~$replace-pointers",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",28,"^8",7,"^9",28,"^:",23,"^4N",["^11",["^4O",["^11",[["~$next-event","^5F"]]]]]],"^K","~$re-chain.core/replace-pointers","^6","re_chain/core.cljc","^:",23,"^4W",["^11",[["^67","^5F"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",28,"^52","^53","^9",28,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^67","^5F"]]]]]],"~$reg-chain",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",190,"^8",7,"^9",190,"^:",16,"^4N",["^11",["^4O",["^11",[["^5?","~$&","^61"]]]]],"^4R","Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \"/customer/\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```","^4S",["^ ","^4T",true,"^4U",1,"^4V",1,"^4W",[["^11",["^5?","^61"]]],"^4N",["^11",[["^5?","~$&","^61"]]],"^4X",["^11",[null]]]],"^K","~$re-chain.core/reg-chain","^6","re_chain/core.cljc","^:",16,"^4S",["^ ","^4T",true,"^4U",1,"^4V",1,"^4W",[["^11",["^5?","^61"]]],"^4N",["^11",[["^5?","~$&","^61"]]],"^4X",["^11",[null]]],"^4W",[["^11",["^5?","^61"]]],"^4Z",null,"^4U",1,"^4X",["^11",[null]],"^8",1,"^4T",true,"^4[",[["^ ","^4U",1,"^4T",true,"^50","^53"]],"^7",190,"^52","^53","^9",190,"^4V",1,"^54",true,"^4N",["^11",[["^5?","~$&","^61"]]],"^4R","Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \"/customer/\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```"],"~$single-valid-link",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",38,"^8",7,"^9",38,"^:",24,"^4N",["^11",["^4O",["^11",[["^5F"]]]]]],"^K","~$re-chain.core/single-valid-link","^6","re_chain/core.cljc","^:",24,"^4W",["^11",[["^5F"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",38,"^52",["^J",["^53","^51"]],"^9",38,"^4V",1,"^54",true,"^4N",["^11",["^4O",["^11",[["^5F"]]]]]],"~$chain-interceptor",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",91,"^8",7,"^9",91,"^:",24,"^4N",["^11",["^4O",["^11",[["~$current-event-id","^5E"]]]]]],"^K","~$re-chain.core/chain-interceptor","^6","re_chain/core.cljc","^:",24,"^4W",["^11",[["^6>","^5E"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",91,"^52","^53","^9",91,"^4V",2,"^54",true,"^4N",["^11",["^4O",["^11",[["^6>","^5E"]]]]]],"~$collect-named-event-instructions",["^ ","^4M",null,"^5",["^ ","^6","re_chain/core.cljc","^7",96,"^8",7,"^9",96,"^:",39,"^4N",["^11",["^4O",["^11",[["^4Q"]]]]]],"^K","~$re-chain.core/collect-named-event-instructions","^6","re_chain/core.cljc","^:",39,"^4W",["^11",[["^4Q"]]],"^4Z",null,"^4X",["^11",[null,null]],"^8",1,"^4T",false,"^7",96,"^52","~$cljs.core/LazySeq","^9",96,"^4V",1,"^54",true,"^4N",["^11",["^4O",["^11",[["^4Q"]]]]]]],"^[",["^ ","^T","^T","~$s","^C","^C","^C"],"~:cljs.analyzer/constants",["^ ","^X",["^J",["~$cljs.spec.alpha/*","~:req-un","~:opt-un","~:re-chain.core/named-handlers","~:gfn","~$cljs.core/keyword?","~:pred-exprs","~:keys-pred","~:fn","~$cljs.core/vector?","~:interceptor","~:effect-present?","~:opt-keys","~:event-handler","~:next-id","~$cljs.spec.alpha/coll-of","~$cljs.spec.alpha/cat","~:cljs.spec.alpha/kind-form","~:warn","~:req-specs","~:set-dispatch","~:re-chain.core/handlers","~$cljs.spec.alpha/nilable","~$cljs.core/contains?","~$cljs.core/map?","~:cljs.spec.alpha/cpred","~:re-chain.core/link","~$%","~:re-chain.core/set-dispatch","~$cljs.core/fn?","~$cljs.spec.alpha/keys","~:dispatch","~:cljs.spec.alpha/invalid","~:req","~:kee-frame.core/next","~:chain/next","~:event","~:after","~:id","~:effects","~:req-keys","~:re-chain.core/get-dispatch","~$cljs.core/fn","~:opt-specs","~:re-chain.core/links","~:pred-forms","~:interceptors","~:re-chain.core/effect-present?","~:cljs.spec.alpha/conform-all","~:re-chain.core/handler","~:links","~:cljs.spec.alpha/describe","~:opt","~:get-dispatch","~$cljs.spec.alpha/?"]],"~:order",["^7H","^6T","^7E","^7M","^6M","^6L","^74","^6Y","^6D","^6G","^7=","^6I","^6Q","^7F","^7@","^73","^72","^75","^6E","^6F","^6H","^6J","^6K","^6P","^6W","^78","^7?","^7B","^7D","^7K","^6O","^7L","^6X","^7A","~$%","^70","^6[","^7C","^6Z","^6S","^6U","^71","^7G","^7J","^79","^6V","^7:","^76","^6R","^7I","^7;","^7>","^7<","^77","^6N"]],"^14",["^ ","^Y",["^J",[]]],"^15",["^ "],"^16",["^U","^T","^W","^S","^C","^Q"]],"^N","^L","~:ns-specs",["^ ","^6G",["^11",["^6D",["^11",["^6T","^7=","^6I","^6Q","^7H"]]]],"^6Y",["^11",["^6D","^7H"]],"^72",["^11",["^75","^6E",["^7F","^7@","^73"]]],"^73","^74","^7@","^74","^7C",["^11",["^6Z",["^11",["^6S","^72"]]]],"^7F","^74","^7H",["^11",["^6T","^7E",["^11",["^7M","^6M"]],"^6L","^74"]]],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^1D",[["^7Q","~:static-fns"],true,["^7Q","~:shadow-tweaks"],null,["^7Q","~:elide-asserts"],false,["^7Q","~:optimize-constants"],null,["^7Q","^1;"],null,["^7Q","~:external-config"],null,["^7Q","~:tooling-config"],null,["^7Q","~:emit-constants"],null,["^7Q","~:load-tests"],null,["^7Q","~:form-size-threshold"],null,["^7Q","~:infer-externs"],true,["^7Q","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7Q","~:fn-invoke-direct"],null,["^7Q","~:source-map"],"/dev/null"]]]