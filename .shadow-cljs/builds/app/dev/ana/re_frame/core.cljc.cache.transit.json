["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\r\nre_frame.core.dispatch = re_frame.router.dispatch;\r\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\r\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\r\nre_frame.core.subscribe = re_frame.subs.subscribe;\r\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\r\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\r\n/**\r\n * This is a low level, advanced function.  You should probably be\r\n *   using reg-sub instead.\r\n *   Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\r\n */\r\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\r\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\r\n});\r\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\r\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\r\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\r\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\r\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (db event) -> db\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of this\r\n * chain.\r\n */\r\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\r\nvar G__37625 = arguments.length;\r\nswitch (G__37625) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n}));\r\n\r\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\r\n}));\r\n\r\n(re_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of the\r\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\r\n * and, later, action effects.\r\n */\r\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\r\nvar G__37633 = arguments.length;\r\nswitch (G__37633) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n}));\r\n\r\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\r\n}));\r\n\r\n(re_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (context-map event-vector) -> context-map\r\n * \r\n *   This form of registration is almost never used. \r\n */\r\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\r\nvar G__37635 = arguments.length;\r\nswitch (G__37635) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n}));\r\n\r\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\r\n}));\r\n\r\n(re_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\r\nre_frame.core.debug = re_frame.std_interceptors.debug;\r\nre_frame.core.path = re_frame.std_interceptors.path;\r\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\r\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\r\nre_frame.core.after = re_frame.std_interceptors.after;\r\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\r\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\r\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\r\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\r\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\r\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\r\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\r\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\r\nre_frame.core.console = re_frame.loggers.console;\r\n/**\r\n * Checkpoints the state of re-frame and returns a function which, when\r\n *   later called, will restore re-frame to that checkpointed state.\r\n * \r\n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\r\n *   \r\n */\r\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\r\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\r\nvar app_db = cljs.core.deref(re_frame.db.app_db);\r\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\r\nreturn (function (){\r\nvar original_subs_37667 = cljs.core.set(cljs.core.vals(subs_cache));\r\nvar current_subs_37668 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\r\nvar seq__37636_37673 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_37668,original_subs_37667));\r\nvar chunk__37637_37674 = null;\r\nvar count__37638_37675 = (0);\r\nvar i__37639_37676 = (0);\r\nwhile(true){\r\nif((i__37639_37676 < count__37638_37675)){\r\nvar sub_37677 = chunk__37637_37674.cljs$core$IIndexed$_nth$arity$2(null,i__37639_37676);\r\nre_frame.interop.dispose_BANG_(sub_37677);\r\n\r\n\r\nvar G__37678 = seq__37636_37673;\r\nvar G__37679 = chunk__37637_37674;\r\nvar G__37680 = count__37638_37675;\r\nvar G__37681 = (i__37639_37676 + (1));\r\nseq__37636_37673 = G__37678;\r\nchunk__37637_37674 = G__37679;\r\ncount__37638_37675 = G__37680;\r\ni__37639_37676 = G__37681;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___37682 = cljs.core.seq(seq__37636_37673);\r\nif(temp__5753__auto___37682){\r\nvar seq__37636_37684__$1 = temp__5753__auto___37682;\r\nif(cljs.core.chunked_seq_QMARK_(seq__37636_37684__$1)){\r\nvar c__4638__auto___37685 = cljs.core.chunk_first(seq__37636_37684__$1);\r\nvar G__37686 = cljs.core.chunk_rest(seq__37636_37684__$1);\r\nvar G__37687 = c__4638__auto___37685;\r\nvar G__37688 = cljs.core.count(c__4638__auto___37685);\r\nvar G__37689 = (0);\r\nseq__37636_37673 = G__37686;\r\nchunk__37637_37674 = G__37687;\r\ncount__37638_37675 = G__37688;\r\ni__37639_37676 = G__37689;\r\ncontinue;\r\n} else {\r\nvar sub_37690 = cljs.core.first(seq__37636_37684__$1);\r\nre_frame.interop.dispose_BANG_(sub_37690);\r\n\r\n\r\nvar G__37691 = cljs.core.next(seq__37636_37684__$1);\r\nvar G__37692 = null;\r\nvar G__37693 = (0);\r\nvar G__37694 = (0);\r\nseq__37636_37673 = G__37691;\r\nchunk__37637_37674 = G__37692;\r\ncount__37638_37675 = G__37693;\r\ni__37639_37676 = G__37694;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\r\n\r\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\r\n\r\nreturn null;\r\n});\r\n});\r\n/**\r\n * Remove all events queued for processing\r\n */\r\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null);\r\n});\r\n/**\r\n * Registers a function `f` to be called after each event is processed\r\n * `f` will be called with two arguments:\r\n *  - `event`: a vector. The event just processed.\r\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\r\n * \r\n * This is useful in advanced cases like:\r\n *   - you are implementing a complex bootstrap pipeline\r\n *   - you want to create your own handling infrastructure, with perhaps multiple\r\n *     handlers for the one event, etc.  Hook in here.\r\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\r\n * \r\n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\r\n *   be used at \"remove time\" to get rid of the right callback.\r\n *   \r\n */\r\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\r\nvar G__37641 = arguments.length;\r\nswitch (G__37641) {\r\ncase 1:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\r\n}));\r\n\r\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\r\n}));\r\n\r\n(re_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2);\r\n\r\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\r\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\r\n});\r\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\r\nvar args__4824__auto__ = [];\r\nvar len__4818__auto___37696 = arguments.length;\r\nvar i__4819__auto___37698 = (0);\r\nwhile(true){\r\nif((i__4819__auto___37698 < len__4818__auto___37696)){\r\nargs__4824__auto__.push((arguments[i__4819__auto___37698]));\r\n\r\nvar G__37699 = (i__4819__auto___37698 + (1));\r\ni__4819__auto___37698 = G__37699;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4825__auto__ = ((((0) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4825__auto__);\r\n});\r\n\r\n(re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__37647_37700 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__37648_37701 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\r\nvar G__37649_37702 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\r\nvar G__37650_37703 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__37647_37700,G__37648_37701,G__37649_37702,G__37650_37703) : re_frame.core.console.call(null,G__37647_37700,G__37648_37701,G__37649_37702,G__37650_37703));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\r\n}));\r\n\r\n(re_frame.core.register_handler.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.core.register_handler.cljs$lang$applyTo = (function (seq37646){\r\nvar self__4806__auto__ = this;\r\nreturn self__4806__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq37646));\r\n}));\r\n\r\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\r\nvar args__4824__auto__ = [];\r\nvar len__4818__auto___37704 = arguments.length;\r\nvar i__4819__auto___37705 = (0);\r\nwhile(true){\r\nif((i__4819__auto___37705 < len__4818__auto___37704)){\r\nargs__4824__auto__.push((arguments[i__4819__auto___37705]));\r\n\r\nvar G__37707 = (i__4819__auto___37705 + (1));\r\ni__4819__auto___37705 = G__37707;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4825__auto__ = ((((0) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4825__auto__);\r\n});\r\n\r\n(re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__37653_37711 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__37654_37712 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\r\nvar G__37655_37713 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\r\nvar G__37656_37714 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__37653_37711,G__37654_37712,G__37655_37713,G__37656_37714) : re_frame.core.console.call(null,G__37653_37711,G__37654_37712,G__37655_37713,G__37656_37714));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\r\n}));\r\n\r\n(re_frame.core.register_sub.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.core.register_sub.cljs$lang$applyTo = (function (seq37652){\r\nvar self__4806__auto__ = this;\r\nreturn self__4806__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq37652));\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^O","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^V","~$fx","~$re-frame.fx","~$re-frame.events","^Y","~$loggers","~$re-frame.loggers","^X","^X","~$re-frame.registrar","^10","~$cljs.core","^11","~$interceptor","^V","~$goog","^13","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^10","^15","^15","^S","^S","~$events","^Y","~$re-frame.std-interceptors","^1:","^[","^[","^Q","^Q","~$interop","^O","~$std-interceptors","^1:","^U","^U","^17","^17"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^1:","~$fx-handler->interceptor","^1:","~$ctx-handler->interceptor","^1:"],"~:require-macros",["^ ","^11","^11"],"~:form",["~#list",["~$ns","^J",["^1E",["^1>",["^Y","~:as","^19"],["^Q","^1G","^P"],["^O","^1G","^1;"],["^17","^1G","^16"],["^X","^1G","^W"],["^U","^1G","^T"],["^15","^1G","^14"],["^[","^1G","^Z"],["^10","^1G","^18"],["^V","^1G","^12"],["^1:","^1G","^1<","~:refer",["^1@","^1A","^1B"]],["^S","^1G","^R"]]]]],"~:flags",["^ ","^1>",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^13","^11","^Y","^Q","^O","^17","^X","^U","^15","^[","^10","^V","^1:","^S"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1626984420409,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","re-frame.router/dispatch","re-frame.core/dispatch-sync","re-frame.router/dispatch-sync","re-frame.core/reg-sub","re-frame.subs/reg-sub","re-frame.core/subscribe","re-frame.subs/subscribe","re-frame.core/clear-sub","cljs.core.partial","re-frame.registrar/clear-handlers","re-frame.subs/kind","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","query-id","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","re-frame.fx/reg-fx","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","re-frame.core/inject-cofx","re-frame.cofx/inject-cofx","re-frame.core/clear-cofx","re-frame.cofx/kind","var_args","G__37625","re-frame.core/reg-event-db","js/Error","id","handler","re_frame.core.reg_event_db","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/db-handler->interceptor","G__37633","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx","re-frame.std-interceptors/fx-handler->interceptor","G__37635","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx","re-frame.std-interceptors/ctx-handler->interceptor","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__37636","cljs.core/seq","chunk__37637","count__37638","i__37639","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__37641","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback","re-frame.core/remove-post-event-callback","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","re-frame.core/register-handler","seq37646","self__4806__auto__","args","G__37647","G__37648","G__37649","G__37650","cljs.core.apply","re-frame.core/register-sub","seq37652","G__37653","G__37654","G__37655","G__37656"]],"~:used-vars",["^H",["~$re-frame.router/purge","~$re-frame.core/add-post-event-callback","~$re-frame.core/remove-post-event-callback","~$re-frame.interceptor/get-effect","~$re-frame.fx/kind","~$re-frame.core/clear-sub","~$re-frame.fx/reg-fx","~$re-frame.db/app-db","~$re-frame.core/clear-event","~$re-frame.core/register-sub","~$re-frame.core/assoc-coeffect","~$re-frame.fx/do-fx","~$re-frame.interop/dispose!","~$cljs.core/partial","~$re-frame.loggers/set-loggers!","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.core/dispatch","~$re-frame.interceptor/->interceptor","~$re-frame.core/on-changes","~$cljs.core/count","~$cljs.core/deref","~$re-frame.events/register","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$re-frame.events/kind","~$re-frame.core/enrich","~$re-frame.registrar/clear-handlers","~$re-frame.loggers/console","~$re-frame.core/get-coeffect","~$re-frame.core/assoc-effect","~$cljs.core/chunk-rest","~$re-frame.std-interceptors/trim-v","~$re-frame.core/reg-event-db","~$cljs.core/set","~$re-frame.core/reg-sub-raw","~$re-frame.core/dispatch-sync","~$re-frame.interceptor/enqueue","~$re-frame.core/subscribe","~$re-frame.std-interceptors/db-handler->interceptor","~$re-frame.core/trim-v","~$cljs.core/reset!","~$re-frame.registrar/register-handler","~$re-frame.subs/clear-subscription-cache!","~$re-frame.subs/kind","~$re-frame.core/reg-fx","~$re-frame.core/purge-event-queue","~$re-frame.core/get-effect","~$cljs.core/vals","~$re-frame.std-interceptors/enrich","~$re-frame.subs/subscribe","~$re-frame.core/clear-cofx","~$re-frame.core/reg-event-ctx","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/-nth","~$re-frame.core/reg-event-fx","~$re-frame.interceptor/assoc-coeffect","~$re-frame.core/clear-fx","~$re-frame.cofx/reg-cofx","~$clojure.set/difference","~$re-frame.cofx/inject-cofx","~$re-frame.std-interceptors/fx-handler->interceptor","~$re-frame.subs/reg-sub","~$re-frame.cofx/kind","~$re-frame.core/register-handler","~$re-frame.router/dispatch-sync","~$re-frame.std-interceptors/after","~$re-frame.router/add-post-event-callback","~$re-frame.core/->interceptor","~$re-frame.core/inject-cofx","~$cljs.core/next","~$re-frame.core/set-loggers!","~$re-frame.interceptor/get-coeffect","~$re-frame.subs/query->reaction","~$re-frame.core/make-restore-fn","~$re-frame.interceptor/assoc-effect","~$re-frame.core/clear-subscription-cache!","~$re-frame.core/reg-sub","~$re-frame.cofx/inject-db","~$re-frame.router/event-queue","~$re-frame.std-interceptors/path","~$re-frame.core/console","~$re-frame.router/remove-post-event-callback","~$re-frame.core/reg-cofx","~$re-frame.router/dispatch","~$cljs.core/first","~$re-frame.core/path","~$re-frame.core/enqueue","~$re-frame.core/debug","~$js/Error","~$re-frame.std-interceptors/on-changes","~$re-frame.registrar/kind->id->handler","~$cljs.core/chunked-seq?","~$re-frame.core/after"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1M","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","~$reagent.debug","~$reagent.impl.util"]]],["^1M","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.dom.HtmlElement"]]],["^1M","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.labs.userAgent.util","~$goog.string"]]],["^1M","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.array","~$goog.asserts"]]],["^1M","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4A","~$goog.object","~$goog.string.internal"]]],["^1M","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4F"]]],["^1M","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^S"]]],["^1M","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D"]]],["^46","node_modules/prop-types/checkPropTypes.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1M","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","~$clojure.string"]]],["^1M","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4A","~$goog.reflect","^4B"]]],["^1M","re_frame/router.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^Y","^O","^[","~$re-frame.trace"]]],["^1M","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","re_frame/registrar.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^O","^["]]],["^1M","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^46","node_modules/scheduler/cjs/scheduler.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","7d8513ea2b82a7b8f00a1fd322704005205046bc","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;"]]],["^1M","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^4?","^4>","~$reagent.impl.batching","^S","^4E"]]],["^46","node_modules/scheduler/cjs/scheduler.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","19e07f39891e78ec50904d00e33146e92404379f","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;"]]],["^1M","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1M","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^46","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","d9f1d6c2a711a6903adf603db43d9f9e19057146","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;"]]],["^46","node_modules/react/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1M","shadow/js.js"],["49660b9b24da1302d20c78ce1e0e39f1bbc6a2c5","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^C","^4N","~$clojure.walk","^4?","~$reagent.impl.component","^4T","^4W","^4>","^4E"]]],["^1M","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D"]]],["^46","node_modules/react-dom/cjs/react-dom.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","8bcd7418816cc2e434554e0592001071a9f4f838","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","^C","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1626984168000,1626984168000,1626984168000],["^46","node_modules/react/cjs/react.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","^50","~$module$node_modules$prop_types$checkPropTypes"]]],["^1M","re_frame/events.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^17","~$re-frame.utils","^O","^10","^[","^V","^4S"]]],["^1M","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","^4R"]]],["^1M","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","~$goog.fs.blob","^4G","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4I","^4J","^4K","^4L"]]],["^1M","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^46","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","0b00a799c88b303e4c3e8fe2628f7bde50128f0d","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;"]]],["^1M","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4D","~$goog.html.SafeUrl","^4K","^4L","^4F"]]],["^1M","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^56","~$goog.html.SafeStyle","^58","^4H","~$goog.html.uncheckedconversions","^4K","^4F"]]],["^1M","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^4E","^C","^4?","^4T","^4W","^4>"]]],["^1M","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11"]]],["^1M","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1M","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4D","~$goog.dom.TagName","~$goog.dom.tags","^56","^5<","~$goog.html.SafeStyleSheet","^58","^4H","^57","^4I","^4J","^4O","^4E","^4K","^4L","^4F"]]],["^1M","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4E"]]],["^1M","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^46","node_modules/scheduler/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","408126fc2241739168bcaf5965ae56a7df143144","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1M","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4A","^4B"]]],["^1M","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C"]]],["^1M","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4D","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^5@","~$goog.dom.safe","^5;","^5=","~$goog.math.Coordinate","~$goog.math.Size","^4E","^4B","^4K","~$goog.string.Unicode","~$goog.userAgent"]]],["^1M","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.debug.Error","^5F"]]],["^1M","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4D","^4B","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^46","node_modules/object-assign/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","519ffd5a4c91b67302cc9947b794966d629860cd","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;"]]],["^1M","re_frame/db.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^O"]]],["^1M","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",[]]],["^1M","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4E"]]],["^1M","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^4B","~$goog.string.StringBuffer"]]],["^1M","re_frame/cofx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^17","^V","^10","^["]]],["^46","node_modules/react/cjs/react.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","^50"]]],["^1M","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D"]]],["^1M","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^5G","^5=","^4K","^4F"]]],["^1M","re_frame/interceptor.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^[","^O","^4S","^S"]]],["^1M","clojure/data.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^S"]]],["^1M","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4F"]]],["^1M","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^C","~$reagent.impl.template","^4[","^4?","^4T","^4W","^4>","~$reagent.dom"]]],["^1M","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.math"]]],["^1M","re_frame/std_interceptors.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^V","^[","^10","^17","~$clojure.data","^U","^54","^4S"]]],["^1M","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4C","^4D","^5:","^5U"]]],["^1M","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.debug.entryPointRegistry","~$goog.dom","^5@","^5:","^4O","^4P"]]],["^1M","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","^5;","^56","^5<","^5B","^58","^4H","^4K","^4F","^4I"]]],["^1M","re_frame/utils.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^["]]],["^1M","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^E","^4?","^5S","^4T","^4W"]]],["^1M","re_frame/fx.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^15","^17","^V","^O","^Y","^10","^[","^4S"]]],["^46","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;"]]],["^1M","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13"]]],["^1M","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","~$goog.math.Long","~$goog.math.Integer","^4B","^4E","^4C","~$goog.Uri","^5R"]]],["^1M","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4K","^4L","^57","^4D"]]],["^1M","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11"]]],["^1M","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4K","^5<","^4L","^4C","^4E","^4D","^4F"]]],["^1M","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4R"]]],["^1M","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^5K"]]],["^46","node_modules/scheduler/tracing.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^46","node_modules/react-dom/cjs/react-dom.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","0b5e8617f1ca8948570e61d039ee42135b4ddff8","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^4;","^C","^50","^51","^53","~$module$node_modules$scheduler$tracing"]]],["^1M","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11"]]],["^1M","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","^4B"]]],["^1M","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^4D","^4L"]]],["^1M","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^O","^[","^5:"]]],["^1M","re_frame/subs.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^17","^O","^[","^54","^10","^4S"]]],["^1M","re_frame/core.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^47",["^ ","^48",null,"^49",["^H",[]],"^4:",["^13","^11","^Y","^Q","^O","^17","^X","^U","^15","^[","^10","^V","^1:","^S"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1583853211000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1583853211000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1583853211000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618505042000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^Q","^R","^S","^T","^U","^V","^V","^W","^X","^Y","^Y","^Z","^[","^X","^X","^10","^10","^11","^11","^12","^V","^13","^13","^14","^15","^16","^17","^18","^10","^15","^15","^S","^S","^19","^Y","^1:","^1:","^[","^[","^Q","^Q","^1;","^O","^1<","^1:","^U","^U","^17","^17"],"^1=",["^H",["^1>"]],"~:shadow/js-access-global",["^H",["Error"]],"^1?",["^ ","^1@","^1:","^1A","^1:","^1B","^1:"],"~:defs",["^ ","~$console",["^ ","^I","^3S","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^I","^2@","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^I","^2H","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1E",["~$quote",["^1E",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^I","^2Q","^6","re_frame/core.cljc","^:",18,"~:method-params",["^1E",[["^75","^76"]]],"~:protocol-impl",null,"~:arglists-meta",["^1E",[null,null]],"^8",1,"~:variadic?",false,"^7",51,"~:ret-tag","~$any","^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^73",["^1E",["^74",["^1E",[["^75","^76"]]]]],"^77","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^I","^2T","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^I","^27","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^73",["^1E",["^74",["^1E",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^7;",true,"~:fixed-arity",0,"^7>",0,"^78",[["^1E",["^7C"]]],"^73",["^1E",[["~$&","^7C"]]],"^7:",["^1E",[null]]]],"^I","^26","^6","re_frame/core.cljc","^:",19,"^7D",["^ ","^7;",true,"^7E",0,"^7>",0,"^78",[["^1E",["^7C"]]],"^73",["^1E",[["~$&","^7C"]]],"^7:",["^1E",[null]]],"^78",[["^1E",["^7C"]]],"^79",null,"^7E",0,"^7:",["^1E",[null]],"^8",1,"^7;",true,"~:methods",[["^ ","^7E",0,"^7;",true,"~:tag","^7="]],"^7",234,"^7<","^7=","^9",234,"^7>",0,"^7?",true,"^73",["^1E",[["~$&","^7C"]]]],"~$purge-event-queue",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^73",["^1E",["^74",["^1E",[[]]]]],"^77","Remove all events queued for processing"],"^I","^30","^6","re_frame/core.cljc","^:",24,"^78",["^1E",[[]]],"^79",null,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7",194,"^7<","^7=","^9",194,"^7>",0,"^7?",true,"^73",["^1E",["^74",["^1E",[[]]]]],"^77","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^73",["^1E",["^74",["^1E",[["~$id"]]]]]],"^I","^1[","^6","re_frame/core.cljc","^:",33,"^78",["^1E",[["^7J"]]],"^79",null,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7",222,"^7<","^7=","^9",222,"^7>",1,"^7?",true,"^73",["^1E",["^74",["^1E",[["^7J"]]]]]],"~$path",["^ ","^I","^3X","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^I","^3O","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^73",["^1E",["^74",["^1E",[[]]]]],"^77","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^I","^3L","^6","re_frame/core.cljc","^:",22,"^78",["^1E",[[]]],"^79",null,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7",169,"^7<","~$function","^9",169,"^7>",0,"^7?",true,"^73",["^1E",["^74",["^1E",[[]]]]],"^77","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^I","^3;","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"^7G","^7N"],"~$get-effect",["^ ","^I","^31","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^73",["^1E",["^74",["^1E",[["^7J","~$handler"],["^7J","~$interceptors","^7R"]]]]],"^77","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^7D",["^ ","^7;",false,"^7E",3,"^7>",3,"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^7:",["^1E",[null,null]]]],"^I","^2O","^6","re_frame/core.cljc","^:",19,"^7D",["^ ","^7;",false,"^7E",3,"^7>",3,"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^7:",["^1E",[null,null]]],"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^79",null,"^7E",3,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7F",[["^ ","^7E",2,"^7;",false,"^7G","^7="],["^ ","^7E",3,"^7;",false,"^7G","^7="]],"^7",71,"^9",71,"^7>",3,"^7?",true,"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^77","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^I","^2R","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^I","^25","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^7G","^7N"],"~$->interceptor",["^ ","^I","^3F","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^I","^3I","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^I","^3G","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^I","^2K","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^I","^3Z","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^7G","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^I","^2L","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^I","^3Y","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^I","^35","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^7G","^7N"],"~$reg-event-ctx",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^73",["^1E",["^74",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]]]],"^77","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^7D",["^ ","^7;",false,"^7E",3,"^7>",3,"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^7:",["^1E",[null,null]]]],"^I","^36","^6","re_frame/core.cljc","^:",20,"^7D",["^ ","^7;",false,"^7E",3,"^7>",3,"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^7:",["^1E",[null,null]]],"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^79",null,"^7E",3,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7F",[["^ ","^7E",2,"^7;",false,"^7G","^7="],["^ ","^7E",3,"^7;",false,"^7G","^7="]],"^7",104,"^9",104,"^7>",3,"^7?",true,"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^77","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^I","^2[","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^I","^2V","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^7G","^7["],"~$clear-sub",["^ ","^I","^22","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^7G","^7N"],"~$dispatch",["^ ","^I","^2>","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^I","^43","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^73",["^1E",["^74",["^1E",[["~$f"],["^7J","~$f"]]]]],"^77","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^7D",["^ ","^7;",false,"^7E",2,"^7>",2,"^78",[["~$f"],["^7J","~$f"]],"^73",["^1E",[["~$f"],["^7J","~$f"]]],"^7:",["^1E",[null,null]]]],"^I","^1Z","^6","re_frame/core.cljc","^:",30,"^7D",["^ ","^7;",false,"^7E",2,"^7>",2,"^78",[["~$f"],["^7J","~$f"]],"^73",["^1E",[["~$f"],["^7J","~$f"]]],"^7:",["^1E",[null,null]]],"^78",[["~$f"],["^7J","~$f"]],"^79",null,"^7E",2,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7F",[["^ ","^7E",1,"^7;",false,"^7G","^7="],["^ ","^7E",2,"^7;",false,"^7G","^7="]],"^7",201,"^9",201,"^7>",2,"^7?",true,"^73",["^1E",[["~$f"],["^7J","~$f"]]],"^77","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^I","^3U","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^73",["^1E",["^74",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]]]],"^77","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^7D",["^ ","^7;",false,"^7E",3,"^7>",3,"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^7:",["^1E",[null,null]]]],"^I","^39","^6","re_frame/core.cljc","^:",19,"^7D",["^ ","^7;",false,"^7E",3,"^7>",3,"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^7:",["^1E",[null,null]]],"^78",[["^7J","^7R"],["^7J","^7S","^7R"]],"^79",null,"^7E",3,"^7:",["^1E",[null,null]],"^8",1,"^7;",false,"^7F",[["^ ","^7E",2,"^7;",false,"^7G","^7="],["^ ","^7E",3,"^7;",false,"^7G","^7="]],"^7",87,"^9",87,"^7>",3,"^7?",true,"^73",["^1E",[["^7J","^7R"],["^7J","^7S","^7R"]]],"^77","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^72",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^73",["^1E",["^74",["^1E",[["~$&","^7C"]]]]],"^7D",["^ ","^7;",true,"^7E",0,"^7>",0,"^78",[["^1E",["^7C"]]],"^73",["^1E",[["~$&","^7C"]]],"^7:",["^1E",[null]]]],"^I","^3B","^6","re_frame/core.cljc","^:",23,"^7D",["^ ","^7;",true,"^7E",0,"^7>",0,"^78",[["^1E",["^7C"]]],"^73",["^1E",[["~$&","^7C"]]],"^7:",["^1E",[null]]],"^78",[["^1E",["^7C"]]],"^79",null,"^7E",0,"^7:",["^1E",[null]],"^8",1,"^7;",true,"^7F",[["^ ","^7E",0,"^7;",true,"^7G","^7="]],"^7",229,"^7<","^7=","^9",229,"^7>",0,"^7?",true,"^73",["^1E",[["~$&","^7C"]]]],"~$clear-subscription-cache!",["^ ","^I","^3N","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1C",["^ ","^11","^11"],"~:cljs.analyzer/constants",["^ ","^1=",["^H",["~:warn"]],"~:order",["^8?"]],"^1I",["^ ","^1>",["^H",[]]],"^1J",["^ "],"^1K",["^13","^11","^Y","^Q","^O","^17","^X","^U","^15","^[","^10","^V","^1:","^S"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^45",[["^8C","~:static-fns"],true,["^8C","~:shadow-tweaks"],null,["^8C","~:source-map-inline"],null,["^8C","~:elide-asserts"],false,["^8C","~:optimize-constants"],null,["^8C","^1P"],null,["^8C","~:external-config"],null,["^8C","~:tooling-config"],null,["^8C","~:emit-constants"],null,["^8C","~:load-tests"],null,["^8C","~:form-size-threshold"],null,["^8C","~:data-readers"],null,["^8C","~:infer-externs"],"~:auto",["^8C","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8C","~:fn-invoke-direct"],null,["^8C","~:source-map"],"/dev/null"]]]