["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.set');\r\n/**\r\n * Holds the current set of logging functions.\r\n * By default, re-frame uses the functions provided by js/console.\r\n * Use `set-loggers!` to change these defaults\r\n *   \r\n */\r\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),console.debug.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\r\nreturn cljs.core.List.EMPTY;\r\n}))], null));\r\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___35616 = arguments.length;\r\nvar i__4790__auto___35617 = (0);\r\nwhile(true){\r\nif((i__4790__auto___35617 < len__4789__auto___35616)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___35617]));\r\n\r\nvar G__35618 = (i__4790__auto___35617 + (1));\r\ni__4790__auto___35617 = G__35618;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\r\n});\r\n\r\n(re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\r\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\r\n}\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__35606 = cljs.core.deref(re_frame.loggers.loggers);\r\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__35606) : level.call(null,G__35606));\r\n})(),args);\r\n}));\r\n\r\n(re_frame.loggers.console.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_frame.loggers.console.cljs$lang$applyTo = (function (seq35587){\r\nvar G__35588 = cljs.core.first(seq35587);\r\nvar seq35587__$1 = cljs.core.next(seq35587);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__35588,seq35587__$1);\r\n}));\r\n\r\n/**\r\n * Change the set (or a subset) of logging functions used by re-frame.\r\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\r\n */\r\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\r\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\r\n}\r\n\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\r\n});\r\n/**\r\n * Get the current logging functions used by re-frame.\r\n */\r\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\r\nreturn cljs.core.deref(re_frame.loggers.loggers);\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$difference","^Q"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^L",["^Z",["^U",["^Q","~:refer",["^W"]]]]]],"~:flags",["^ ","^U",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1588185567374,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :debug     (js/console.debug.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :debug    (partial log :debug)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAACG,AAAsBH,AACvB,AAAI,AAASA,AACX,AAACI,AAAsBJ,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACK,AAAyBL;AAD5B,AAAA;;AAW7B,AAAA,AAAA,AAAAM,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE,AAAQ,AAAA,AAAAE,AAACC,AAAWzB,AAAQqB;AAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDF;;;AACpF,AAACK,AAAM,AAAAC,AAAA,AAAAH,AAAQxB;AAAR,AAAA,AAAA2B,AAAAA,AAACN,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;;AAAA,AAAMY,AAGHC;AAHH,AAIE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKJ,AAAc,AAAA,AAAA,AAAAL,AAAKxB,AAAQiC,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACW,AAAMlC,AAAQmC,AAAMN;;AAEvB;;;AAAA,AAAMO;AAAN,AAAA,AAAAZ,AAGGxB","names",["re-frame.loggers/loggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.debug.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq35587","G__35588","cljs.core/first","cljs.core/next","self__4776__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__35606","re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],[1580517112058,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/labs/useragent/browser.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1K"]]],["^15","re_frame/loggers.cljc"],[1584278805509,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^R","^Q"]]],["^15","goog/array/array.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H"]]],["^15","goog/debug/error.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/dom/nodetype.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/string/typedstring.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/object/object.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/dom/asserts.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H"]]],"~:SHADOW-TIMESTAMP",[1580517115000,1580517109000],["^15","goog/math/long.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","~$goog.html.trustedtypes","^1N","^1O","^1P","^1Q"]]],["^15","goog/string/internal.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/functions/functions.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/html/safestyle.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","~$goog.html.SafeUrl","^1P","^1Q","^1K"]]],["^15","goog/dom/safe.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1U","^1M","~$goog.html.uncheckedconversions","^1P","^1K"]]],["^15","goog/structs/map.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","~$goog.dom.TagName","~$goog.dom.tags","^1Y","^1Z","~$goog.html.SafeStyleSheet","^1U","^1M","^1T","^1N","^1O","~$goog.labs.userAgent.browser","^1J","^1P","^1Q","^1K"]]],["^15","goog/dom/tags.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1J"]]],["^15","goog/asserts/asserts.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/fs/url.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/base.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",[]]],["^15","goog/structs/structs.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1J"]]],["^15","goog/string/string.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.dom.safe","^1[","^1P","^1K"]]],["^15","goog/reflect/reflect.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/labs/useragent/util.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1K"]]],["^15","goog/string/stringbuffer.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/iter/iter.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","^1W","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","^1X","^1Y","^1Z","^24","^1U","^1M","^1P","^1K"]]],["^15","goog/dom/htmlelement.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","cljs/core.cljs"],[1580517109662,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["~$goog.math.Long","~$goog.math.Integer","^28","^1J","^1G","~$goog.Uri","~$goog.string.StringBuffer"]]],["^15","goog/html/safescript.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","^1T","^1P","^1Q"]]],["^15","goog/html/safestylesheet.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","^1Z","^1J","^1P","^1Q","^1K"]]],["^15","goog/math/integer.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1S"]]],["^15","clojure/set.cljs"],[1580517109662,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^R"]]],["^15","goog/uri/utils.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","^28"]]],["^15","goog/string/const.js"],[1580517112058,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","^1Q"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1580517109000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580517105000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1580517104000,"jar:file:/C:/Users/JaceMaverick/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1580517109000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S"],"^T",["^J",["^U"]],"~:shadow/js-access-global",["^J",["Error"]],"^V",["^ ","^W","^Q"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^35",true,"^K","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",37,"^8",7,"^9",37,"^:",14,"~:arglists",["^Z",["~$quote",["^Z",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^Z",["^3>","^3?"]]],"^3<",["^Z",[["^3>","~$&","^3?"]]],"~:arglists-meta",["^Z",[null]]]],"^K","~$re-frame.loggers/console","^6","re_frame/loggers.cljc","^:",14,"^3@",["^ ","^3A",true,"^3B",1,"^3C",1,"^3D",[["^Z",["^3>","^3?"]]],"^3<",["^Z",[["^3>","~$&","^3?"]]],"^3E",["^Z",[null]]],"^3D",[["^Z",["^3>","^3?"]]],"~:protocol-impl",null,"^3B",1,"^3E",["^Z",[null]],"^8",1,"^3A",true,"~:methods",[["^ ","^3B",1,"^3A",true,"^37","~$any"]],"^7",37,"~:ret-tag","^3I","^9",37,"^3C",1,"~:fn-var",true,"^3<",["^Z",[["^3>","~$&","^3?"]]]],"~$set-loggers!",["^ ","^3;",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^3<",["^Z",["^3=",["^Z",[["~$new-loggers"]]]]],"^39","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^K","~$re-frame.loggers/set-loggers!","^6","re_frame/loggers.cljc","^:",19,"^3D",["^Z",[["^3M"]]],"^3G",null,"^3E",["^Z",[null,null]],"^8",1,"^3A",false,"^7",43,"^3J",["^J",[null,"^3I"]],"^9",43,"^3C",1,"^3K",true,"^3<",["^Z",["^3=",["^Z",[["^3M"]]]]],"^39","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^3;",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",50,"^8",7,"^9",50,"^:",18,"^3<",["^Z",["^3=",["^Z",[[]]]]],"^39","Get the current logging functions used by re-frame."],"^K","~$re-frame.loggers/get-loggers","^6","re_frame/loggers.cljc","^:",18,"^3D",["^Z",[[]]],"^3G",null,"^3E",["^Z",[null,null]],"^8",1,"^3A",false,"^7",50,"^3J","^3I","^9",50,"^3C",0,"^3K",true,"^3<",["^Z",["^3=",["^Z",[[]]]]],"^39","Get the current logging functions used by re-frame."]],"^X",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^J",["~:group","~:warn","~:debug","~:error","~:groupEnd","~:log"]],"~:order",["^3W","^3S","^3U","^3T","^3R","^3V"]],"^11",["^ ","^U",["^J",[]]],"^12",["^ "],"^13",["^S","^R","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^1A",[["^3[","~:static-fns"],true,["^3[","~:shadow-tweaks"],null,["^3[","~:elide-asserts"],false,["^3[","~:optimize-constants"],null,["^3[","^18"],null,["^3[","~:external-config"],null,["^3[","~:tooling-config"],null,["^3[","~:emit-constants"],null,["^3[","~:load-tests"],null,["^3[","~:form-size-threshold"],null,["^3[","~:infer-externs"],true,["^3[","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3[","~:fn-invoke-direct"],null,["^3[","~:source-map"],"/dev/null"]]]