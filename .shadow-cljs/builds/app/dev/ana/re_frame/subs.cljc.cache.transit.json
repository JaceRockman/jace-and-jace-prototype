["^ ","~:output",["^ ","~:js","goog.provide('re_frame.subs');\r\nre_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\r\nif(cljs.core.truth_((re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind) : re_frame.registrar.kinds.call(null,re_frame.subs.kind)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (re-frame.registrar/kinds kind)\"));\r\n}\r\nre_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\n/**\r\n * Causes all subscriptions to be removed from the cache.\r\n *   Does this by:\r\n *   1. running `on-dispose` on all cached subscriptions\r\n *   2. Each `on-dispose` will perform the removal of themselves.\r\n * \r\n *   This is for development time use. Useful when reloading Figwheel code\r\n *   after a React exception, because React components won't have been\r\n *   cleaned up properly. And this, in turn, means the subscriptions within those\r\n *   components won't have been cleaned up correctly. So this forces the issue.\r\n */\r\nre_frame.subs.clear_subscription_cache_BANG_ = (function re_frame$subs$clear_subscription_cache_BANG_(){\r\nvar seq__37114_37235 = cljs.core.seq(cljs.core.deref(re_frame.subs.query__GT_reaction));\r\nvar chunk__37115_37236 = null;\r\nvar count__37116_37237 = (0);\r\nvar i__37117_37238 = (0);\r\nwhile(true){\r\nif((i__37117_37238 < count__37116_37237)){\r\nvar vec__37127_37239 = chunk__37115_37236.cljs$core$IIndexed$_nth$arity$2(null,i__37117_37238);\r\nvar k_37240 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37127_37239,(0),null);\r\nvar rxn_37241 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37127_37239,(1),null);\r\nre_frame.interop.dispose_BANG_(rxn_37241);\r\n\r\n\r\nvar G__37242 = seq__37114_37235;\r\nvar G__37243 = chunk__37115_37236;\r\nvar G__37244 = count__37116_37237;\r\nvar G__37245 = (i__37117_37238 + (1));\r\nseq__37114_37235 = G__37242;\r\nchunk__37115_37236 = G__37243;\r\ncount__37116_37237 = G__37244;\r\ni__37117_37238 = G__37245;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___37246 = cljs.core.seq(seq__37114_37235);\r\nif(temp__5753__auto___37246){\r\nvar seq__37114_37247__$1 = temp__5753__auto___37246;\r\nif(cljs.core.chunked_seq_QMARK_(seq__37114_37247__$1)){\r\nvar c__4638__auto___37248 = cljs.core.chunk_first(seq__37114_37247__$1);\r\nvar G__37249 = cljs.core.chunk_rest(seq__37114_37247__$1);\r\nvar G__37250 = c__4638__auto___37248;\r\nvar G__37251 = cljs.core.count(c__4638__auto___37248);\r\nvar G__37252 = (0);\r\nseq__37114_37235 = G__37249;\r\nchunk__37115_37236 = G__37250;\r\ncount__37116_37237 = G__37251;\r\ni__37117_37238 = G__37252;\r\ncontinue;\r\n} else {\r\nvar vec__37131_37253 = cljs.core.first(seq__37114_37247__$1);\r\nvar k_37254 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37131_37253,(0),null);\r\nvar rxn_37255 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37131_37253,(1),null);\r\nre_frame.interop.dispose_BANG_(rxn_37255);\r\n\r\n\r\nvar G__37256 = cljs.core.next(seq__37114_37247__$1);\r\nvar G__37257 = null;\r\nvar G__37258 = (0);\r\nvar G__37259 = (0);\r\nseq__37114_37235 = G__37256;\r\nchunk__37115_37236 = G__37257;\r\ncount__37116_37237 = G__37258;\r\ni__37117_37238 = G__37259;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(re_frame.subs.query__GT_reaction)))){\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Unregisters all existing subscription handlers\r\n */\r\nre_frame.subs.clear_all_handlers_BANG_ = (function re_frame$subs$clear_all_handlers_BANG_(){\r\nre_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind);\r\n\r\nreturn re_frame.subs.clear_subscription_cache_BANG_();\r\n});\r\n/**\r\n * cache the reaction r\r\n */\r\nre_frame.subs.cache_and_return = (function re_frame$subs$cache_and_return(query_v,dynv,r){\r\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\r\nre_frame.interop.add_on_dispose_BANG_(r,(function (){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__37135 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__37136 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37136);\r\n\r\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,(function (query_cache){\r\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\r\n} else {\r\nreturn query_cache;\r\n}\r\n}));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__37030__auto___37262 = re_frame.interop.now();\r\nvar duration__37031__auto___37263 = (end__37030__auto___37262 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37031__auto___37263,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__37030__auto___37262);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37135);\r\n}} else {\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,(function (query_cache){\r\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\r\n} else {\r\nreturn query_cache;\r\n}\r\n}));\r\n}\r\n}));\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,(function (query_cache){\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\r\n}));\r\n\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37264 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37264);\r\n\r\n} else {\r\n}\r\n\r\nreturn r;\r\n});\r\nre_frame.subs.cache_lookup = (function re_frame$subs$cache_lookup(var_args){\r\nvar G__37142 = arguments.length;\r\nswitch (G__37142) {\r\ncase 1:\r\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\r\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\r\n}));\r\n\r\n(re_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given a `query`, returns a Reagent `reaction` which, over\r\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\r\n *   it returns a `Signal`.\r\n * \r\n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\r\n * \r\n *   `query` is a vector of at least one element. The first element is the\r\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\r\n *   elements are optional, additional values which parameterise the query\r\n *   performed.\r\n * \r\n *   `dynv` is an optional 3rd argument, which is a vector of further input\r\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\r\n *   historical reasons and is borderline deprecated these days.\r\n * \r\n *   Example Usage:\r\n *   --------------\r\n * \r\n *  (subscribe [:items])\r\n *  (subscribe [:items \"blue\" :small])\r\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\r\n * \r\n *   Note: for any given call to `subscribe` there must have been a previous call\r\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\r\n * \r\n *   Hint\r\n *   ----\r\n * \r\n *   When used in a view function BE SURE to `deref` the returned value.\r\n *   In fact, to avoid any mistakes, some prefer to define:\r\n * \r\n *   (def <sub  (comp deref re-frame.core/subscribe))\r\n * \r\n *   And then, within their views, they call  `(<sub [:items :small])` rather\r\n *   than using `subscribe` directly.\r\n * \r\n *   De-duplication\r\n *   --------------\r\n * \r\n *   XXX\r\n *   \r\n */\r\nre_frame.subs.subscribe = (function re_frame$subs$subscribe(var_args){\r\nvar G__37146 = arguments.length;\r\nswitch (G__37146) {\r\ncase 1:\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__37151 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__37152 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37152);\r\n\r\ntry{try{var temp__5751__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar cached = temp__5751__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37269 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37269);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37270 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37270);\r\n\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37271 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37271);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nreturn re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(re_frame.db.app_db,query) : handler_fn.call(null,re_frame.db.app_db,query)));\r\n}\r\n}\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__37030__auto___37272 = re_frame.interop.now();\r\nvar duration__37031__auto___37273 = (end__37030__auto___37272 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37031__auto___37273,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__37030__auto___37272);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37151);\r\n}} else {\r\nvar temp__5751__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar cached = temp__5751__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37274 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37274);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37275 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37275);\r\n\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37276 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37276);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nreturn re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(re_frame.db.app_db,query) : handler_fn.call(null,re_frame.db.app_db,query)));\r\n}\r\n}\r\n}\r\n}));\r\n\r\n(re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__37153 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__37154 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37154);\r\n\r\ntry{try{var temp__5751__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar cached = temp__5751__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37277 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37277);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37280 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37280);\r\n\r\n} else {\r\n}\r\n\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5753__auto___37281 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(re_frame.interop.ratom_QMARK_,dynv));\r\nif(cljs.core.truth_(temp__5753__auto___37281)){\r\nvar not_reactive_37282 = temp__5753__auto___37281;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_37282], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37284 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37284);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nvar dyn_vals = re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\r\n}));\r\nvar sub = re_frame.interop.make_reaction((function (){\r\nvar G__37157 = re_frame.db.app_db;\r\nvar G__37158 = query;\r\nvar G__37159 = cljs.core.deref(dyn_vals);\r\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__37157,G__37158,G__37159) : handler_fn.call(null,G__37157,G__37158,G__37159));\r\n}));\r\nreturn re_frame.subs.cache_and_return(query,dynv,re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.deref(cljs.core.deref(sub));\r\n})));\r\n}\r\n}\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__37030__auto___37291 = re_frame.interop.now();\r\nvar duration__37031__auto___37292 = (end__37030__auto___37291 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37031__auto___37292,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__37030__auto___37291);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37153);\r\n}} else {\r\nvar temp__5751__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar cached = temp__5751__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37293 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37293);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37295 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37295);\r\n\r\n} else {\r\n}\r\n\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5753__auto___37297 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(re_frame.interop.ratom_QMARK_,dynv));\r\nif(cljs.core.truth_(temp__5753__auto___37297)){\r\nvar not_reactive_37298 = temp__5753__auto___37297;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_37298], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37299 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37299);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nvar dyn_vals = re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\r\n}));\r\nvar sub = re_frame.interop.make_reaction((function (){\r\nvar G__37173 = re_frame.db.app_db;\r\nvar G__37174 = query;\r\nvar G__37175 = cljs.core.deref(dyn_vals);\r\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__37173,G__37174,G__37175) : handler_fn.call(null,G__37173,G__37174,G__37175));\r\n}));\r\nreturn re_frame.subs.cache_and_return(query,dynv,re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.deref(cljs.core.deref(sub));\r\n})));\r\n}\r\n}\r\n}\r\n}));\r\n\r\n(re_frame.subs.subscribe.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Returns a new version of 'm' in which 'f' has been applied to each value.\r\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\r\n */\r\nre_frame.subs.map_vals = (function re_frame$subs$map_vals(f,m){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__37182){\r\nvar vec__37183 = p__37182;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37183,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37183,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\r\n})),m);\r\n});\r\n/**\r\n * Runs f over signals. Signals may take several\r\n *   forms, this function handles all of them.\r\n */\r\nre_frame.subs.map_signals = (function re_frame$subs$map_signals(f,signals){\r\nif(cljs.core.sequential_QMARK_(signals)){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\r\n} else {\r\nif(cljs.core.map_QMARK_(signals)){\r\nreturn re_frame.subs.map_vals(f,signals);\r\n} else {\r\nif(re_frame.interop.deref_QMARK_(signals)){\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\r\n} else {\r\nreturn cljs.core.List.EMPTY;\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Coerces x to a seq if it isn't one already\r\n */\r\nre_frame.subs.to_seq = (function re_frame$subs$to_seq(x){\r\nif(cljs.core.sequential_QMARK_(x)){\r\nreturn x;\r\n} else {\r\nreturn (new cljs.core.List(null,x,null,(1),null));\r\n}\r\n});\r\nre_frame.subs.deref_input_signals = (function re_frame$subs$deref_input_signals(signals,query_id){\r\nvar dereffed_signals = re_frame.subs.map_signals(cljs.core.deref,signals);\r\nif(cljs.core.sequential_QMARK_(signals)){\r\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\r\n} else {\r\nif(cljs.core.map_QMARK_(signals)){\r\nre_frame.subs.map_vals(cljs.core.deref,signals);\r\n} else {\r\nif(re_frame.interop.deref_QMARK_(signals)){\r\ncljs.core.deref(signals);\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\r\n\r\n}\r\n}\r\n}\r\n\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37300 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(re_frame.subs.to_seq(re_frame.subs.map_signals(re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(re_frame.subs.to_seq(re_frame.subs.map_signals(re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37300);\r\n\r\n} else {\r\n}\r\n\r\nreturn dereffed_signals;\r\n});\r\n/**\r\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\r\n *   \r\n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\r\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\r\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering \r\n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \r\n * \r\n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\r\n *   from which nodes can be created later. \r\n *   \r\n *   `reg-sub` arguments are:  \r\n *  - a `query-id` (typically a namespaced keyword)\r\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \r\n *  - a function which computes the value of this kind of node \r\n * \r\n *   The `computation function` is always the last argument supplied and it is expected to have the signature: \r\n *  `(input-values, query-vector) -> a-value`\r\n *   \r\n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the \r\n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \r\n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\r\n * \r\n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \r\n *   but whatever is there defines the `input signals` part of the template, controlling what input \r\n *  values \"flow into\" the `computation function` gets when it is called. \r\n * \r\n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\r\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \r\n *   two are really just sugary variations. \r\n * \r\n *   1. No input signals given:\r\n *    ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\r\n *   ```\r\n * \r\n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\r\n *   and, as a result, the value within `app-db` (a map) is\r\n *   is given as the 1st argument when `a-computation-fn` is called.   \r\n *  \r\n * \r\n *   2. A signal function is explicitly supplied:\r\n *   ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     signal-fn     ;; <-- here\r\n *     computation-fn)\r\n *   ```\r\n *   \r\n *   This is the most canonical and instructive of the three variations.\r\n *   \r\n *   When a node is created from the template, the `signal-fn` will be called and it\r\n *   is expected to return the input signal(s) as either a singleton, if there is only\r\n *   one, or a sequence if there are many, or a map with the signals as the values.\r\n * \r\n *   The values from returned nominated signals will be supplied as the 1st argument to  \r\n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \r\n *   this value will be either a singleton, sequence or map of them (paralleling\r\n *   the structure returned by the `signal-fn`).\r\n * \r\n *   This example `signal-fn` returns a vector of input signals.\r\n *     ```clj\r\n *     (fn [query-vec dynamic-vec]\r\n *       [(subscribe [:a-sub])\r\n *        (subscribe [:b-sub])])\r\n *     ```\r\n *   The associated computation function must be written\r\n *   to expect a vector of values for its first argument:\r\n *     ```clj\r\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\r\n *       ....)\r\n *      ```\r\n * \r\n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\r\n *      ```clj\r\n *      (fn [query-vec dynamic-vec]\r\n *        (subscribe [:a-sub]))\r\n *      ```\r\n *   then the associated computation function must be written to expect a single value\r\n *   as the 1st argument:\r\n *      ```clj\r\n *      (fn [a query-vec]       ;; 1st argument is a single value\r\n *        ...)\r\n *      ```\r\n *  \r\n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\r\n *     ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\r\n *   ```\r\n *   is the equivalent of using this\r\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\r\n *   ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \r\n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\r\n *   ```\r\n *  \r\n *   3. Syntax Sugar\r\n * \r\n *   ```clj\r\n *   (reg-sub\r\n *     :a-b-sub\r\n *     :<- [:a-sub]\r\n *     :<- [:b-sub]\r\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\r\n *       {:a a :b b}))\r\n *   ```\r\n * \r\n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\r\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\r\n * \r\n *   If you supply only one pair a singleton will be supplied to the computation function, \r\n *   as if you had supplied a `signal-fn` returning only a single value:\r\n * \r\n *   ```clj\r\n *   (reg-sub\r\n *     :a-sub\r\n *     :<- [:a-sub]\r\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\r\n *       ...))\r\n *   ```\r\n * \r\n *   For further understanding, read `/docs`, and look at the detailed comments in\r\n *   /examples/todomvc/src/subs.cljs\r\n *   \r\n */\r\nre_frame.subs.reg_sub = (function re_frame$subs$reg_sub(var_args){\r\nvar args__4824__auto__ = [];\r\nvar len__4818__auto___37301 = arguments.length;\r\nvar i__4819__auto___37302 = (0);\r\nwhile(true){\r\nif((i__4819__auto___37302 < len__4818__auto___37301)){\r\nargs__4824__auto__.push((arguments[i__4819__auto___37302]));\r\n\r\nvar G__37303 = (i__4819__auto___37302 + (1));\r\ni__4819__auto___37302 = G__37303;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\r\nreturn re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\r\n});\r\n\r\n(re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\r\nvar computation_fn = cljs.core.last(args);\r\nvar input_args = cljs.core.butlast(args);\r\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\r\nvar inputs_fn = (function (){var G__37193 = cljs.core.count(input_args);\r\nswitch (G__37193) {\r\ncase (0):\r\nreturn (function() {\r\nvar G__37309 = null;\r\nvar G__37309__1 = (function (_){\r\nreturn re_frame.db.app_db;\r\n});\r\nvar G__37309__2 = (function (_,___$1){\r\nreturn re_frame.db.app_db;\r\n});\r\nG__37309 = function(_,___$1){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn G__37309__1.call(this,_);\r\ncase 2:\r\nreturn G__37309__2.call(this,_,___$1);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nG__37309.cljs$core$IFn$_invoke$arity$1 = G__37309__1;\r\nG__37309.cljs$core$IFn$_invoke$arity$2 = G__37309__2;\r\nreturn G__37309;\r\n})()\r\n\r\nbreak;\r\ncase (1):\r\nvar f = cljs.core.first(input_args);\r\nif(cljs.core.fn_QMARK_(f)){\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\r\n}\r\n\r\nreturn f;\r\n\r\nbreak;\r\ncase (2):\r\nvar vec__37197 = input_args;\r\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37197,(0),null);\r\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37197,(1),null);\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\r\n}\r\n\r\nreturn (function() {\r\nvar re_frame$subs$inp_fn = null;\r\nvar re_frame$subs$inp_fn__1 = (function (_){\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\r\n});\r\nvar re_frame$subs$inp_fn__2 = (function (_,___$1){\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\r\n});\r\nre_frame$subs$inp_fn = function(_,___$1){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn re_frame$subs$inp_fn__1.call(this,_);\r\ncase 2:\r\nreturn re_frame$subs$inp_fn__2.call(this,_,___$1);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = re_frame$subs$inp_fn__1;\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$inp_fn__2;\r\nreturn re_frame$subs$inp_fn;\r\n})()\r\n\r\nbreak;\r\ndefault:\r\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\r\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\r\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\r\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\r\n}\r\n\r\nreturn (function() {\r\nvar re_frame$subs$inp_fn = null;\r\nvar re_frame$subs$inp_fn__1 = (function (_){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_frame.subs.subscribe,vecs);\r\n});\r\nvar re_frame$subs$inp_fn__2 = (function (_,___$1){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_frame.subs.subscribe,vecs);\r\n});\r\nre_frame$subs$inp_fn = function(_,___$1){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn re_frame$subs$inp_fn__1.call(this,_);\r\ncase 2:\r\nreturn re_frame$subs$inp_fn__2.call(this,_,___$1);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = re_frame$subs$inp_fn__1;\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$inp_fn__2;\r\nreturn re_frame$subs$inp_fn;\r\n})()\r\n\r\n}\r\n})();\r\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,(function() {\r\nvar re_frame$subs$subs_handler_fn = null;\r\nvar re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\r\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\r\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nvar reaction = re_frame.interop.make_reaction((function (){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__37216 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__37217 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37217);\r\n\r\ntry{try{var subscription = (function (){var G__37219 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__37220 = query_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__37219,G__37220) : computation_fn.call(null,G__37219,G__37220));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37310 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37310);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__37030__auto___37311 = re_frame.interop.now();\r\nvar duration__37031__auto___37312 = (end__37030__auto___37311 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37031__auto___37312,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__37030__auto___37311);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37216);\r\n}} else {\r\nvar subscription = (function (){var G__37221 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__37222 = query_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__37221,G__37222) : computation_fn.call(null,G__37221,G__37222));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37313 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37313);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}\r\n}));\r\ncljs.core.reset_BANG_(reaction_id,re_frame.interop.reagent_id(reaction));\r\n\r\nreturn reaction;\r\n});\r\nvar re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\r\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\r\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nvar reaction = re_frame.interop.make_reaction((function (){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__37225 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__37226 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37226);\r\n\r\ntry{try{var subscription = (function (){var G__37228 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__37229 = query_vec;\r\nvar G__37230 = dyn_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__37228,G__37229,G__37230) : computation_fn.call(null,G__37228,G__37229,G__37230));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37316 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37316);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__37030__auto___37318 = re_frame.interop.now();\r\nvar duration__37031__auto___37319 = (end__37030__auto___37318 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37031__auto___37319,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__37030__auto___37318);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37225);\r\n}} else {\r\nvar subscription = (function (){var G__37232 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__37233 = query_vec;\r\nvar G__37234 = dyn_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__37232,G__37233,G__37234) : computation_fn.call(null,G__37232,G__37233,G__37234));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__37032__auto___37320 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37032__auto___37320);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}\r\n}));\r\ncljs.core.reset_BANG_(reaction_id,re_frame.interop.reagent_id(reaction));\r\n\r\nreturn reaction;\r\n});\r\nre_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\r\nswitch(arguments.length){\r\ncase 2:\r\nreturn re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\r\ncase 3:\r\nreturn re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nre_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$subs_handler_fn__2;\r\nre_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = re_frame$subs$subs_handler_fn__3;\r\nreturn re_frame$subs$subs_handler_fn;\r\n})()\r\n);\r\n}));\r\n\r\n(re_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq37191){\r\nvar G__37192 = cljs.core.first(seq37191);\r\nvar seq37191__$1 = cljs.core.next(seq37191);\r\nvar self__4805__auto__ = this;\r\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__37192,seq37191__$1);\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/subs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^O","~$re-frame.trace","^P","~$re-frame.registrar","^Q","~$cljs.core","^R","~$goog","^S","~$trace","^P","~$re-frame.utils","^U","~$re-frame.loggers","^V","~$re-frame.db","^W"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$reagent-id","^O","~$console","^V","~$app-db","^W","~$dispose!","^O","~$add-on-dispose!","^O","~$make-reaction","^O","~$get-handler","^Q","~$first-in-vector","^U","~$deref?","^O","~$ratom?","^O","~$debug-enabled?","^O","~$clear-handlers","^Q","~$register-handler","^Q"],"~:require-macros",["^ ","^P","^P","^T","^P","^R","^R"],"~:form",["~#list",["~$ns","^J",["^1>",["^Y",["^W","~:refer",["^11"]],["^O","^1@",["^13","^19","^14","^18","^17","^12","^["]],["^V","^1@",["^10"]],["^U","^1@",["^16"]],["^Q","^1@",["^15","^1:","^1;"]],["^P","~:as","^T","~:include-macros",true]]]]],"~:flags",["^ ","^Y",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^W","^O","^V","^U","^Q","^P"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/subs.cljc"],"~:compiled-at",1626984420208,"~:resource-name","re_frame/subs.cljc","~:warnings",[],"~:source","(ns re-frame.subs\n (:require\n   [re-frame.db        :refer [app-db]]\n   [re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [re-frame.loggers   :refer [console]]\n   [re-frame.utils     :refer [first-in-vector]]\n   [re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \\\"flow into\\\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.subs/kind","js/Error","re-frame.registrar/kinds","re-frame.subs/query->reaction","cljs.core.atom","re-frame.subs/clear-subscription-cache!","seq__37114","cljs.core/seq","cljs.core/deref","chunk__37115","count__37116","i__37117","vec__37127","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__37131","cljs.core/first","cljs.core/next","k","rxn","re-frame.interop/dispose!","cljs.core/not-empty","re_frame.loggers.console","re-frame.subs/clear-all-handlers!","re_frame.registrar.clear_handlers","re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","re-frame.interop/add-on-dispose!","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__37135","re-frame.trace/*current-trace*","*current-trace*-temp-val__37136","re-frame.trace/start-trace","end__37030__auto__","re-frame.interop/now","duration__37031__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","re-frame.utils/first-in-vector","re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core.get","cljs.core.dissoc","re-frame.interop/debug-enabled?","new-trace__37032__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","var_args","G__37142","re-frame.subs/cache-lookup","re_frame.subs.cache_lookup","dyn-v","G__37146","re-frame.subs/subscribe","query","*current-trace*-orig-val__37151","*current-trace*-temp-val__37152","temp__5751__auto__","cached","query-id","handler-fn","re_frame.registrar.get_handler","re-frame.db/app-db","*current-trace*-orig-val__37153","*current-trace*-temp-val__37154","not-reactive","cljs.core.remove","re-frame.interop/ratom?","dyn-vals","re-frame.interop/make-reaction","cljs.core.mapv","sub","G__37157","G__37158","G__37159","G__37173","G__37174","G__37175","re-frame.subs/map-vals","f","m","cljs.core.into","cljs.core/empty","cljs.core.map","p__37182","vec__37183","v","re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","re-frame.interop/deref?","re-frame.subs/to-seq","x","cljs.core/List","re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","re-frame.subs/reg-sub","seq37191","G__37192","self__4805__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__37193","_","cljs.core/fn?","vec__37197","marker","vec","cljs.core._EQ_","re_frame.subs.subscribe","pairs","cljs.core.partition","markers","vecs","cljs.core/every?","cljs.core/vector?","re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__37216","*current-trace*-temp-val__37217","subscription","G__37219","G__37220","G__37221","G__37222","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__37225","*current-trace*-temp-val__37226","G__37228","G__37229","G__37230","G__37232","G__37233","G__37234"]],"~:used-vars",["^H",["~$cljs.core/sequential?","~$re-frame.registrar/get-handler","~$re-frame.db/app-db","~$re-frame.interop/reagent-id","~$re-frame.subs/map-vals","~$cljs.core/vector?","~$cljs.core/=","~$re-frame.interop/dispose!","~$re-frame.trace/traces","~$cljs.core/doall","~$cljs.core/IndexedSeq","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/chunk-first","~$re-frame.trace/start-trace","~$re-frame.subs/clear-all-handlers!","~$re-frame.registrar/clear-handlers","~$re-frame.registrar/kinds","~$re-frame.loggers/console","~$cljs.core/last","~$cljs.core/mapv","~$cljs.core/dissoc","~$cljs.core/chunk-rest","~$cljs.core/atom","~$re-frame.interop/now","~$re-frame.utils/first-in-vector","~$re-frame.subs/map-signals","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$re-frame.registrar/register-handler","~$re-frame.subs/clear-subscription-cache!","~$cljs.core/conj","~$re-frame.subs/kind","~$cljs.core/update","~$cljs.core/map","~$re-frame.subs/cache-lookup","~$cljs.core/fn?","~$re-frame.interop/deref?","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/swap!","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.subs/subscribe","~$re-frame.interop/make-reaction","~$re-frame.subs/to-seq","~$cljs.core/-nth","~$re-frame.subs/cache-and-return","~$cljs.core/remove","~$cljs.core/partition","~$cljs.core/not-empty","~$re-frame.interop/ratom?","~$re-frame.subs/reg-sub","~$re-frame.interop/add-on-dispose!","~$cljs.core/nth","~$re-frame.trace/*current-trace*","~$re-frame.subs/deref-input-signals","~$cljs.core/next","~$re-frame.subs/query->reaction","~$cljs.core/assoc","~$cljs.core/first","~$cljs.core/butlast","~$re-frame.trace/run-tracing-callbacks!","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/every?","~$js/Error","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1G","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","~$reagent.debug","~$reagent.impl.util"]]],["^1G","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.dom.HtmlElement"]]],["^1G","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.labs.userAgent.util","~$goog.string"]]],["^1G","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.array","~$goog.asserts"]]],["^1G","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3O","~$goog.object","~$goog.string.internal"]]],["^1G","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3T"]]],["^1G","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","~$clojure.set"]]],["^1G","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R"]]],["^3D","node_modules/prop-types/checkPropTypes.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1G","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","~$clojure.string"]]],["^1G","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3O","~$goog.reflect","^3P"]]],["^1G","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","re_frame/registrar.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^O","^V"]]],["^1G","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^3D","node_modules/scheduler/cjs/scheduler.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","7d8513ea2b82a7b8f00a1fd322704005205046bc","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I"]]],["^1G","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^3M","^3L","~$reagent.impl.batching","^3[","^3S"]]],["^3D","node_modules/scheduler/cjs/scheduler.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","19e07f39891e78ec50904d00e33146e92404379f","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I"]]],["^1G","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1G","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^3D","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","d9f1d6c2a711a6903adf603db43d9f9e19057146","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I"]]],["^3D","node_modules/react/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1G","shadow/js.js"],["49660b9b24da1302d20c78ce1e0e39f1bbc6a2c5","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^C","^41","~$clojure.walk","^3M","~$reagent.impl.component","^46","^49","^3L","^3S"]]],["^1G","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R"]]],["^3D","node_modules/react-dom/cjs/react-dom.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","8bcd7418816cc2e434554e0592001071a9f4f838","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","^C","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1626984168000,1626984168000,1626984168000],["^3D","node_modules/react/cjs/react.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","ea9e9a66370bbe35b404f4de02d009d42a753e6d","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","^4>","~$module$node_modules$prop_types$checkPropTypes"]]],["^1G","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","^45"]]],["^1G","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","~$goog.fs.blob","^3U","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3W","^3X","^3Y","^3Z"]]],["^1G","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^3D","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","0b00a799c88b303e4c3e8fe2628f7bde50128f0d","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I"]]],["^1G","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3R","~$goog.html.SafeUrl","^3Y","^3Z","^3T"]]],["^1G","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4C","~$goog.html.SafeStyle","^4E","^3V","~$goog.html.uncheckedconversions","^3Y","^3T"]]],["^1G","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^3S","^C","^3M","^46","^49","^3L"]]],["^1G","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R"]]],["^1G","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1G","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3R","~$goog.dom.TagName","~$goog.dom.tags","^4C","^4I","~$goog.html.SafeStyleSheet","^4E","^3V","^4D","^3W","^3X","^42","^3S","^3Y","^3Z","^3T"]]],["^1G","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3S"]]],["^1G","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^3D","node_modules/scheduler/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","408126fc2241739168bcaf5965ae56a7df143144","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1G","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3O","^3P"]]],["^1G","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q"]]],["^1G","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3R","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4M","~$goog.dom.safe","^4H","^4J","~$goog.math.Coordinate","~$goog.math.Size","^3S","^3P","^3Y","~$goog.string.Unicode","~$goog.userAgent"]]],["^1G","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.debug.Error","^4S"]]],["^1G","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3R","^3P","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1G","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^3D","node_modules/object-assign/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","519ffd5a4c91b67302cc9947b794966d629860cd","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I"]]],["^1G","re_frame/db.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^O"]]],["^1G","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",[]]],["^1G","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3S"]]],["^1G","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^3P","~$goog.string.StringBuffer"]]],["^3D","node_modules/react/cjs/react.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","32f2924b22daf411bb2b61bc45a3540aca73e0b2","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","^4>"]]],["^1G","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R"]]],["^1G","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^4T","^4J","^3Y","^3T"]]],["^1G","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3T"]]],["^1G","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^C","~$reagent.impl.template","^4=","^3M","^46","^49","^3L","~$reagent.dom"]]],["^1G","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.math"]]],["^1G","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Q","^3R","^4G","^56"]]],["^1G","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.debug.entryPointRegistry","~$goog.dom","^4M","^4G","^42","^43"]]],["^1G","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","^4H","^4C","^4I","^4O","^4E","^3V","^3Y","^3T","^3W"]]],["^1G","re_frame/utils.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^V"]]],["^1G","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^E","^3M","^54","^46","^49"]]],["^3D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I"]]],["^1G","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S"]]],["^1G","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","~$goog.math.Long","~$goog.math.Integer","^3P","^3S","^3Q","~$goog.Uri","^53"]]],["^1G","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Y","^3Z","^4D","^3R"]]],["^1G","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R"]]],["^1G","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3Y","^4I","^3Z","^3Q","^3S","^3R","^3T"]]],["^1G","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^45"]]],["^1G","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^4X"]]],["^3D","node_modules/scheduler/tracing.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^3D","node_modules/react-dom/cjs/react-dom.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","0b5e8617f1ca8948570e61d039ee42135b4ddff8","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^3I","^C","^4>","^4?","^4A","~$module$node_modules$scheduler$tracing"]]],["^1G","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R"]]],["^1G","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","^3P"]]],["^1G","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^3R","^3Z"]]],["^1G","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^O","^V","^4G"]]],["^1G","re_frame/subs.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^3E",["^ ","^3F",null,"^3G",["^H",[]],"^3H",["^S","^R","^W","^O","^V","^U","^Q","^P"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1583853211000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1583853211000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1583853211000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1618505986000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618505042000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1626984168000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1626984167000,"jar:file:/C:/Users/jace.rockman/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618505042000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/subs.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^Q","^R","^R","^S","^S","^T","^P","^U","^U","^V","^V","^W","^W"],"^X",["^H",["^Y"]],"~:shadow/js-access-global",["^H",["Error"]],"^Z",["^ ","^[","^O","^10","^V","^11","^W","^12","^O","^13","^O","^14","^O","^15","^Q","^16","^U","^17","^O","^18","^O","^19","^O","^1:","^Q","^1;","^Q"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1>",["~$quote",["^1>",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^I","^2W","^6","re_frame/subs.cljc","^:",13,"~:method-params",["^1>",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1>",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^6<",["^1>",["^6=",["^1>",[["~$x"]]]]],"^6>","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^6<",["^1>",["^6=",["^1>",[["~$query-v","~$dynv","~$r"]]]]],"^6>","cache the reaction r"],"^I","^2Y","^6","re_frame/subs.cljc","^:",23,"^6?",["^1>",[["^6H","^6I","~$r"]]],"^6@",null,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^7",42,"^9",42,"^6E",3,"^6F",true,"^6<",["^1>",["^6=",["^1>",[["^6H","^6I","~$r"]]]]],"^6>","cache the reaction r"],"~$deref-input-signals",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^6<",["^1>",["^6=",["^1>",[["~$signals","~$query-id"]]]]]],"^6K",true,"^I","^36","^6","re_frame/subs.cljc","^:",27,"^6?",["^1>",[["^6L","^6M"]]],"^6@",null,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^7",188,"^6C",["^H",["^6D","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^6E",2,"^6F",true,"^6<",["^1>",["^6=",["^1>",[["^6L","^6M"]]]]]],"~$subscribe",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^6<",["^1>",["^6=",["^1>",[["~$query"],["^6R","^6I"]]]]],"^6>","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^6B",false,"~:fixed-arity",2,"^6E",2,"^6?",[["^6R"],["^6R","^6I"]],"^6<",["^1>",[["^6R"],["^6R","^6I"]]],"^6A",["^1>",[null,null]]]],"^I","^2U","^6","re_frame/subs.cljc","^:",16,"^6S",["^ ","^6B",false,"^6T",2,"^6E",2,"^6?",[["^6R"],["^6R","^6I"]],"^6<",["^1>",[["^6R"],["^6R","^6I"]]],"^6A",["^1>",[null,null]]],"^6?",[["^6R"],["^6R","^6I"]],"^6@",null,"^6T",2,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"~:methods",[["^ ","^6T",1,"^6B",false,"~:tag",["^H",[null,"^6O"]]],["^ ","^6T",2,"^6B",false,"^6V",["^H",[null,"^6O"]]]],"^7",74,"^9",74,"^6E",2,"^6F",true,"^6<",["^1>",[["^6R"],["^6R","^6I"]]],"^6>","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^6<",["^1>",["^6=",["^1>",[["^6M","~$&","~$args"]]]]],"^6>","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^6S",["^ ","^6B",true,"^6T",1,"^6E",1,"^6?",[["^1>",["^6M","^6X"]]],"^6<",["^1>",[["^6M","~$&","^6X"]]],"^6A",["^1>",[null]]]],"^I","^32","^6","re_frame/subs.cljc","^:",14,"^6S",["^ ","^6B",true,"^6T",1,"^6E",1,"^6?",[["^1>",["^6M","^6X"]]],"^6<",["^1>",[["^6M","~$&","^6X"]]],"^6A",["^1>",[null]]],"^6?",[["^1>",["^6M","^6X"]]],"^6@",null,"^6T",1,"^6A",["^1>",[null]],"^8",1,"^6B",true,"^6U",[["^ ","^6T",1,"^6B",true,"^6V","^6O"]],"^7",200,"^6C","^6O","^9",200,"^6E",1,"^6F",true,"^6<",["^1>",[["^6M","~$&","^6X"]]],"^6>","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^I","^38","^6","re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^6V","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^6<",["^1>",["^6=",["^1>",[[]]]]],"^6>","Unregisters all existing subscription handlers"],"^I","^27","^6","re_frame/subs.cljc","^:",26,"^6?",["^1>",[[]]],"^6@",null,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^7",36,"^6C",["^H",["^6O","~$clj-nil"]],"^9",36,"^6E",0,"^6F",true,"^6<",["^1>",["^6=",["^1>",[[]]]]],"^6>","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^6<",["^1>",["^6=",["^1>",[["^6H"],["^6H","~$dyn-v"]]]]],"^6S",["^ ","^6B",false,"^6T",2,"^6E",2,"^6?",[["^6H"],["^6H","^72"]],"^6<",["^1>",[["^6H"],["^6H","^72"]]],"^6A",["^1>",[null,null]]]],"^I","^2M","^6","re_frame/subs.cljc","^:",19,"^6S",["^ ","^6B",false,"^6T",2,"^6E",2,"^6?",[["^6H"],["^6H","^72"]],"^6<",["^1>",[["^6H"],["^6H","^72"]]],"^6A",["^1>",[null,null]]],"^6?",[["^6H"],["^6H","^72"]],"^6@",null,"^6T",2,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^6U",[["^ ","^6T",1,"^6B",false,"^6V","^6O"],["^ ","^6T",2,"^6B",false,"^6V",["^H",["^6O","^70"]]]],"^7",65,"^9",65,"^6E",2,"^6F",true,"^6<",["^1>",[["^6H"],["^6H","^72"]]]],"~$map-vals",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^6K",true,"^6<",["^1>",["^6=",["^1>",[["~$f","~$m"]]]]],"^6>","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^6K",true,"^I","^1W","^6","re_frame/subs.cljc","^:",16,"^6?",["^1>",[["~$f","~$m"]]],"^6@",null,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^7",163,"^6C",["^H",["^6D","^6O"]],"^9",163,"^6E",2,"^6F",true,"^6<",["^1>",["^6=",["^1>",[["~$f","~$m"]]]]],"^6>","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^I","^2J","^6","re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^6V","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^6<",["^1>",["^6=",["^1>",[[]]]]],"^6>","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^I","^2H","^6","re_frame/subs.cljc","^:",32,"^6?",["^1>",[[]]],"^6@",null,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^7",20,"^6C",["^H",["^6O","^70"]],"^9",20,"^6E",0,"^6F",true,"^6<",["^1>",["^6=",["^1>",[[]]]]],"^6>","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^6;",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^6<",["^1>",["^6=",["^1>",[["~$f","^6L"]]]]],"^6>","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^I","^2B","^6","re_frame/subs.cljc","^:",18,"^6?",["^1>",[["~$f","^6L"]]],"^6@",null,"^6A",["^1>",[null,null]],"^8",1,"^6B",false,"^7",171,"^6C",["^H",["^6D","^6N","^6O","^6P"]],"^9",171,"^6E",2,"^6F",true,"^6<",["^1>",["^6=",["^1>",[["~$f","^6L"]]]]],"^6>","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^1<",["^ ","^P","^P","^T","^P","^R","^R"],"~:cljs.analyzer/constants",["^ ","^X",["^H",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^7>","^7@","^7B","^7L","^7:","^7G","^7E","^7K","^7C","^7D","^7J","^7?","^7F","^7H","^79","^7<","^7I","^7=","^7;","^7A"]],"^1C",["^ ","^Y",["^H",[]]],"^1D",["^ "],"^1E",["^S","^R","^W","^O","^V","^U","^Q","^P"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^3C",[["^7P","~:static-fns"],true,["^7P","~:shadow-tweaks"],null,["^7P","~:source-map-inline"],null,["^7P","~:elide-asserts"],false,["^7P","~:optimize-constants"],null,["^7P","^1J"],null,["^7P","~:external-config"],null,["^7P","~:tooling-config"],null,["^7P","~:emit-constants"],null,["^7P","~:load-tests"],null,["^7P","~:form-size-threshold"],null,["^7P","~:data-readers"],null,["^7P","~:infer-externs"],"~:auto",["^7P","^1L"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7P","~:fn-invoke-direct"],null,["^7P","~:source-map"],"/dev/null"]]]